"""
AI-–∫–æ–Ω—Ç—Ä–æ–ª—å –¥–µ–¥–ª–∞–π–Ω–æ–≤: —Å–±–æ—Ä –∑–∞–¥–∞—á, –ø—Ä–æ–≥–Ω–æ–∑ —Ä–∏—Å–∫–∞, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
"""
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from core.task_manager import task_manager

class DeadlineMonitor:
    def get_all_deadlines(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ TaskManager."""
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        return task_manager.get_all_tasks(status_filter=['pending', 'in_progress'])

    def analyze_deadlines(self) -> List[Dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å —Ä–∏—Å–∫–æ–º –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
        """
        now = datetime.now()
        risky = []
        for task in self.get_all_deadlines():
            due_str = task.get('due_date')
            if not due_str:
                continue

            try:
                due = datetime.fromisoformat(due_str.replace('Z', ''))
            except (ValueError, TypeError):
                continue
                
            days_left = (due - now).days
            progress = task.get('progress', 0)
            risk = False
            reason = []

            # –ù–æ–≤–∞—è, –±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ —Ä–∏—Å–∫–∞
            if days_left < 0:
                risk = True
                reason.append(f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {-days_left} –¥–Ω.")
            elif days_left == 0:
                risk = True
                reason.append('–î–µ–¥–ª–∞–π–Ω —Å–µ–≥–æ–¥–Ω—è')
            elif days_left <= 2 and progress < 70:
                risk = True
                reason.append('–ú–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–∏–∑–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å')
            elif days_left <= 5 and progress < 30:
                risk = True
                reason.append('–°–ª–∞–±—ã–π —Å—Ç–∞—Ä—Ç, –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫')
            
            if risk:
                task['risk_reason'] = ', '.join(reason)
                risky.append(task)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        risky.sort(key=lambda x: datetime.fromisoformat(x['due_date'].replace('Z', '')))
        return risky

    def format_risk_report(self, risky: Optional[List[Dict]] = None) -> str:
        if risky is None:
            risky = self.analyze_deadlines()
            
        if not risky:
            return "‚úÖ –í—Å–µ –¥–µ–¥–ª–∞–π–Ω—ã –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º! –ù–µ—Ç –∑–∞–¥–∞—á —Å —Ä–∏—Å–∫–æ–º –ø—Ä–æ—Å—Ä–æ—á–∫–∏."
            
        report = "‚ö†Ô∏è <b>–ü–æ–¥ —É–≥—Ä–æ–∑–æ–π –¥–µ–¥–ª–∞–π–Ω–∞:</b>\n\n"
        for t in risky:
            report += (
                f"üö® <b>{t['title']}</b>\n"
                f"   - <b>–°—Ä–æ–∫:</b> {datetime.fromisoformat(t['due_date'].replace('Z', '')).strftime('%d.%m.%Y')} ({t.get('risk_reason', '–†–∏—Å–∫')})\n"
                f"   - <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {t['source'].capitalize()}\n"
                f"   - <b>–°—Ç–∞—Ç—É—Å:</b> {t['status']}, –ü—Ä–æ–≥—Ä–µ—Å—Å: {t['progress']}%\n"
            )
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            report += "   - <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b> "
            suggestions = []
            if t.get('assigned_to'):
                suggestions.append("–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å")
            if t.get('progress', 0) < 50:
                suggestions.append("–†–∞–∑–±–∏—Ç—å –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏")
            suggestions.append("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ä–æ–∫")
            report += ", ".join(suggestions) + "?\n\n"
            
        return report

deadline_monitor = DeadlineMonitor() 