"""
–ú—É–ª—å—Ç–∏–¥–∞—à–±–æ—Ä–¥: –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º, –æ—Å—Ç–∞—Ç–∫–∞–º, KPI, –∫–∞–ª–µ–Ω–¥–∞—Ä—é, –∑–∞–¥–∞—á–∞–º, –ø—Ä–æ–±–ª–µ–º–∞–º
"""
from datetime import datetime, timedelta

def get_digest():
    from core.finances import get_total_balance, get_report, purchases
    from core.analytics import BusinessAnalytics
    from core.team_manager import team_manager
    from core.calendar import calendar
    # –§–∏–Ω–∞–Ω—Å—ã
    balance = get_total_balance()
    report = get_report(period=None)
    # –û—Å—Ç–∞—Ç–∫–∏ (–ø–æ –∑–∞–∫—É–ø–∫–∞–º)
    stock = sum(p['amount'] for p in purchases if '–æ—Å—Ç–∞—Ç–æ–∫' in p.get('category', '').lower() or '—Å–∫–ª–∞–¥' in p.get('category', '').lower())
    # KPI
    analytics = BusinessAnalytics()
    kpi = analytics.get_kpi_summary()
    # –ö–∞–ª–µ–Ω–¥–∞—Ä—å (–±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è)
    events = calendar.get_upcoming_events(days=3)
    # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–∑–∞ –Ω–µ–¥–µ–ª—é)
    week_ago = (datetime.now() - timedelta(days=7)).isoformat()
    completed = [t for t in team_manager.team_data['tasks'] if t['status'] == 'completed' and t['completed_at'] >= week_ago]
    # –ü—Ä–æ–±–ª–µ–º—ã (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏)
    overdue = team_manager.get_overdue_tasks()
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
    return {
        'balance': balance,
        'income': report['income'],
        'expense': report['expense'],
        'stock': stock,
        'kpi': kpi,
        'events': events,
        'completed_tasks': completed,
        'overdue_tasks': overdue
    }

def format_digest(digest: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è Telegram"""
    text = "<b>üìä –î–∞–π–¥–∂–µ—Å—Ç –∫–æ–º–ø–∞–Ω–∏–∏</b>\n\n"
    text += f"üíµ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n–û—Å—Ç–∞—Ç–æ–∫: <b>{digest['balance']:,}</b> —Ä—É–±.\n–î–æ—Ö–æ–¥—ã: <b>{digest['income']:,}</b> —Ä—É–±. | –†–∞—Å—Ö–æ–¥—ã: <b>{digest['expense']:,}</b> —Ä—É–±.\n\n"
    text += f"üì¶ <b>–û—Å—Ç–∞—Ç–∫–∏:</b> {digest['stock']:,} (–ø–æ –∑–∞–∫—É–ø–∫–∞–º)\n\n"
    text += f"üìà <b>KPI:</b>\n"
    for k, v in digest['kpi'].items():
        text += f"‚Ä¢ {k}: <b>{v}</b>\n"
    text += "\n"
    text += f"üìÖ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å (3 –¥–Ω—è):</b>\n"
    for e in digest['events'][:5]:
        text += f"‚Ä¢ {e['date']} ‚Äî {e['title']}\n"
    text += "\n"
    text += f"‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á –∑–∞ –Ω–µ–¥–µ–ª—é:</b> {len(digest['completed_tasks'])}\n"
    for t in digest['completed_tasks'][:3]:
        text += f"‚Ä¢ {t['task']} ({t['completed_at'][:10]})\n"
    text += "\n"
    if digest['overdue_tasks']:
        text += f"üö® <b>–ü—Ä–æ–±–ª–µ–º—ã (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ):</b> {len(digest['overdue_tasks'])}\n"
        for t in digest['overdue_tasks'][:3]:
            text += f"‚Ä¢ {t['task']} (–¥–µ–¥–ª–∞–π–Ω: {t['deadline']})\n"
    else:
        text += "‚úÖ <b>–ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!</b>\n"
    return text.strip() 