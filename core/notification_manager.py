"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
"""
from typing import Optional, Dict, Any
from datetime import datetime
import asyncio
from core.work_mode import work_mode_manager

class NotificationManager:
    def __init__(self):
        self.notification_queue = []
        self.bot = None
    
    def set_bot(self, bot):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.bot = bot
    
    async def send_notification(
        self,
        chat_id: int,
        text: str,
        priority: str = 'normal',
        project: Optional[str] = None,
        **kwargs
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
        
        priority: critical, high, normal, low
        project: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if not self.bot:
            print("[ERROR] Bot instance not set")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        if not work_mode_manager.should_notify(priority, project):
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–∂–µ
            self.notification_queue.append({
                'chat_id': chat_id,
                'text': text,
                'priority': priority,
                'project': project,
                'timestamp': datetime.now().isoformat(),
                'kwargs': kwargs
            })
            print(f"[DEBUG] Notification queued due to work mode: {text[:100]}...")
            return False
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if priority == 'critical':
                text = "‚ùóÔ∏è –ö–†–ò–¢–ò–ß–ù–û ‚ùóÔ∏è\n\n" + text
            elif priority == 'high':
                text = "‚ö†Ô∏è –í–∞–∂–Ω–æ!\n\n" + text
            
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                **kwargs
            )
            return True
        except Exception as e:
            print(f"Error sending notification: {e}")
            return False
    
    async def send_queued_notifications(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.notification_queue:
            return
        
        summary = "üì¨ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
        by_project = {}
        
        for notif in self.notification_queue:
            if notif['chat_id'] != chat_id:
                continue
                
            project = notif['project'] or '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞'
            if project not in by_project:
                by_project[project] = []
            
            timestamp = datetime.fromisoformat(notif['timestamp'])
            time_str = timestamp.strftime("%H:%M")
            
            by_project[project].append(
                f"[{time_str}] {notif['text'][:100]}..."
            )
        
        for project, messages in by_project.items():
            summary += f"\nüîπ <b>{project}</b>\n"
            summary += "\n".join(messages) + "\n"
        
        if by_project:
            await self.bot.send_message(
                chat_id=chat_id,
                text=summary,
                parse_mode='HTML'
            )
            
            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            self.notification_queue = [
                n for n in self.notification_queue
                if n['chat_id'] != chat_id
            ]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
notification_manager = NotificationManager() 