"""
–ú–æ–¥—É–ª—å –∫–æ–Ω—Ç—Ä–æ–ª—è "–¥–µ–Ω—å–≥–∏ –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –æ–ø–ª–∞—Ç—ã
"""
import json
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from pathlib import Path
from core.task_manager import task_manager

class PaymentControl:
    def __init__(self):
        self.data_file = Path("payment_control.json")
        self.control_data = self._load_data()
        
    def _load_data(self) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª—è"""
        if self.data_file.exists():
            with open(self.data_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {
            'last_check': None,
            'notifications_sent': [],
            'rules': {
                'check_frequency_days': 7,
                'auto_notify': True,
                'notify_owner': True,
                'notify_accountant': True
            }
        }
    
    def _save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª—è"""
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(self.control_data, f, ensure_ascii=False, indent=2)
    
    def check_unclosed_payments(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–µ—Å—Ç—å –ø–ª–∞—Ç—ë–∂, –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)"""
        unclosed = []
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º finances —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        try:
            from core import finances
            
            for payment in finances.payments:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                required_docs = finances.get_required_docs_for_payment(payment)
                existing_docs = [finances.find_document_by_id(doc_id) for doc_id in payment['documents_ids']]
                existing_doc_types = [d['type'] for d in existing_docs if d]
                
                missing_docs = []
                for req_doc in required_docs:
                    if req_doc == '–Ω–∞–∫–ª–∞–¥–Ω–∞—è/—É–ø–¥':
                        if not any(t in existing_doc_types for t in ['–Ω–∞–∫–ª–∞–¥–Ω–∞—è', '—É–ø–¥']):
                            missing_docs.append(req_doc)
                    elif req_doc not in existing_doc_types:
                        missing_docs.append(req_doc)
                
                if missing_docs:
                    unclosed.append({
                        'payment_id': payment['id'],
                        'amount': payment['amount'],
                        'counterparty': payment['counterparty'],
                        'date': payment['date'],
                        'project': payment['project'],
                        'direction': payment['direction'],
                        'missing_docs': missing_docs,
                        'existing_docs': existing_doc_types,
                        'days_since_payment': (datetime.now() - datetime.strptime(payment['date'], '%Y-%m-%d')).days
                    })
        except ImportError:
            print("–ú–æ–¥—É–ª—å finances –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return unclosed
    
    def check_documents_without_payment(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –æ–ø–ª–∞—Ç—ã (–µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–∞)"""
        orphaned_docs = []
        
        try:
            from core import finances
            
            for doc in finances.documents:
                # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–ª–∞—Ç–µ–∂—É
                if not doc.get('payment_ids') or len(doc['payment_ids']) == 0:
                    orphaned_docs.append({
                        'doc_id': doc['id'],
                        'doc_type': doc['type'],
                        'doc_number': doc['number'],
                        'doc_date': doc['date'],
                        'amount': doc.get('amount', 0),
                        'counterparty': doc.get('counterparty_name', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                        'days_since_doc': (datetime.now() - datetime.strptime(doc['date'], '%Y-%m-%d')).days
                    })
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂
                    payment_exists = False
                    for payment_id in doc['payment_ids']:
                        if finances.find_payment_by_id(payment_id):
                            payment_exists = True
                            break
                    
                    if not payment_exists:
                        orphaned_docs.append({
                            'doc_id': doc['id'],
                            'doc_type': doc['type'],
                            'doc_number': doc['number'],
                            'doc_date': doc['date'],
                            'amount': doc.get('amount', 0),
                            'counterparty': doc.get('counterparty_name', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                            'days_since_doc': (datetime.now() - datetime.strptime(doc['date'], '%Y-%m-%d')).days,
                            'orphaned_payment_ids': doc['payment_ids']
                        })
        except ImportError:
            print("–ú–æ–¥—É–ª—å finances –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return orphaned_docs
    
    def get_control_report(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—é"""
        unclosed_payments = self.check_unclosed_payments()
        orphaned_docs = self.check_documents_without_payment()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_unclosed_amount = sum(p['amount'] for p in unclosed_payments)
        total_orphaned_amount = sum(d['amount'] for d in orphaned_docs)
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏ (–±–æ–ª–µ–µ 30 –¥–Ω–µ–π)
        critical_unclosed = [p for p in unclosed_payments if p['days_since_payment'] > 30]
        critical_orphaned = [d for d in orphaned_docs if d['days_since_doc'] > 30]
        
        return {
            'unclosed_payments': unclosed_payments,
            'orphaned_documents': orphaned_docs,
            'total_unclosed_amount': total_unclosed_amount,
            'total_orphaned_amount': total_orphaned_amount,
            'critical_unclosed_count': len(critical_unclosed),
            'critical_orphaned_count': len(critical_orphaned),
            'report_date': datetime.now().isoformat(),
            'summary': {
                'total_issues': len(unclosed_payments) + len(orphaned_docs),
                'total_amount_at_risk': total_unclosed_amount + total_orphaned_amount
            }
        }
    
    def format_telegram_report(self, report: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –¥–ª—è Telegram"""
        text = "üîç <b>–û—Ç—á—ë—Ç –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—é –ø–ª–∞—Ç–µ–∂–µ–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>\n\n"
        
        # –°–≤–æ–¥–∫–∞
        text += f"üìä <b>–°–≤–æ–¥–∫–∞:</b>\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {report['summary']['total_issues']}\n"
        text += f"‚Ä¢ –°—É–º–º–∞ –ø–æ–¥ —Ä–∏—Å–∫–æ–º: {report['summary']['total_amount_at_risk']:,} ‚ÇΩ\n"
        text += f"‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤: {report['critical_unclosed_count'] + report['critical_orphaned_count']}\n\n"
        
        # –ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        if report['unclosed_payments']:
            text += f"‚ö†Ô∏è <b>–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –ø–ª–∞—Ç–µ–∂–∏ ({len(report['unclosed_payments'])}):</b>\n"
            for payment in report['unclosed_payments'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                critical_mark = "üö® " if payment['days_since_payment'] > 30 else ""
                text += f"{critical_mark}üí∞ {payment['amount']:,} ‚ÇΩ ‚Äî {payment['counterparty']}\n"
                text += f"   üìÖ {payment['date']} ({payment['days_since_payment']} –¥–Ω. –Ω–∞–∑–∞–¥)\n"
                text += f"   üìã –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {', '.join(payment['missing_docs'])}\n"
                text += f"   üè¢ –ü—Ä–æ–µ–∫—Ç: {payment['project']}\n\n"
            
            if len(report['unclosed_payments']) > 5:
                text += f"... –∏ –µ—â—ë {len(report['unclosed_payments']) - 5} –ø–ª–∞—Ç–µ–∂–µ–π\n\n"
        
        # –î–æ–∫—É–º–µ–Ω—Ç—ã –±–µ–∑ –æ–ø–ª–∞—Ç—ã
        if report['orphaned_documents']:
            text += f"‚ö†Ô∏è <b>–î–æ–∫—É–º–µ–Ω—Ç—ã –±–µ–∑ –æ–ø–ª–∞—Ç—ã ({len(report['orphaned_documents'])}):</b>\n"
            for doc in report['orphaned_documents'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                critical_mark = "üö® " if doc['days_since_doc'] > 30 else ""
                text += f"{critical_mark}üìÑ {doc['doc_type'].title()} ‚Ññ{doc['doc_number']}\n"
                text += f"   üí∞ {doc['amount']:,} ‚ÇΩ ‚Äî {doc['counterparty']}\n"
                text += f"   üìÖ {doc['doc_date']} ({doc['days_since_doc']} –¥–Ω. –Ω–∞–∑–∞–¥)\n\n"
            
            if len(report['orphaned_documents']) > 5:
                text += f"... –∏ –µ—â—ë {len(report['orphaned_documents']) - 5} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        if report['unclosed_payments']:
            text += "‚Ä¢ –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤\n"
        if report['orphaned_documents']:
            text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –±—ã–ª–∏ –ª–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º\n"
        if report['critical_unclosed_count'] > 0 or report['critical_orphaned_count'] > 0:
            text += "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏ (–±–æ–ª–µ–µ 30 –¥–Ω–µ–π)\n"
        
        text += f"\nüìÖ –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        return text
    
    def get_weekly_summary(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        report = self.get_control_report()
        
        text = "üìà <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—é</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        text += f"üî¢ <b>–ú–µ—Ç—Ä–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
        text += f"‚Ä¢ –ù–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {len(report['unclosed_payments'])}\n"
        text += f"‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –æ–ø–ª–∞—Ç—ã: {len(report['orphaned_documents'])}\n"
        text += f"‚Ä¢ –°—É–º–º–∞ –ø–æ–¥ —Ä–∏—Å–∫–æ–º: {report['summary']['total_amount_at_risk']:,} ‚ÇΩ\n\n"
        
        # –¢–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
        counterparty_issues = {}
        for payment in report['unclosed_payments']:
            counterparty = payment['counterparty']
            if counterparty not in counterparty_issues:
                counterparty_issues[counterparty] = {'payments': 0, 'amount': 0}
            counterparty_issues[counterparty]['payments'] += 1
            counterparty_issues[counterparty]['amount'] += payment['amount']
        
        if counterparty_issues:
            text += "üè¢ <b>–¢–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤:</b>\n"
            sorted_counterparties = sorted(counterparty_issues.items(), 
                                         key=lambda x: x[1]['amount'], reverse=True)
            
            for counterparty, data in sorted_counterparties[:3]:
                text += f"‚Ä¢ {counterparty}: {data['payments']} –ø–ª–∞—Ç–µ–∂–µ–π, {data['amount']:,} ‚ÇΩ\n"
        
        return text
    
    def should_send_notification(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        if not self.control_data['rules']['auto_notify']:
            return False
        
        last_check = self.control_data.get('last_check')
        if not last_check:
            return True
        
        last_check_date = datetime.fromisoformat(last_check)
        days_since_check = (datetime.now() - last_check_date).days
        
        return days_since_check >= self.control_data['rules']['check_frequency_days']
    
    def mark_notification_sent(self):
        """–û—Ç–º–µ—Ç–∫–∞ –æ —Ç–æ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"""
        self.control_data['last_check'] = datetime.now().isoformat()
        self.control_data['notifications_sent'].append({
            'date': datetime.now().isoformat(),
            'type': 'weekly_report'
        })
        self._save_data()
    
    def get_critical_alerts(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        alerts = []
        report = self.get_control_report()
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        critical_payments = [p for p in report['unclosed_payments'] if p['days_since_payment'] > 30]
        if critical_payments:
            total_amount = sum(p['amount'] for p in critical_payments)
            alerts.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û! {len(critical_payments)} –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ {total_amount:,} ‚ÇΩ (–±–æ–ª–µ–µ 30 –¥–Ω–µ–π)")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –±–µ–∑ –æ–ø–ª–∞—Ç—ã
        critical_docs = [d for d in report['orphaned_documents'] if d['days_since_doc'] > 30]
        if critical_docs:
            total_amount = sum(d['amount'] for d in critical_docs)
            alerts.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û! {len(critical_docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –æ–ø–ª–∞—Ç—ã –Ω–∞ {total_amount:,} ‚ÇΩ (–±–æ–ª–µ–µ 30 –¥–Ω–µ–π)")
        
        return alerts

    def create_tasks_from_report(self):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –≤ TaskManager –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –æ –∫–æ–Ω—Ç—Ä–æ–ª–µ."""
        report = self.get_control_report()
        now = datetime.now()
        
        # –ó–∞–¥–∞—á–∏ –ø–æ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º –ø–ª–∞—Ç–µ–∂–∞–º
        for payment in report.get('unclosed_payments', []):
            due_date = (datetime.strptime(payment['date'], '%Y-%m-%d') + timedelta(days=14)).isoformat()
            task_manager.add_task(
                title=f"–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –ø–ª–∞—Ç–µ–∂—É –¥–ª—è {payment['counterparty']}",
                description=(
                    f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {payment['amount']:,} ‚ÇΩ –æ—Ç {payment['date']}. "
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã: {', '.join(payment['missing_docs'])}."
                ),
                source='payment_control',
                source_id=f"payment_{payment['payment_id']}",
                due_date=due_date,
                tags=['—Ñ–∏–Ω–∞–Ω—Å—ã', '–¥–æ–∫—É–º–µ–Ω—Ç—ã'],
                priority=2 # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            )
            
        # –ó–∞–¥–∞—á–∏ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –±–µ–∑ –æ–ø–ª–∞—Ç—ã
        for doc in report.get('orphaned_documents', []):
            due_date = (datetime.strptime(doc['doc_date'], '%Y-%m-%d') + timedelta(days=14)).isoformat()
            task_manager.add_task(
                title=f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É –æ—Ç {doc['counterparty']}",
                description=(
                    f"–î–æ–∫—É–º–µ–Ω—Ç {doc['doc_type']} ‚Ññ{doc['doc_number']} –Ω–∞ —Å—É–º–º—É {doc['amount']:,} ‚ÇΩ –æ—Ç {doc['doc_date']}. "
                    "–ù–µ –Ω–∞–π–¥–µ–Ω —Å–≤—è–∑–∞–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂."
                ),
                source='payment_control',
                source_id=f"doc_{doc['doc_id']}",
                due_date=due_date,
                tags=['—Ñ–∏–Ω–∞–Ω—Å—ã', '–æ–ø–ª–∞—Ç–∞'],
                priority=2
            )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
payment_control = PaymentControl() 