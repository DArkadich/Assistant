# calendar.py ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º
import json
import os
from datetime import datetime, timedelta
from google.oauth2 import service_account
from googleapiclient.discovery import build
import dateparser

# Google Calendar API setup
SCOPES = ['https://www.googleapis.com/auth/calendar']
CREDENTIALS_FILE = 'credentials.json'
TOKEN_FILE = 'token.pickle'

tasks = []
TASKS_FILE = 'tasks.json'

MY_CALENDAR_ID = 'a36aec1de6b79b81968f7f03be7949680c7cd5391607b976bdbdb463021e868c@group.calendar.google.com'

# --- Google Calendar Authentication ---
def get_google_calendar_service():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å Google Calendar API."""
    try:
        if not os.path.exists(CREDENTIALS_FILE):
            print(f"–§–∞–π–ª {CREDENTIALS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. Google Calendar –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return None
        
        # –î–ª—è Service Account –∏—Å–ø–æ–ª—å–∑—É–µ–º ServiceAccountCredentials
        creds = service_account.Credentials.from_service_account_file(
            CREDENTIALS_FILE, 
            scopes=SCOPES
        )
        
        service = build('calendar', 'v3', credentials=creds)
        return service
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Google Calendar —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return None

def add_to_google_calendar(task_text, date, time=None, description=""):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar."""
    service = get_google_calendar_service()
    if not service:
        return False
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        if time:
            start_time = f"{date}T{time}:00"
            end_time = f"{date}T{time}:30"  # 30 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        else:
            start_time = f"{date}T09:00:00"
            end_time = f"{date}T09:30:00"
        
        event = {
            'summary': task_text,
            'description': description,
            'start': {
                'dateTime': start_time,
                'timeZone': 'Europe/Moscow',
            },
            'end': {
                'dateTime': end_time,
                'timeZone': 'Europe/Moscow',
            },
        }
        
        event = service.events().insert(calendarId=MY_CALENDAR_ID, body=event).execute()
        print(f"–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google Calendar: {event.get('htmlLink')}")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ Google Calendar: {e}")
        return False

def get_google_calendar_events(date):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–∞—Ç—É."""
    service = get_google_calendar_service()
    if not service:
        return []
    
    try:
        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–Ω—è
        start_time = f"{date}T00:00:00"
        end_time = f"{date}T23:59:59"
        
        events_result = service.events().list(
            calendarId=MY_CALENDAR_ID,
            timeMin=start_time,
            timeMax=end_time,
            singleEvents=True,
            orderBy='startTime'
        ).execute()
        
        events = events_result.get('items', [])
        return events
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar: {e}")
        return []

# --- Persistence ---
def save_tasks():
    with open(TASKS_FILE, 'w', encoding='utf-8') as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)

def load_tasks():
    global tasks
    if os.path.exists(TASKS_FILE):
        with open(TASKS_FILE, 'r', encoding='utf-8') as f:
            tasks.clear()
            tasks.extend(json.load(f))

load_tasks()

# --- Task logic ---
def add_task(task_text, date=None, time=None):
    """
    –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É.
    –ü—Ä–∏–º–µ—Ä: add_task('–í—Å—Ç—Ä–µ—á–∞ —Å –¢–∏–≥—Ä–æ–π', date='2024-06-10', time='15:00')
    """
    task = {
        'id': len(tasks) + 1,
        'task_text': task_text,
        'date': date,
        'time': time,
        'done': False
    }
    tasks.append(task)
    save_tasks()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ Google Calendar –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞
    if date:
        add_to_google_calendar(task_text, date, time, f"–ó–∞–¥–∞—á–∞ –∏–∑ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
    
    return task

def get_daily_plan(date):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å.
    –ü—Ä–∏–º–µ—Ä: get_daily_plan('2024-06-10')
    """
    local_tasks = [t for t in tasks if t['date'] == date]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar
    google_events = get_google_calendar_events(date)
    for event in google_events:
        start = event['start'].get('dateTime', event['start'].get('date'))
        if 'T' in start:  # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è
            time = start.split('T')[1][:5]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ HH:MM
        else:
            time = None
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É, –Ω–æ —Å –ø–æ–º–µ—Ç–∫–æ–π —á—Ç–æ —ç—Ç–æ –∏–∑ Google Calendar
        task = {
            'id': f"gc_{event['id']}",
            'task_text': f"üìÖ {event['summary']}",
            'date': date,
            'time': time,
            'done': False,
            'from_google_calendar': True
        }
        local_tasks.append(task)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    local_tasks.sort(key=lambda x: x['time'] or '23:59')
    
    return local_tasks

def get_week_plan(start_date=None):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é (–æ—Ç start_date –∏–ª–∏ –æ—Ç —Å–µ–≥–æ–¥–Ω—è).
    –ü—Ä–∏–º–µ—Ä: get_week_plan('2024-06-10')
    """
    if not start_date:
        start = datetime.now().date()
    else:
        start = datetime.strptime(start_date, "%Y-%m-%d").date()
    week = [(start + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(7)]
    return [t for t in tasks if t['date'] in week]

def delete_task(task_id):
    """
    –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ id.
    –ü—Ä–∏–º–µ—Ä: delete_task(1)
    """
    global tasks
    tasks = [t for t in tasks if t['id'] != task_id]
    save_tasks()

def move_task(task_id, new_date):
    """
    –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–¥–∞—á—É –Ω–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.
    –ü—Ä–∏–º–µ—Ä: move_task(1, '2024-06-12')
    """
    for t in tasks:
        if t['id'] == task_id:
            t['date'] = new_date
            save_tasks()
            return t
    return None

def set_reminder(task_id, remind_at):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞).
    –ü—Ä–∏–º–µ—Ä: set_reminder(1, '2024-06-10 14:50')
    """
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ Telegram
    pass

def mark_task_done(task_id):
    """
    –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.
    –ü—Ä–∏–º–µ—Ä: mark_task_done(1)
    """
    for t in tasks:
        if t['id'] == task_id:
            t['done'] = True
            save_tasks()
            return t
    return None

def get_tasks():
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏.
    –ü—Ä–∏–º–µ—Ä: get_tasks()
    """
    return tasks 

def find_google_calendar_event_by_title_and_date(title, date):
    """–ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –¥–∞—Ç–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç event –∏–ª–∏ None."""
    events = get_google_calendar_events(date)
    for event in events:
        if event.get('summary', '').strip().lower() == title.strip().lower():
            return event
    return None

def delete_google_calendar_event(event_id):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–æ event_id."""
    service = get_google_calendar_service()
    if not service:
        return False
    try:
        service.events().delete(calendarId=MY_CALENDAR_ID, eventId=event_id).execute()
        print(f"–°–æ–±—ã—Ç–∏–µ {event_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ Google Calendar")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        return False

def update_google_calendar_event(event_id, new_title=None, new_time=None):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏/–∏–ª–∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –ø–æ event_id."""
    service = get_google_calendar_service()
    if not service:
        return False
    try:
        event = service.events().get(calendarId=MY_CALENDAR_ID, eventId=event_id).execute()
        updated = False
        if new_title:
            event['summary'] = new_title
            updated = True
        if new_time:
            # –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è, –¥–∞—Ç–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π
            date = event['start']['dateTime'][:10]
            event['start']['dateTime'] = f"{date}T{new_time}:00"
            event['end']['dateTime'] = f"{date}T{new_time}:30"  # 30 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            updated = True
        if updated:
            service.events().update(calendarId=MY_CALENDAR_ID, eventId=event_id, body=event).execute()
            print(f"–°–æ–±—ã—Ç–∏–µ {event_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Google Calendar")
            return True
        else:
            print("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        return False

def get_date_range_from_phrase(phrase):
    """–í–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∞—Ç (–ì–ì–ì–ì-–ú–ú-–î–î) –ø–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ñ—Ä–∞–∑–µ."""
    today = datetime.now().date()
    phrase = phrase.lower().strip()
    if '–ø—Ä–æ—à–ª' in phrase and '–Ω–µ–¥–µ–ª' in phrase:
        # –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        start = today - timedelta(days=today.weekday() + 7)
        end = start + timedelta(days=6)
    elif '—Å–ª–µ–¥—É—é—â' in phrase and '–Ω–µ–¥–µ–ª' in phrase:
        # –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è
        start = today + timedelta(days=(7 - today.weekday()))
        end = start + timedelta(days=6)
    elif '—Å–µ–≥–æ–¥–Ω—è' in phrase:
        start = end = today
    elif '–∑–∞–≤—Ç—Ä–∞' in phrase:
        start = end = today + timedelta(days=1)
    elif '–≤—á–µ—Ä–∞' in phrase:
        start = end = today - timedelta(days=1)
    else:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ dateparser
        dt = dateparser.parse(phrase, languages=['ru'])
        if dt:
            start = end = dt.date()
        else:
            return []
    # –°–ø–∏—Å–æ–∫ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î
    dates = [(start + timedelta(days=i)).strftime('%Y-%m-%d') for i in range((end - start).days + 1)]
    return dates

def delete_all_google_calendar_events_in_range(date_list):
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è Google Calendar –∑–∞ —Å–ø–∏—Å–æ–∫ –¥–∞—Ç. –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥."""
    service = get_google_calendar_service()
    if not service:
        return 0
    count = 0
    for date in date_list:
        events = get_google_calendar_events(date)
        print(f"[DEBUG] –°–æ–±—ã—Ç–∏—è –Ω–∞ {date}: {len(events)}")
        for event in events:
            print(f"[DEBUG] –í–∏–∂—É —Å–æ–±—ã—Ç–∏–µ: {event.get('summary')} (id={event.get('id')}) start={event.get('start')} end={event.get('end')}")
            try:
                service.events().delete(calendarId=MY_CALENDAR_ID, eventId=event['id']).execute()
                count += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event['id']}: {e}")
    return count 