"""
–ú–æ–¥—É–ª—å "–ê–Ω—Ç–∏—Ä–∞–∑—Ä—ã–≤": –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è, —Ä–∞–∑–≥—Ä—É–∑–∫–∞, —Ñ–æ–∫—É—Å
"""
from core.calendar import get_daily_plan, find_google_calendar_event_by_title_and_date, delete_google_calendar_event
from core.team_manager import team_manager
from core.payment_control import payment_control
from datetime import datetime

def get_tasks_for_prioritization() -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º."""
    today = datetime.now().strftime("%Y-%m-%d")
    tasks = get_daily_plan(today)
    overdue_tasks = team_manager.get_overdue_tasks()
    
    priority_tasks = [t for t in tasks if not t.get('done')]
    
    result = "<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
    
    if overdue_tasks:
        result += "<b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n"
        for task in overdue_tasks:
            result += f"üî• {task['description']} (–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: @{task['assignee_telegram_id']}, –¥–æ {task['deadline']})\n"
        result += "\n"
        
    if priority_tasks:
        result += "<b>–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        for task in priority_tasks:
            result += f"‚Ä¢ {task['task_text']} {task.get('time', '')}\n"
    
    if not overdue_tasks and not priority_tasks:
        return "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á. –ú–æ–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å."
        
    return result

def get_todays_meetings() -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –≤—Å—Ç—Ä–µ—á –∏–∑ Google Calendar."""
    today = datetime.now().strftime("%Y-%m-%d")
    events = get_daily_plan(today)
    return events

def cancel_meetings_by_ids(event_ids: list) -> dict:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ø–æ –∏—Ö ID."""
    cancelled_count = 0
    errors_count = 0
    for event_id in event_ids:
        if delete_google_calendar_event(event_id):
            cancelled_count += 1
        else:
            errors_count += 1
    return {'cancelled': cancelled_count, 'errors': errors_count}

def get_critical_summary() -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É —Ç–æ–ª—å–∫–æ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–º —Ç–æ—á–∫–∞–º."""
    report = payment_control.get_control_report()
    overdue_tasks = team_manager.get_overdue_tasks()
    
    summary = "<b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞:</b>\n\n"
    
    has_critical_info = False
    
    if report['critical_alerts']:
        summary += "<b>–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–ª–∞—Ç–µ–∂–µ–π:</b>\n"
        for alert in report['critical_alerts']:
            summary += f"üî¥ {alert}\n"
        summary += "\n"
        has_critical_info = True
        
    if overdue_tasks:
        summary += "<b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n"
        for task in overdue_tasks:
            summary += f"üî• {task['description']} (@{task['assignee_telegram_id']}, –¥–æ {task['deadline']})\n"
        has_critical_info = True
        
    if not has_critical_info:
        return "–ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç. –í—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º."
        
    return summary 