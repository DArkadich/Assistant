"""
–¢–µ—Å—Ç AmoCRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.amocrm import amocrm

def test_amocrm_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AmoCRM."""
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AmoCRM...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = [
        'AMOCRM_BASE_URL',
        'AMOCRM_CLIENT_ID', 
        'AMOCRM_CLIENT_SECRET',
        'AMOCRM_ACCESS_TOKEN'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ AmoCRM")
        return False
    
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return True

def test_amocrm_contacts():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤."""
    print("\nüë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
    
    try:
        contacts = amocrm.get_contacts(limit=5)
        
        if contacts is None:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            return False
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contacts)}")
        
        if contacts:
            print("üìã –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:")
            for i, contact in enumerate(contacts[:3], 1):
                print(f"  {i}. {contact['name']} (ID: {contact['id']})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_amocrm_leads():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫."""
    print("\nüíº –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫...")
    
    try:
        leads = amocrm.get_leads(limit=5)
        
        if leads is None:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫")
            return False
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {len(leads)}")
        
        if leads:
            print("üìã –ü—Ä–∏–º–µ—Ä—ã —Å–¥–µ–ª–æ–∫:")
            for i, lead in enumerate(leads[:3], 1):
                print(f"  {i}. {lead['name']} (ID: {lead['id']}, –°—É–º–º–∞: {lead.get('price', 0)} ‚ÇΩ)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_amocrm_pipelines():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–æ–∫."""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–æ–∫...")
    
    try:
        pipelines = amocrm.get_pipelines()
        
        if pipelines is None:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–æ–∫")
            return False
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≤–æ—Ä–æ–Ω–æ–∫: {len(pipelines)}")
        
        if pipelines:
            print("üìã –í–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂:")
            for i, pipeline in enumerate(pipelines, 1):
                print(f"  {i}. {pipeline['name']} (ID: {pipeline['id']})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_amocrm_analytics():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
    
    try:
        analytics = amocrm.get_analytics(period="month")
        
        if analytics is None:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            return False
        
        print("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
        print(f"  üìà –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: {analytics['total_leads']}")
        print(f"  ‚úÖ –í—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {analytics['won_leads']}")
        print(f"  üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {analytics['conversion_rate']:.1f}%")
        print(f"  üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {analytics['total_revenue']} ‚ÇΩ")
        print(f"  üíé –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {analytics['avg_deal_size']:.0f} ‚ÇΩ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_amocrm_create_contact():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞."""
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞...")
    
    try:
        test_name = f"–¢–µ—Å—Ç –∫–æ–Ω—Ç–∞–∫—Ç {datetime.now().strftime('%Y%m%d_%H%M%S')}"
        test_email = "test@example.com"
        test_phone = "+7-999-123-45-67"
        
        contact = amocrm.create_contact(
            name=test_name,
            email=test_email,
            phone=test_phone
        )
        
        if contact is None:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞")
            return False
        
        print(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω:")
        print(f"  üë§ –ò–º—è: {contact['name']}")
        print(f"  üÜî ID: {contact['id']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_amocrm_create_lead():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏."""
    print("\nüíº –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏...")
    
    try:
        test_name = f"–¢–µ—Å—Ç —Å–¥–µ–ª–∫–∞ {datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        lead = amocrm.create_lead(
            name=test_name,
            custom_fields={1: 50000}  # –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏
        )
        
        if lead is None:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏")
            return False
        
        print(f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:")
        print(f"  üíº –ù–∞–∑–≤–∞–Ω–∏–µ: {lead['name']}")
        print(f"  üÜî ID: {lead['id']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AmoCRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", test_amocrm_connection),
        ("–ö–æ–Ω—Ç–∞–∫—Ç—ã", test_amocrm_contacts),
        ("–°–¥–µ–ª–∫–∏", test_amocrm_leads),
        ("–í–æ—Ä–æ–Ω–∫–∏", test_amocrm_pipelines),
        ("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", test_amocrm_analytics),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞", test_amocrm_create_contact),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏", test_amocrm_create_lead),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! AmoCRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 