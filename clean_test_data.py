#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
sys.path.append('.')

from core.finances import *
from core.rag_system import rag_system

def clean_test_data():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã."""
    
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    test_docs = [doc for doc in documents if doc['id'].startswith('test_')]
    
    if not test_docs:
        print("‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(test_docs)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...")
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã –∏ JSON
    removed_count = 0
    for doc in test_docs:
        try:
            # –£–¥–∞–ª—è–µ–º –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã
            rag_system.delete_document(doc['id'])
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ JSON
            documents.remove(doc)
            
            removed_count += 1
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {doc['type']} - {doc['counterparty_name']}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc['id']}: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ JSON
    save_doc()
    
    print(f"\nüéâ –£–¥–∞–ª–µ–Ω–æ {removed_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!")
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã:")
    stats = rag_system.get_collection_stats()
    print(f"   - –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {stats.get('total_documents', 0)}")
    print(f"   - –ö–æ–ª–ª–µ–∫—Ü–∏—è: {stats.get('collection_name', 'N/A')}")
    print(f"   - –°—Ç–∞—Ç—É—Å: {stats.get('status', 'N/A')}")

def clean_all_data():
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã."""
    
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã!")
    confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'yes' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
    
    if confirm.lower() != 'yes':
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    try:
        # –û—á–∏—â–∞–µ–º RAG –∫–æ–ª–ª–µ–∫—Ü–∏—é
        rag_system.clear_collection()
        
        # –û—á–∏—â–∞–µ–º JSON –¥–æ–∫—É–º–µ–Ω—Ç—ã
        documents.clear()
        save_doc()
        
        print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã')
    parser.add_argument('--all', action='store_true', help='–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ)')
    
    args = parser.parse_args()
    
    if args.all:
        clean_all_data()
    else:
        clean_test_data() 