import os
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
import openai
from core import calendar, finances, planner
import re
import json
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
import pytz
import dateparser
import asyncio
import threading
from core.calendar import *
from core.finances import *
from core.planner import *
from core.drive_manager import drive_manager
from core.rag_system import rag_system
from core.image_processor import image_processor
from core.goals import goals_manager, GoalType, GoalPeriod
from core.memory import chat_memory
from core.speech_recognition import speech_recognizer
from core.email_analyzer import email_analyzer
from core.partners import partners_manager
from email.message import EmailMessage
from email.policy import EmailPriority, EmailStatus

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DEFAULT_MODEL = os.getenv("OPENAI_DEFAULT_MODEL", "gpt-3.5-turbo")
SMART_MODEL = os.getenv("OPENAI_SMART_MODEL", "gpt-4-1106-preview")

client = openai.OpenAI(api_key=OPENAI_API_KEY)

# –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä: –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT-4.1
SMART_KEYWORDS = [
    "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "–æ—Ç—á—ë—Ç", "KPI", "–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–ø–∏—Å—å–º–æ", "–ö–ü", "–æ—Ñ—Ñ–µ—Ä", "—Å–ª–æ–∂–Ω—ã–π", "–ø—Ä–æ–≥–Ω–æ–∑", "–¥–∏–∞–≥—Ä–∞–º–º–∞", "–≤—ã—Ä—É—á–∫–∞", "–∏–Ω–≤–µ—Å—Ç–æ—Ä"
]

# --- GPT intent parsing for tasks ---
TASK_PROMPT = (
    "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤–µ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
    "–ù–∞ –≤—Ö–æ–¥–µ ‚Äî —Ñ—Ä–∞–∑–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
    "–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏: intent (add/view/delete/move/done/summary), "
    "task_text, date (–ì–ì–ì–ì-–ú–ú-–î–î –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–∞, –∏–Ω–∞—á–µ null), time (–ß–ß:–ú–ú –∏–ª–∏ null), new_date (–µ—Å–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å), task_id (–µ—Å–ª–∏ –µ—Å—Ç—å). "
    "–ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ, –≤–µ—Ä–Ω–∏ null. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –¥–∞—Ç—É. "
    "–ü—Ä–∏–º–µ—Ä: {\"intent\": \"add\", \"task_text\": \"–í—Å—Ç—Ä–µ—á–∞ —Å –¢–∏–≥—Ä–æ–π\", \"date\": \"2024-06-10\", \"time\": \"15:00\"}"
)

# --- GPT intent parsing for finances ---
FIN_PROMPT = (
    "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á—ë—Ç. "
    "–ù–∞ –≤—Ö–æ–¥–µ ‚Äî —Ñ—Ä–∞–∑–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
    "–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏: intent (income/expense/report/unclassified), "
    "amount (—á–∏—Å–ª–æ), project (—Å—Ç—Ä–æ–∫–∞), description (—Å—Ç—Ä–æ–∫–∞), date (–ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ null), period (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ null), category (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ null). "
    "–ü—Ä–∏–º–µ—Ä—ã: "
    "{\"intent\": \"income\", \"amount\": 400000, \"project\": \"–í–ë\", \"description\": \"–ü–æ—Å—Ç—É–ø–∏–ª–∏ –æ—Ç –í–ë\", \"date\": \"2024-06-10\"}"
    "{\"intent\": \"expense\", \"amount\": 15000, \"project\": \"Horien\", \"description\": \"–ó–∞–∫—É–ø–∫–∞ –∫–æ—Ä–æ–±–æ–∫\", \"date\": \"2024-06-10\", \"category\": \"—É–ø–∞–∫–æ–≤–∫–∞\"}"
    "{\"intent\": \"report\", \"period\": \"–∏—é–Ω—å\", \"project\": \"Horien\"}"
    "{\"intent\": \"unclassified\"}"
)

def choose_model(user_text: str) -> str:
    for word in SMART_KEYWORDS:
        if word.lower() in user_text.lower():
            return SMART_MODEL
    return DEFAULT_MODEL

async def ask_openai(user_text: str, system_prompt: str = None) -> str:
    model = choose_model(user_text)
    messages = []
    if system_prompt:
        messages.append({"role": "system", "content": system_prompt})
    messages.append({"role": "user", "content": user_text})
    response = client.chat.completions.create(
        model=model,
        messages=messages,
        max_tokens=512,
        temperature=0.2
    )
    return response.choices[0].message.content.strip()

async def parse_task_intent(user_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ GPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –∏–Ω—Ç–µ–Ω—Ç–æ–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –∑–∞–¥–∞—á."""
    gpt_response = await ask_openai(user_text, system_prompt=TASK_PROMPT)
    try:
        data = json.loads(gpt_response)
        return data
    except Exception:
        return None

async def parse_finance_intent(user_text: str):
    gpt_response = await ask_openai(user_text, system_prompt=FIN_PROMPT)
    try:
        data = json.loads(gpt_response)
        return data
    except Exception:
        return None

async def send_daily_summary(update: Update):
    today = datetime.now().strftime("%Y-%m-%d")
    # –ó–∞–¥–∞—á–∏
    tasks = calendar.get_daily_plan(today)
    if tasks:
        tasks_text = "\n".join([f"- {t['task_text']} {t['time'] or ''} {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}" for t in tasks])
    else:
        tasks_text = "–ù–µ—Ç –∑–∞–¥–∞—á."
    # –¶–µ–ª–∏
    goals = planner.get_goals()
    if goals:
        goals_text = "\n".join([f"- {g['goal_text']} ‚Äî {g['progress']}% (–¥–æ {g['deadline']})" for g in goals])
    else:
        goals_text = "–ù–µ—Ç —Ü–µ–ª–µ–π."
    # –§–∏–Ω–∞–Ω—Å—ã (–∑–∞ —Å–µ–≥–æ–¥–Ω—è)
    report = finances.get_report(period=today)
    finance_text = f"–î–æ—Ö–æ–¥: {report['income']}, –†–∞—Å—Ö–æ–¥: {report['expense']}, –ü—Ä–∏–±—ã–ª—å: {report['profit']}"
    # --- –ß–∏—Å—Ç—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –æ–±—â–∏–π ---
    total_balance = finances.get_total_balance()
    finance_text += f"\n–ß–∏—Å—Ç—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {total_balance}"
    # --- –†–∞–∑–º–µ—Ç–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º ---
    project_reports = finances.get_report_by_project(period=today)
    if project_reports:
        finance_text += "\n\n<b>–ü–æ –ø—Ä–æ–µ–∫—Ç–∞–º:</b>"
        for project, rep in project_reports.items():
            balance = finances.get_total_balance(project=project)
            finance_text += f"\n- {project}: –î–æ—Ö–æ–¥ {rep['income']}, –†–∞—Å—Ö–æ–¥ {rep['expense']}, –ü—Ä–∏–±—ã–ª—å {rep['profit']}, –û—Å—Ç–∞—Ç–æ–∫ {balance}"
    # –ò—Ç–æ–≥
    summary = f"üóìÔ∏è –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{tasks_text}\n\nüéØ –¶–µ–ª–∏:\n{goals_text}\n\nüí∞ –§–∏–Ω–∞–Ω—Å—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{finance_text}"
    await update.message.reply_text(summary, parse_mode='HTML')

async def send_weekly_summary(update: Update):
    from core import calendar, planner, finances
    import pytz
    today = datetime.now(pytz.timezone('Europe/Moscow')).date()
    week_dates = [(today + timedelta(days=i)) for i in range(7)]
    week_strs = [d.strftime('%Y-%m-%d') for d in week_dates]
    week_days = [d.strftime('%A, %d %B').capitalize() for d in week_dates]

    # 1. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ)
    tasks_by_day = {d: [] for d in week_strs}
    for d in week_strs:
        day_tasks = [t for t in calendar.get_daily_plan(d) if not t.get('done')]
        tasks_by_day[d] = day_tasks

    # 2. –î–µ–¥–ª–∞–π–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª–µ (–ø–æ –∑–∞–¥–∞—á–∞–º –∏ —Ü–µ–ª—è–º)
    deadlines = []
    # –ó–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –Ω–∞ –Ω–µ–¥–µ–ª–µ
    for d in week_strs:
        for t in tasks_by_day[d]:
            if not t.get('from_google_calendar'):
                deadlines.append((d, t['task_text']))
    # –¶–µ–ª–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –Ω–∞ –Ω–µ–¥–µ–ª–µ
    for goal in planner.get_goals():
        deadline = goal.get('deadline')
        if deadline and deadline in week_strs:
            deadlines.append((deadline, f"–¶–µ–ª—å: {goal['goal_text']}"))

    # 3. –í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar
    events = []
    for d in week_strs:
        for t in tasks_by_day[d]:
            if t.get('from_google_calendar'):
                events.append((d, t['task_text'], t.get('time')))

    # 4. –¶–µ–ª–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    goals = planner.get_goals()
    goals_text = []
    for goal in goals:
        deadline = goal.get('deadline')
        progress = goal.get('progress', 0)
        days_left = (datetime.strptime(deadline, '%Y-%m-%d').date() - today).days if deadline else None
        tasks_left = 0
        if hasattr(planner, 'get_goal_tasks'):
            tasks_left = len([t for t in planner.get_goal_tasks(goal['goal_text']) if not t.get('done')])
        goals_text.append(f"- {goal['goal_text']} ‚Äî {progress}% (–¥–æ {deadline or '‚Äî'}, –æ—Å—Ç–∞–ª–æ—Å—å {days_left if days_left is not None else '?'} –¥–Ω., {tasks_left} –∑–∞–¥–∞—á)")
    if not goals_text:
        goals_text = ["–ù–µ—Ç —Ü–µ–ª–µ–π."]

    # 5. –§–∏–Ω–∞–Ω—Å—ã –∑–∞ –º–µ—Å—è—Ü
    period = today.strftime("%Y-%m")
    report = finances.get_report(period=period)
    finance_text = f"–î–æ—Ö–æ–¥: {report['income']}, –†–∞—Å—Ö–æ–¥: {report['expense']}, –ü—Ä–∏–±—ã–ª—å: {report['profit']}"
    # --- –ß–∏—Å—Ç—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –æ–±—â–∏–π ---
    total_balance = finances.get_total_balance()
    finance_text += f"\n–ß–∏—Å—Ç—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {total_balance}"
    # --- –†–∞–∑–º–µ—Ç–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º ---
    project_reports = finances.get_report_by_project(period=period)
    if project_reports:
        finance_text += "\n\n<b>–ü–æ –ø—Ä–æ–µ–∫—Ç–∞–º:</b>"
        for project, rep in project_reports.items():
            balance = finances.get_total_balance(project=project)
            finance_text += f"\n- {project}: –î–æ—Ö–æ–¥ {rep['income']}, –†–∞—Å—Ö–æ–¥ {rep['expense']}, –ü—Ä–∏–±—ã–ª—å {rep['profit']}, –û—Å—Ç–∞—Ç–æ–∫ {balance}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    summary = "üóìÔ∏è <b>–ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n"
    for i, d in enumerate(week_strs):
        day_header = f"<b>{week_days[i]}</b>"
        day_tasks = tasks_by_day[d]
        if day_tasks:
            summary += f"\n{day_header}:\n"
            for t in day_tasks:
                time = t.get('time')
                summary += f"- [{time or '--:--'}] {t['task_text']}\n"
    # –î–µ–¥–ª–∞–π–Ω—ã
    if deadlines:
        summary += "\n‚è∞ <b>–î–µ–¥–ª–∞–π–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª–µ:</b>\n"
        for d, text in deadlines:
            summary += f"- {d}: {text}\n"
    # –°–æ–±—ã—Ç–∏—è
    if events:
        summary += "\nüìÖ <b>–°–æ–±—ã—Ç–∏—è:</b>\n"
        for d, text, time in events:
            summary += f"- {d} {time or ''}: {text}\n"
    # –¶–µ–ª–∏
    summary += "\nüéØ <b>–¶–µ–ª–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n" + "\n".join(goals_text)
    # –§–∏–Ω–∞–Ω—Å—ã
    summary += f"\n\nüí∞ <b>–§–∏–Ω–∞–Ω—Å—ã –∑–∞ {today.strftime('%B')}:</b>\n{finance_text}"

    await update.message.reply_text(summary, parse_mode='HTML')

# --- –î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–≤–æ–¥–∫–∏ ---
last_chat_id_file = 'last_chat_id.txt'
def save_last_chat_id(chat_id):
    with open(last_chat_id_file, 'w') as f:
        f.write(str(chat_id))
def load_last_chat_id():
    if os.path.exists(last_chat_id_file):
        with open(last_chat_id_file, 'r') as f:
            return int(f.read().strip())
    return None

async def send_daily_summary_to_chat(app, chat_id):
    today = datetime.now().strftime("%Y-%m-%d")
    tasks = calendar.get_daily_plan(today)
    if tasks:
        tasks_text = "\n".join([f"- {t['task_text']} {t['time'] or ''} {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}" for t in tasks])
    else:
        tasks_text = "–ù–µ—Ç –∑–∞–¥–∞—á."
    goals = planner.get_goals()
    if goals:
        goals_text = "\n".join([f"- {g['goal_text']} ‚Äî {g['progress']}% (–¥–æ {g['deadline']})" for g in goals])
    else:
        goals_text = "–ù–µ—Ç —Ü–µ–ª–µ–π."
    report = finances.get_report(period=today)
    finance_text = f"–î–æ—Ö–æ–¥: {report['income']}, –†–∞—Å—Ö–æ–¥: {report['expense']}, –ü—Ä–∏–±—ã–ª—å: {report['profit']}"
    # --- –ß–∏—Å—Ç—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –æ–±—â–∏–π ---
    total_balance = finances.get_total_balance()
    finance_text += f"\n–ß–∏—Å—Ç—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {total_balance}"
    # --- –†–∞–∑–º–µ—Ç–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º ---
    project_reports = finances.get_report_by_project(period=today)
    if project_reports:
        finance_text += "\n\n<b>–ü–æ –ø—Ä–æ–µ–∫—Ç–∞–º:</b>"
        for project, rep in project_reports.items():
            balance = finances.get_total_balance(project=project)
            finance_text += f"\n- {project}: –î–æ—Ö–æ–¥ {rep['income']}, –†–∞—Å—Ö–æ–¥ {rep['expense']}, –ü—Ä–∏–±—ã–ª—å {rep['profit']}, –û—Å—Ç–∞—Ç–æ–∫ {balance}"
    summary = f"üóìÔ∏è –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{tasks_text}\n\nüéØ –¶–µ–ª–∏:\n{goals_text}\n\nüí∞ –§–∏–Ω–∞–Ω—Å—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{finance_text}"
    await app.bot.send_message(chat_id=chat_id, text=summary)

# --- Scheduler ---
def start_scheduler(app):
    scheduler = BackgroundScheduler(timezone=pytz.timezone('Europe/Moscow'))
    
    def job():
        chat_id = load_last_chat_id()
        if chat_id:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π event loop –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            try:
                loop = asyncio.get_event_loop()
            except RuntimeError:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
            try:
                if loop.is_running():
                    # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º task
                    asyncio.create_task(send_daily_summary_to_chat(app, chat_id))
                else:
                    # –ï—Å–ª–∏ loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                    loop.run_until_complete(send_daily_summary_to_chat(app, chat_id))
            except Exception as e:
                print(f"Error in scheduler job: {e}")
    
    scheduler.add_job(job, 'cron', hour=8, minute=0)
    scheduler.start()

def validate_task_date(date_str):
    if not date_str:
        return None
    try:
        dt = datetime.strptime(date_str, '%Y-%m-%d')
        today = datetime.now().date()
        if dt.date() < today:
            return None  # –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º, –≤–µ—Ä–æ—è—Ç–Ω–æ –æ—à–∏–±–∫–∞
        return date_str
    except Exception:
        return None

def extract_date_phrase(text):
    patterns = [
        r"–∑–∞–≤—Ç—Ä–∞ –≤ \d{1,2}(:\d{2})?",
        r"–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ \d{1,2}(:\d{2})?",
        r"–∑–∞–≤—Ç—Ä–∞[\w\s:]*",
        r"–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞[\w\s:]*",
        r"—Å–µ–≥–æ–¥–Ω—è[\w\s:]*",
        r"—á–µ—Ä–µ–∑ [^ ]+",
        r"–≤ \d{1,2}:\d{2}",
        r"–≤ \w+",  # –≤ –ø—è—Ç–Ω–∏—Ü—É
        r"–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ",
    ]
    for pat in patterns:
        m = re.search(pat, text, re.IGNORECASE)
        if m:
            return m.group(0)
    return text

def parse_natural_date(text):
    dt = dateparser.parse(text, languages=['ru'])
    if dt:
        return dt.strftime('%Y-%m-%d')
    return None

def smart_hour_from_phrase(phrase):
    # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ "—É—Ç—Ä–∞", "–Ω–æ—á–∏", "am" ‚Äî 03:00
    if re.search(r"(—É—Ç—Ä–∞|–Ω–æ—á–∏|am)", phrase, re.IGNORECASE):
        return "03:00"
    # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ "–¥–Ω—è", "–≤–µ—á–µ—Ä–∞", "pm" ‚Äî 15:00
    if re.search(r"(–¥–Ω—è|–≤–µ—á–µ—Ä–∞|pm)", phrase, re.IGNORECASE):
        return "15:00"
    # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ "–≤ 3" ‚Äî —Å—á–∏—Ç–∞–µ–º 15:00 (—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å)
    hour_match = re.search(r"–≤ (\d{1,2})(?!:)", phrase)
    if hour_match:
        hour = int(hour_match.group(1))
        if 1 <= hour <= 8:
            return f"{hour+12:02d}:00"  # 3 ‚Üí 15:00, 8 ‚Üí 20:00
        elif 9 <= hour <= 20:
            return f"{hour:02d}:00"
        else:
            return "15:00"
    return "09:00"

def parse_natural_date_and_time(text):
    phrase = extract_date_phrase(text)
    dt = dateparser.parse(phrase, languages=['ru'], settings={'PREFER_DATES_FROM': 'future'})
    if dt:
        date = dt.strftime('%Y-%m-%d')
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø—Ä–∏–º–µ–Ω—è–µ–º smart_hour_from_phrase
        if re.search(r'\d{1,2}:\d{2}', phrase):
            time = dt.strftime('%H:%M')
        else:
            time = smart_hour_from_phrase(phrase)
        print(f"[DEBUG] dateparser: text='{text}', phrase='{phrase}', parsed_date='{date}', parsed_time='{time}'")
        return date, time
    print(f"[DEBUG] dateparser: text='{text}', phrase='{phrase}', parsed_date=None, parsed_time=None")
    return None, None

# --- –ü—É–ª–ª–∏–Ω–≥ Google Calendar ---
last_polled_events = {}

def start_calendar_polling(app):
    def poll():
        while True:
            now = datetime.now(pytz.timezone('Europe/Moscow'))
            if 9 <= now.hour < 20:
                interval = 300  # 5 –º–∏–Ω—É—Ç
            else:
                interval = 3600  # 60 –º–∏–Ω—É—Ç
            try:
                chat_id = load_last_chat_id()
                if chat_id:
                    check_calendar_changes_and_notify(app, chat_id)
            except Exception as e:
                print(f"[Calendar Polling] Error: {e}")
            finally:
                import time
                time.sleep(interval)
    t = threading.Thread(target=poll, daemon=True)
    t.start()

def check_calendar_changes_and_notify(app, chat_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    from core.calendar import get_google_calendar_events
    global last_polled_events
    today = datetime.now().strftime('%Y-%m-%d')
    events = get_google_calendar_events(today)
    event_map = {e['id']: (e['summary'], e['start'].get('dateTime', e['start'].get('date'))) for e in events}
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    if last_polled_events:
        # –ù–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
        new_events = [e for eid, e in event_map.items() if eid not in last_polled_events]
        # –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        changed_events = [eid for eid in event_map if eid in last_polled_events and event_map[eid] != last_polled_events[eid]]
        # –£–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        deleted_events = [eid for eid in last_polled_events if eid not in event_map]
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try:
            loop = asyncio.get_event_loop()
            if new_events:
                for summary, start in new_events:
                    asyncio.run_coroutine_threadsafe(
                        app.bot.send_message(chat_id=chat_id, text=f"[–ö–∞–ª–µ–Ω–¥–∞—Ä—å] –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {summary} ({start})"),
                        loop
                    )
            if changed_events:
                for eid in changed_events:
                    summary, start = event_map[eid]
                    asyncio.run_coroutine_threadsafe(
                        app.bot.send_message(chat_id=chat_id, text=f"[–ö–∞–ª–µ–Ω–¥–∞—Ä—å] –ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {summary} ({start})"),
                        loop
                    )
            if deleted_events:
                for eid in deleted_events:
                    summary, start = last_polled_events[eid]
                    asyncio.run_coroutine_threadsafe(
                        app.bot.send_message(chat_id=chat_id, text=f"[–ö–∞–ª–µ–Ω–¥–∞—Ä—å] –£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {summary} ({start})"),
                        loop
                    )
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ—Ç event loop –≤ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç–æ–∫–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            print(f"[Calendar Polling] No event loop available for notifications")
    last_polled_events = event_map.copy()

# --- –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ handle_message ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    user_id = update.message.from_user.id
    username = update.message.from_user.username or update.message.from_user.full_name
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å
    chat_memory.add_message(user_id=user_id, username=username, text=user_text, role="user")
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_text}")
    save_last_chat_id(update.effective_chat.id)

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤ ---
    if context.user_data.get('awaiting_fin_date'):
        fin_intent = context.user_data.pop('awaiting_fin_date')
        import dateparser
        dt = dateparser.parse(user_text, languages=['ru'])
        if not dt:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≤—á–µ—Ä–∞', '25 –∏—é–Ω—è').")
            context.user_data['awaiting_fin_date'] = fin_intent
            return
        fin_intent['date'] = dt.strftime('%Y-%m-%d')
        if fin_intent['intent'] == 'income':
            op = finances.add_income(
                fin_intent.get("amount"),
                fin_intent.get("project"),
                description=fin_intent.get("description"),
                date=fin_intent.get("date")
            )
            await update.message.reply_text(f"–î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {op['amount']} ({op['project']}) ‚Äî {op['description']} ({op['date']})")
        elif fin_intent['intent'] == 'expense':
            op = finances.add_expense(
                fin_intent.get("amount"),
                fin_intent.get("project"),
                description=fin_intent.get("description"),
                date=fin_intent.get("date"),
                category=fin_intent.get("category")
            )
            await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {op['amount']} ({op['project']}) ‚Äî {op['description']} ({op['date']})")
        return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
    if context.user_data.get('awaiting_payment_choice'):
        doc_data = context.user_data.pop('awaiting_payment_choice')
        try:
            payment_index = int(user_text.strip()) - 1
            all_payments = finances.payments
            if 0 <= payment_index < len(all_payments):
                payment = all_payments[payment_index]
                doc = finances.add_ved_document(
                    doc_type=doc_data['doc_type'],
                    number=doc_data['number'],
                    date=doc_data['date'],
                    payment_ids=[payment['id']]
                )
                await update.message.reply_text(f"–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {doc_data['doc_type']} ‚Ññ{doc_data['number']} –æ—Ç {doc_data['date']} –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment['counterparty']} ({payment['id']})")
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                context.user_data['awaiting_payment_choice'] = doc_data
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞).")
            context.user_data['awaiting_payment_choice'] = doc_data
        return

    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏ Google Calendar ---
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    m = re.match(r"—É–¥–∞–ª–∏ —Å–æ–±—ã—Ç–∏–µ ([^\n]+) (\d{4}-\d{2}-\d{2})", user_text, re.I)
    if m:
        title, date = m.group(1).strip(), m.group(2)
        event = calendar.find_google_calendar_event_by_title_and_date(title, date)
        if event:
            ok = calendar.delete_google_calendar_event(event['id'])
            if ok:
                await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{title}' –Ω–∞ {date} —É–¥–∞–ª–µ–Ω–æ –∏–∑ Google Calendar.")
            else:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è '{title}' –Ω–∞ {date}.")
        else:
            await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{title}' –Ω–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    m = re.match(r"–ø–µ—Ä–µ–∏–º–µ–Ω—É–π —Å–æ–±—ã—Ç–∏–µ ([^\n]+) (\d{4}-\d{2}-\d{2}) –≤ ([^\n]+)", user_text, re.I)
    if m:
        old_title, date, new_title = m.group(1).strip(), m.group(2), m.group(3).strip()
        event = calendar.find_google_calendar_event_by_title_and_date(old_title, date)
        if event:
            ok = calendar.update_google_calendar_event(event['id'], new_title=new_title)
            if ok:
                await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{old_title}' –Ω–∞ {date} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ '{new_title}'.")
            else:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è '{old_title}'.")
        else:
            await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{old_title}' –Ω–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    # –ü–µ—Ä–µ–Ω–æ—Å —Å–æ–±—ã—Ç–∏—è
    m = re.match(r"–ø–µ—Ä–µ–Ω–µ—Å–∏ —Å–æ–±—ã—Ç–∏–µ ([^\n]+) (\d{4}-\d{2}-\d{2}) –Ω–∞ (\d{2}:\d{2})", user_text, re.I)
    if m:
        title, date, new_time = m.group(1).strip(), m.group(2), m.group(3)
        event = calendar.find_google_calendar_event_by_title_and_date(title, date)
        if event:
            ok = calendar.update_google_calendar_event(event['id'], new_time=new_time)
            if ok:
                await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{title}' –Ω–∞ {date} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ {new_time}.")
            else:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Å–æ–±—ã—Ç–∏—è '{title}'.")
        else:
            await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{title}' –Ω–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    # –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π/–≤—Å—Ç—Ä–µ—á/–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π/–∏–≤–µ–Ω—Ç–æ–≤ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
    m = re.match(r"—É–¥–∞–ª–∏ –≤—Å–µ (—Å–æ–±—ã—Ç–∏—è|–≤—Å—Ç—Ä–µ—á–∏|–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è|–∏–≤–µ–Ω—Ç—ã|event[—ãe]?|—Å–æ–±—ã—Ç–∏–µ) ?(–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è)? (–∑–∞|–Ω–∞) ([^\n]+)", user_text, re.I)
    if m:
        phrase = m.group(4).strip()
        date_list = calendar.get_date_range_from_phrase(phrase)
        if not date_list:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –ø–æ —Ñ—Ä–∞–∑–µ: '{phrase}'")
            return
        count = calendar.delete_all_google_calendar_events_in_range(date_list)
        await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ {count} —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar –∑–∞: {', '.join(date_list)}")
        return
    # --- –°–≤–æ–¥–∫–∞ –ø–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ñ—Ä–∞–∑–∞–º ---
    if re.search(r"(—á—Ç–æ —É –º–µ–Ω—è|–ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è|—É—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞|–¥–∞–π —Å–≤–æ–¥–∫—É|—Å–µ–≥–æ–¥–Ω—è)", user_text, re.I):
        await send_daily_summary(update)
        return
    if re.search(r"(–ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª—è|–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞)", user_text, re.I):
        await send_weekly_summary(update)
        return
    # --- –î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã ---
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    if re.search(r"–¥–æ–±–∞–≤—å –ø–ª–∞—Ç—ë–∂.*—Ä—É–±–ª", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {user_text}")
        m = re.match(r"–¥–æ–±–∞–≤—å –ø–ª–∞—Ç—ë–∂ (\d+) —Ä—É–±–ª–µ–π? ([^\n]+) (–≤—Ö–æ–¥—è—â–∏–π|–∏—Å—Ö–æ–¥—è—â–∏–π) (–≤ –†–æ—Å—Å–∏—é|–∑–∞ –≥—Ä–∞–Ω–∏—Ü—É) –ø—Ä–æ–µ–∫—Ç ([^\n]+) –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç ([^\n]+) –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ ([^\n]+)", user_text, re.I)
        if m:
            amount = int(m.group(1))
            date_phrase = m.group(2).strip()
            direction = 'in' if m.group(3) == '–≤—Ö–æ–¥—è—â–∏–π' else 'out'
            country = 'RU' if m.group(4) == '–≤ –†–æ—Å—Å–∏—é' else 'INT'
            project = m.group(5).strip()
            counterparty = m.group(6).strip()
            purpose = m.group(7).strip()
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            import dateparser
            dt = dateparser.parse(date_phrase, languages=['ru'])
            if not dt:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≤—á–µ—Ä–∞').")
                return
            
            payment = finances.add_payment(
                amount=amount,
                date=dt.strftime('%Y-%m-%d'),
                direction=direction,
                country=country,
                project=project,
                counterparty=counterparty,
                purpose=purpose
            )
            await update.message.reply_text(f"–ü–ª–∞—Ç—ë–∂ –¥–æ–±–∞–≤–ª–µ–Ω: {amount} —Ä—É–±. ({direction}, {country}, {project}) ‚Äî {counterparty} ({purpose})")
            return
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–î–æ–±–∞–≤—å –ø–ª–∞—Ç—ë–∂ <—Å—É–º–º–∞> —Ä—É–±–ª–µ–π <–¥–∞—Ç–∞> <–≤—Ö–æ–¥—è—â–∏–π/–∏—Å—Ö–æ–¥—è—â–∏–π> <–≤ –†–æ—Å—Å–∏—é/–∑–∞ –≥—Ä–∞–Ω–∏—Ü—É> –ø—Ä–æ–µ–∫—Ç <–Ω–∞–∑–≤–∞–Ω–∏–µ> –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç <–Ω–∞–∑–≤–∞–Ω–∏–µ> –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ <–æ–ø–∏—Å–∞–Ω–∏–µ>'")
            return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏
    if re.search(r"–¥–æ–±–∞–≤—å –∑–∞–∫—É–ø–∫—É", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—É–ø–∫–∏: {user_text}")
        m = re.match(r"–¥–æ–±–∞–≤—å –∑–∞–∫—É–ø–∫—É ([^\n]+) (\d+) —Ä—É–±–ª–µ–π? ([^\n]+)", user_text, re.I)
        if m:
            name = m.group(1).strip()
            amount = int(m.group(2))
            date_phrase = m.group(3).strip()
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            import dateparser
            dt = dateparser.parse(date_phrase, languages=['ru'])
            if not dt:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.")
                return
            
            purchase = finances.add_purchase(
                name=name,
                amount=amount,
                date=dt.strftime('%Y-%m-%d')
            )
            await update.message.reply_text(f"–ó–∞–∫—É–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {name} ‚Äî {amount} —Ä—É–±. ({purchase['date']})")
            return
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–î–æ–±–∞–≤—å –∑–∞–∫—É–ø–∫—É <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Å—É–º–º–∞> —Ä—É–±–ª–µ–π <–¥–∞—Ç–∞>'")
            return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if re.search(r"–¥–æ–±–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç.*(–Ω–∞–∫–ª–∞–¥–Ω–∞—è|—É–ø–¥|–≥—Ç–¥|—Å—á—ë—Ç|–∫–æ–Ω—Ç—Ä–∞–∫—Ç|–∞–∫—Ç)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {user_text}")
        m = re.match(r"–¥–æ–±–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–∞–∫–ª–∞–¥–Ω–∞—è|—É–ø–¥|–≥—Ç–¥|—Å—á—ë—Ç|–∫–æ–Ω—Ç—Ä–∞–∫—Ç|–∞–∫—Ç) –Ω–æ–º–µ—Ä ([^\n]+) –æ—Ç ([^\n]+) –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ ([a-f0-9-]+)", user_text, re.I)
        if m:
            doc_type = m.group(1)
            number = m.group(2).strip()
            date_phrase = m.group(3).strip()
            payment_id = m.group(4)
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            import dateparser
            dt = dateparser.parse(date_phrase, languages=['ru'])
            if not dt:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            payment = finances.find_payment_by_id(payment_id)
            if not payment:
                await update.message.reply_text(f"–ü–ª–∞—Ç—ë–∂ —Å ID {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            doc = finances.add_document(
                doc_type=doc_type,
                number=number,
                date=dt.strftime('%Y-%m-%d'),
                payment_ids=[payment_id]
            )
            await update.message.reply_text(f"–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {doc_type} ‚Ññ{number} –æ—Ç {doc['date']} –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
            return
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–î–æ–±–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç <—Ç–∏–ø> –Ω–æ–º–µ—Ä <–Ω–æ–º–µ—Ä> –æ—Ç <–¥–∞—Ç–∞> –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ <ID>'")
            return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ (–∞–≤—Ç–æ–ø–æ–∏—Å–∫ –ø–ª–∞—Ç–µ–∂–∞)
    if re.search(r"–¥–æ–±–∞–≤—å (–Ω–∞–∫–ª–∞–¥–Ω–∞—è|—É–ø–¥|–≥—Ç–¥|—Å—á—ë—Ç|–∫–æ–Ω—Ç—Ä–∞–∫—Ç|–∞–∫—Ç).*–¥–ª—è.*–ø–ª–∞—Ç–µ–∂–∞", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∞–≤—Ç–æ–ø–æ–∏—Å–∫): {user_text}")
        # –ò—â–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc_type_match = re.search(r"(–Ω–∞–∫–ª–∞–¥–Ω–∞—è|—É–ø–¥|–≥—Ç–¥|—Å—á—ë—Ç|–∫–æ–Ω—Ç—Ä–∞–∫—Ç|–∞–∫—Ç)", user_text, re.I)
        if not doc_type_match:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            return
        doc_type = doc_type_match.group(1)
        
        # –ò—â–µ–º –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
        number_match = re.search(r"–Ω–æ–º–µ—Ä ([^\s]+)", user_text, re.I)
        if not number_match:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            return
        number = number_match.group(1)
        
        # –ò—â–µ–º –¥–∞—Ç—É
        date_match = re.search(r"–æ—Ç ([^\s]+)", user_text, re.I)
        if not date_match:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            return
        date_phrase = date_match.group(1)
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        import dateparser
        dt = dateparser.parse(date_phrase, languages=['ru'])
        if not dt:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.")
            return
        
        # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ
        all_payments = finances.payments
        if not all_payments:
            await update.message.reply_text("–ü–ª–∞—Ç–µ–∂–µ–π –Ω–µ—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–ª–∞—Ç—ë–∂.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        text = f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—ë–∂ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_type} ‚Ññ{number} –æ—Ç {dt.strftime('%Y-%m-%d')}:\n"
        for i, payment in enumerate(all_payments, 1):
            text += f"{i}. {payment['amount']} —Ä—É–±. ‚Äî {payment['counterparty']} ({payment['date']}) [ID: {payment['id']}]\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['awaiting_payment_choice'] = {
            'doc_type': doc_type,
            'number': number,
            'date': dt.strftime('%Y-%m-%d')
        }
        
        await update.message.reply_text(text + "\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä–æ–º –ø–ª–∞—Ç–µ–∂–∞ (1, 2, 3...)")
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –ø–ª–∞—Ç–µ–∂–∏|–Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –ø–ª–∞—Ç–µ–∂–∏|–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {user_text}")
        unclosed = finances.get_unclosed_payments()
        if not unclosed:
            await update.message.reply_text("–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞–∫—Ä—ã—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.")
        else:
            text = "–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –ø–ª–∞—Ç–µ–∂–∏:\n"
            for payment in unclosed:
                required = finances.get_required_docs_for_payment(payment)
                docs = [finances.find_document_by_id(doc_id) for doc_id in payment['documents_ids']]
                doc_types = [d['type'] for d in docs if d]
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                debug_info = f"\n[DEBUG] –ü–ª–∞—Ç—ë–∂ {payment['id']}:"
                debug_info += f"\n  –¢—Ä–µ–±—É–µ–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {required}"
                debug_info += f"\n  –ï—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã: {doc_types}"
                debug_info += f"\n  IDs –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {payment['documents_ids']}"
                print(debug_info)
                
                missing = [req for req in required if req not in doc_types and req != '–Ω–∞–∫–ª–∞–¥–Ω–∞—è/—É–ø–¥' or (req == '–Ω–∞–∫–ª–∞–¥–Ω–∞—è/—É–ø–¥' and not any(t in doc_types for t in ['–Ω–∞–∫–ª–∞–¥–Ω–∞—è', '—É–ø–¥']))]
                
                text += f"\nüí∞ {payment['amount']} —Ä—É–±. ({payment['project']}) ‚Äî {payment['counterparty']}\n"
                text += f"   –î–∞—Ç–∞: {payment['date']}, –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'–≤—Ö–æ–¥—è—â–∏–π' if payment['direction'] == 'in' else '–∏—Å—Ö–æ–¥—è—â–∏–π'}\n"
                text += f"   ID: {payment['id']}\n"
                text += f"   –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {', '.join(missing) if missing else '–≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –µ—Å—Ç—å'}\n"
            
            await update.message.reply_text(text)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏|–≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏|—Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {user_text}")
        all_payments = finances.payments  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
        if not all_payments:
            await update.message.reply_text("–ü–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = "–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏:\n"
            for payment in all_payments:
                direction_text = '–≤—Ö–æ–¥—è—â–∏–π' if payment['direction'] == 'in' else '–∏—Å—Ö–æ–¥—è—â–∏–π'
                country_text = '–†–æ—Å—Å–∏—è' if payment['country'] == 'RU' else '–∑–∞ –≥—Ä–∞–Ω–∏—Ü—É'
                text += f"\n {payment['amount']} —Ä—É–±. ({payment['project']}) ‚Äî {payment['counterparty']}\n"
                text += f"   –î–∞—Ç–∞: {payment['date']}, {direction_text}, {country_text}\n"
                text += f"   ID: {payment['id']}\n"
                text += f"   –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {payment['purpose']}\n"
            
            await update.message.reply_text(text)
        return
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    if re.search(r"(—É–¥–∞–ª–∏ –ø–ª–∞—Ç—ë–∂|—É–¥–∞–ª–∏—Ç—å –ø–ª–∞—Ç—ë–∂|—É–¥–∞–ª–∏—Ç—å –ø–ª–∞—Ç–µ–∂|—É–¥–∞–ª–∏ –ø–ª–∞—Ç–µ–∂).*([a-f0-9-]{36})", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {user_text}")
        payment_id_match = re.search(r"([a-f0-9-]{36})", user_text)
        if payment_id_match:
            payment_id = payment_id_match.group(1)
            payment = finances.find_payment_by_id(payment_id)
            if payment:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                text = f"–£–¥–∞–ª—è—é –ø–ª–∞—Ç—ë–∂:\n"
                text += f"üí∞ {payment['amount']} —Ä—É–±. ({payment['project']}) ‚Äî {payment['counterparty']}\n"
                text += f"–î–∞—Ç–∞: {payment['date']}\n"
                text += f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'–≤—Ö–æ–¥—è—â–∏–π' if payment['direction'] == 'in' else '–∏—Å—Ö–æ–¥—è—â–∏–π'}\n"
                text += f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {payment['purpose']}\n"
                
                if payment['documents_ids']:
                    text += f"\n–°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã):\n"
                    for doc_id in payment['documents_ids']:
                        doc = finances.find_document_by_id(doc_id)
                        if doc:
                            text += f"  üìÑ {doc['type']} ‚Ññ{doc['number']} –æ—Ç {doc['date']}\n"
                
                # –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç—ë–∂
                if finances.delete_payment(payment_id):
                    text += f"\n‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏."
                    await update.message.reply_text(text)
                else:
                    await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
            else:
                await update.message.reply_text(f"–ü–ª–∞—Ç—ë–∂ —Å ID {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–£–¥–∞–ª–∏ –ø–ª–∞—Ç—ë–∂ [ID_–ø–ª–∞—Ç–µ–∂–∞]'")
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫—É–ø–æ–∫
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –≤—Å–µ –∑–∞–∫—É–ø–∫–∏|–≤—Å–µ –∑–∞–∫—É–ø–∫–∏|—Å–ø–∏—Å–æ–∫ –∑–∞–∫—É–ø–æ–∫)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–∫—É–ø–æ–∫: {user_text}")
        all_purchases = finances.purchases  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫—É–ø–∫–∏
        if not all_purchases:
            await update.message.reply_text("–ó–∞–∫—É–ø–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = "–í—Å–µ –∑–∞–∫—É–ø–∫–∏:\n"
            for purchase in all_purchases:
                text += f"\nüì¶ {purchase['name']} ‚Äî {purchase['amount']} —Ä—É–±.\n"
                text += f"   –î–∞—Ç–∞: {purchase['date']}\n"
                text += f"   ID: {purchase['id']}\n"
            
            await update.message.reply_text(text)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã|–≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã|—Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {user_text}")
        all_documents = finances.documents  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        if not all_documents:
            await update.message.reply_text("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = "–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n"
            for doc in all_documents:
                text += f"\nüìÑ {doc['type']} ‚Ññ{doc['number']} –æ—Ç {doc['date']}\n"
                text += f"   ID: {doc['id']}\n"
                if doc['payment_ids']:
                    payment = finances.find_payment_by_id(doc['payment_ids'][0])
                    if payment:
                        text += f"   –ü–ª–∞—Ç—ë–∂: {payment['counterparty']} ({payment['amount']} —Ä—É–±.)\n"
                else:
                    text += f"   –ü–ª–∞—Ç—ë–∂: –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω\n"
                if doc.get('file_url'):
                    text += f"   üìé –§–∞–π–ª: {doc['file_url']}\n"
            
            await update.message.reply_text(text)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã|–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã|—Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤|–≤—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {user_text}")
        contracts = [doc for doc in finances.documents if doc['type'] == '–∫–æ–Ω—Ç—Ä–∞–∫—Ç']
        if not contracts:
            await update.message.reply_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã ({len(contracts)}):\n"
            for contract in contracts:
                text += f"\nüìã –ö–æ–Ω—Ç—Ä–∞–∫—Ç ‚Ññ{contract['number']} –æ—Ç {contract['date']}\n"
                text += f"   ID: {contract['id']}\n"
                if contract['payment_ids']:
                    payment = finances.find_payment_by_id(contract['payment_ids'][0])
                    if payment:
                        text += f"   –ü–ª–∞—Ç—ë–∂: {payment['counterparty']} ({payment['amount']} —Ä—É–±.)\n"
                        text += f"   –ü—Ä–æ–µ–∫—Ç: {payment['project']}\n"
                        text += f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'–≤—Ö–æ–¥—è—â–∏–π' if payment['direction'] == 'in' else '–∏—Å—Ö–æ–¥—è—â–∏–π'}\n"
                else:
                    text += f"   –ü–ª–∞—Ç—ë–∂: –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω\n"
                if contract.get('file_url'):
                    text += f"   üìé –§–∞–π–ª: {contract['file_url']}\n"
            
            await update.message.reply_text(text)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –∏ –£–ü–î
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ|–Ω–∞–∫–ª–∞–¥–Ω—ã–µ|—É–ø–¥|–ø–æ–∫–∞–∂–∏ —É–ø–¥|—Å–ø–∏—Å–æ–∫ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö|—Å–ø–∏—Å–æ–∫ —É–ø–¥)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö/–£–ü–î: {user_text}")
        invoices = [doc for doc in finances.documents if doc['type'] in ['–Ω–∞–∫–ª–∞–¥–Ω–∞—è', '—É–ø–¥']]
        if not invoices:
            await update.message.reply_text("–ù–∞–∫–ª–∞–¥–Ω—ã—Ö –∏ –£–ü–î –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = f"–ù–∞–∫–ª–∞–¥–Ω—ã–µ –∏ –£–ü–î ({len(invoices)}):\n"
            for invoice in invoices:
                text += f"\nüìÑ {invoice['type'].title()} ‚Ññ{invoice['number']} –æ—Ç {invoice['date']}\n"
                text += f"   ID: {invoice['id']}\n"
                if invoice['payment_ids']:
                    payment = finances.find_payment_by_id(invoice['payment_ids'][0])
                    if payment:
                        text += f"   –ü–ª–∞—Ç—ë–∂: {payment['counterparty']} ({payment['amount']} —Ä—É–±.)\n"
                        text += f"   –ü—Ä–æ–µ–∫—Ç: {payment['project']}\n"
                else:
                    text += f"   –ü–ª–∞—Ç—ë–∂: –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω\n"
                if invoice.get('file_url'):
                    text += f"   üìé –§–∞–π–ª: {invoice['file_url']}\n"
            
            await update.message.reply_text(text)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ì–¢–î
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –≥—Ç–¥|–≥—Ç–¥|—Å–ø–∏—Å–æ–∫ –≥—Ç–¥|–≤—Å–µ –≥—Ç–¥)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ì–¢–î: {user_text}")
        gtd_docs = [doc for doc in finances.documents if doc['type'] == '–≥—Ç–¥']
        if not gtd_docs:
            await update.message.reply_text("–ì–¢–î –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = f"–ì–¢–î ({len(gtd_docs)}):\n"
            for gtd in gtd_docs:
                text += f"\nüåç –ì–¢–î ‚Ññ{gtd['number']} –æ—Ç {gtd['date']}\n"
                text += f"   ID: {gtd['id']}\n"
                if gtd['payment_ids']:
                    payment = finances.find_payment_by_id(gtd['payment_ids'][0])
                    if payment:
                        text += f"   –ü–ª–∞—Ç—ë–∂: {payment['counterparty']} ({payment['amount']} —Ä—É–±.)\n"
                        text += f"   –ü—Ä–æ–µ–∫—Ç: {payment['project']}\n"
                        text += f"   –°—Ç—Ä–∞–Ω–∞: {'–∑–∞ –≥—Ä–∞–Ω–∏—Ü—É' if payment['country'] == 'INT' else '–†–æ—Å—Å–∏—è'}\n"
                else:
                    text += f"   –ü–ª–∞—Ç—ë–∂: –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω\n"
                if gtd.get('file_url'):
                    text += f"   üìé –§–∞–π–ª: {gtd['file_url']}\n"
            
            await update.message.reply_text(text)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—á–µ—Ç–æ–≤
    if re.search(r"(–ø–æ–∫–∞–∂–∏ —Å—á–µ—Ç–∞|—Å—á–µ—Ç–∞|—Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤|–≤—Å–µ —Å—á–µ—Ç–∞)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—á–µ—Ç–æ–≤: {user_text}")
        bills = [doc for doc in finances.documents if doc['type'] == '—Å—á—ë—Ç']
        if not bills:
            await update.message.reply_text("–°—á–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = f"–°—á–µ—Ç–∞ ({len(bills)}):\n"
            for bill in bills:
                text += f"\nüí∞ –°—á—ë—Ç ‚Ññ{bill['number']} –æ—Ç {bill['date']}\n"
                text += f"   ID: {bill['id']}\n"
                if bill['payment_ids']:
                    payment = finances.find_payment_by_id(bill['payment_ids'][0])
                    if payment:
                        text += f"   –ü–ª–∞—Ç—ë–∂: {payment['counterparty']} ({payment['amount']} —Ä—É–±.)\n"
                        text += f"   –ü—Ä–æ–µ–∫—Ç: {payment['project']}\n"
                        text += f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'–≤—Ö–æ–¥—è—â–∏–π' if payment['direction'] == 'in' else '–∏—Å—Ö–æ–¥—è—â–∏–π'}\n"
                else:
                    text += f"   –ü–ª–∞—Ç—ë–∂: –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω\n"
                if bill.get('file_url'):
                    text += f"   üìé –§–∞–π–ª: {bill['file_url']}\n"
            
            await update.message.reply_text(text)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–æ–≤
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –∞–∫—Ç—ã|–∞–∫—Ç—ã|—Å–ø–∏—Å–æ–∫ –∞–∫—Ç–æ–≤|–≤—Å–µ –∞–∫—Ç—ã)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–æ–≤: {user_text}")
        acts = [doc for doc in finances.documents if doc['type'] == '–∞–∫—Ç']
        if not acts:
            await update.message.reply_text("–ê–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = f"–ê–∫—Ç—ã ({len(acts)}):\n"
            for act in acts:
                text += f"\nüìã –ê–∫—Ç ‚Ññ{act['number']} –æ—Ç {act['date']}\n"
                text += f"   ID: {act['id']}\n"
                if act['payment_ids']:
                    payment = finances.find_payment_by_id(act['payment_ids'][0])
                    if payment:
                        text += f"   –ü–ª–∞—Ç—ë–∂: {payment['counterparty']} ({payment['amount']} —Ä—É–±.)\n"
                        text += f"   –ü—Ä–æ–µ–∫—Ç: {payment['project']}\n"
                        text += f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'–≤—Ö–æ–¥—è—â–∏–π' if payment['direction'] == 'in' else '–∏—Å—Ö–æ–¥—è—â–∏–π'}\n"
                else:
                    text += f"   –ü–ª–∞—Ç—ë–∂: –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω\n"
                if act.get('file_url'):
                    text += f"   üìé –§–∞–π–ª: {act['file_url']}\n"
            
            await update.message.reply_text(text)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –ø—Ä–∏—Ö–æ–¥—ã –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é|–ø—Ä–∏—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é|–¥–æ—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é|–ø–æ–∫–∞–∂–∏ –¥–æ—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {user_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_match = re.search(r"–ø—Ä–æ–µ–∫—Ç[–∞]?\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        project = project_match.group(1).strip() if project_match else None
        
        week_data = finances.get_income_for_week(project=project)
        
        if not week_data['income_list']:
            project_text = f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'" if project else ""
            await update.message.reply_text(f"–ü—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é{project_text} –Ω–µ—Ç.")
        else:
            text = f"üí∞ –ü—Ä–∏—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é ({week_data['week_start']} - {week_data['week_end']})"
            if project:
                text += f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'"
            text += f":\n\n"
            
            for income in week_data['income_list']:
                text += f"üìà {income['amount']} —Ä—É–±. ({income['project']})\n"
                text += f"   {income['description']} ‚Äî {income['date']}\n\n"
            
            text += f"üíµ <b>–ò—Ç–æ–≥–æ: {week_data['total_amount']} —Ä—É–±.</b>"
            
            await update.message.reply_text(text, parse_mode='HTML')
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é
    if re.search(r"(–ø–æ–∫–∞–∂–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é|—Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é|–ø–æ–∫–∞–∂–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é|—Ç—Ä–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {user_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_match = re.search(r"–ø—Ä–æ–µ–∫—Ç[–∞]?\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        project = project_match.group(1).strip() if project_match else None
        
        week_data = finances.get_expense_for_week(project=project)
        
        if not week_data['expense_list']:
            project_text = f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'" if project else ""
            await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é{project_text} –Ω–µ—Ç.")
        else:
            text = f"üí∏ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é ({week_data['week_start']} - {week_data['week_end']})"
            if project:
                text += f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'"
            text += f":\n\n"
            
            for expense in week_data['expense_list']:
                category_text = f" [{expense.get('category', '–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}]" if expense.get('category') else ""
                text += f"üìâ {expense['amount']} —Ä—É–±. ({expense['project']}){category_text}\n"
                text += f"   {expense['description']} ‚Äî {expense['date']}\n\n"
            
            text += f"üí∏ <b>–ò—Ç–æ–≥–æ: {week_data['total_amount']} —Ä—É–±.</b>"
            
            await update.message.reply_text(text, parse_mode='HTML')
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –ø—Ä–∏—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü|–ø—Ä–∏—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü|–¥–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü|–ø–æ–∫–∞–∂–∏ –¥–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {user_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_match = re.search(r"–ø—Ä–æ–µ–∫—Ç[–∞]?\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        project = project_match.group(1).strip() if project_match else None
        
        month_data = finances.get_income_for_month(project=project)
        
        if not month_data['income_list']:
            project_text = f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'" if project else ""
            await update.message.reply_text(f"–ü—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ {month_data['period']}{project_text} –Ω–µ—Ç.")
        else:
            text = f"üí∞ –ü—Ä–∏—Ö–æ–¥—ã –∑–∞ {month_data['period']}"
            if project:
                text += f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'"
            text += f":\n\n"
            
            for income in month_data['income_list']:
                text += f"üìà {income['amount']} —Ä—É–±. ({income['project']})\n"
                text += f"   {income['description']} ‚Äî {income['date']}\n\n"
            
            text += f"üíµ <b>–ò—Ç–æ–≥–æ: {month_data['total_amount']} —Ä—É–±.</b>"
            
            await update.message.reply_text(text, parse_mode='HTML')
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü
    if re.search(r"(–ø–æ–∫–∞–∂–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü|—Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü|–ø–æ–∫–∞–∂–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü|—Ç—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {user_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_match = re.search(r"–ø—Ä–æ–µ–∫—Ç[–∞]?\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        project = project_match.group(1).strip() if project_match else None
        
        month_data = finances.get_expense_for_month(project=project)
        
        if not month_data['expense_list']:
            project_text = f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'" if project else ""
            await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {month_data['period']}{project_text} –Ω–µ—Ç.")
        else:
            text = f"üí∏ –†–∞—Å—Ö–æ–¥—ã –∑–∞ {month_data['period']}"
            if project:
                text += f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'"
            text += f":\n\n"
            
            for expense in month_data['expense_list']:
                category_text = f" [{expense.get('category', '–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}]" if expense.get('category') else ""
                text += f"üìâ {expense['amount']} —Ä—É–±. ({expense['project']}){category_text}\n"
                text += f"   {expense['description']} ‚Äî {expense['date']}\n\n"
            
            text += f"üí∏ <b>–ò—Ç–æ–≥–æ: {month_data['total_amount']} —Ä—É–±.</b>"
            
            await update.message.reply_text(text, parse_mode='HTML')
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –ø—Ä–∏—Ö–æ–¥—ã –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª|–ø—Ä–∏—Ö–æ–¥—ã –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª|–¥–æ—Ö–æ–¥—ã –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª|–ø–æ–∫–∞–∂–∏ –¥–æ—Ö–æ–¥—ã –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª: {user_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_match = re.search(r"–ø—Ä–æ–µ–∫—Ç[–∞]?\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        project = project_match.group(1).strip() if project_match else None
        
        quarter_data = finances.get_income_for_quarter(project=project)
        
        if not quarter_data['income_list']:
            project_text = f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'" if project else ""
            await update.message.reply_text(f"–ü—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ {quarter_data['period']}{project_text} –Ω–µ—Ç.")
        else:
            text = f"üí∞ –ü—Ä–∏—Ö–æ–¥—ã –∑–∞ {quarter_data['period']}"
            if project:
                text += f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'"
            text += f":\n\n"
            
            for income in quarter_data['income_list']:
                text += f"üìà {income['amount']} —Ä—É–±. ({income['project']})\n"
                text += f"   {income['description']} ‚Äî {income['date']}\n\n"
            
            text += f"üíµ <b>–ò—Ç–æ–≥–æ: {quarter_data['total_amount']} —Ä—É–±.</b>"
            
            await update.message.reply_text(text, parse_mode='HTML')
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª
    if re.search(r"(–ø–æ–∫–∞–∂–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª|—Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª|–ø–æ–∫–∞–∂–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª|—Ç—Ä–∞—Ç—ã –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª: {user_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_match = re.search(r"–ø—Ä–æ–µ–∫—Ç[–∞]?\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        project = project_match.group(1).strip() if project_match else None
        
        quarter_data = finances.get_expense_for_quarter(project=project)
        
        if not quarter_data['expense_list']:
            project_text = f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'" if project else ""
            await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {quarter_data['period']}{project_text} –Ω–µ—Ç.")
        else:
            text = f"üí∏ –†–∞—Å—Ö–æ–¥—ã –∑–∞ {quarter_data['period']}"
            if project:
                text += f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'"
            text += f":\n\n"
            
            for expense in quarter_data['expense_list']:
                category_text = f" [{expense.get('category', '–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}]" if expense.get('category') else ""
                text += f"üìâ {expense['amount']} —Ä—É–±. ({expense['project']}){category_text}\n"
                text += f"   {expense['description']} ‚Äî {expense['date']}\n\n"
            
            text += f"üí∏ <b>–ò—Ç–æ–≥–æ: {quarter_data['total_amount']} —Ä—É–±.</b>"
            
            await update.message.reply_text(text, parse_mode='HTML')
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –≥–æ–¥
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –ø—Ä–∏—Ö–æ–¥—ã –∑–∞ –≥–æ–¥|–ø—Ä–∏—Ö–æ–¥—ã –∑–∞ –≥–æ–¥|–¥–æ—Ö–æ–¥—ã –∑–∞ –≥–æ–¥|–ø–æ–∫–∞–∂–∏ –¥–æ—Ö–æ–¥—ã –∑–∞ –≥–æ–¥)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –≥–æ–¥: {user_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_match = re.search(r"–ø—Ä–æ–µ–∫—Ç[–∞]?\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        project = project_match.group(1).strip() if project_match else None
        
        year_data = finances.get_income_for_year(project=project)
        
        if not year_data['income_list']:
            project_text = f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'" if project else ""
            await update.message.reply_text(f"–ü—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ {year_data['period']} –≥–æ–¥{project_text} –Ω–µ—Ç.")
        else:
            text = f"üí∞ –ü—Ä–∏—Ö–æ–¥—ã –∑–∞ {year_data['period']} –≥–æ–¥"
            if project:
                text += f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'"
            text += f":\n\n"
            
            for income in year_data['income_list']:
                text += f"üìà {income['amount']} —Ä—É–±. ({income['project']})\n"
                text += f"   {income['description']} ‚Äî {income['date']}\n\n"
            
            text += f"üíµ <b>–ò—Ç–æ–≥–æ: {year_data['total_amount']} —Ä—É–±.</b>"
            
            await update.message.reply_text(text, parse_mode='HTML')
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –≥–æ–¥
    if re.search(r"(–ø–æ–∫–∞–∂–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –≥–æ–¥|—Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –≥–æ–¥|–ø–æ–∫–∞–∂–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –≥–æ–¥|—Ç—Ä–∞—Ç—ã –∑–∞ –≥–æ–¥)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –≥–æ–¥: {user_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_match = re.search(r"–ø—Ä–æ–µ–∫—Ç[–∞]?\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        project = project_match.group(1).strip() if project_match else None
        
        year_data = finances.get_expense_for_year(project=project)
        
        if not year_data['expense_list']:
            project_text = f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'" if project else ""
            await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {year_data['period']} –≥–æ–¥{project_text} –Ω–µ—Ç.")
        else:
            text = f"üí∏ –†–∞—Å—Ö–æ–¥—ã –∑–∞ {year_data['period']} –≥–æ–¥"
            if project:
                text += f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'"
            text += f":\n\n"
            
            for expense in year_data['expense_list']:
                category_text = f" [{expense.get('category', '–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}]" if expense.get('category') else ""
                text += f"üìâ {expense['amount']} —Ä—É–±. ({expense['project']}){category_text}\n"
                text += f"   {expense['description']} ‚Äî {expense['date']}\n\n"
            
            text += f"üí∏ <b>–ò—Ç–æ–≥–æ: {year_data['total_amount']} —Ä—É–±.</b>"
            
            await update.message.reply_text(text, parse_mode='HTML')
        return
    
    # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É
    if re.search(r"(–Ω–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.*–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç|–ø–æ–∏—Å–∫.*–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç|–¥–æ–∫—É–º–µ–Ω—Ç—ã.*–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É: {user_text}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
        counterparty_match = re.search(r"–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç[–∞]?\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        if counterparty_match:
            counterparty_name = counterparty_match.group(1).strip()
            found_docs = finances.search_documents_by_counterparty(counterparty_name)
            
            if not found_docs:
                await update.message.reply_text(f"–î–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ '{counterparty_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                text = f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ '{counterparty_name}' ({len(found_docs)}):\n\n"
                for doc in found_docs:
                    text += f"üìã {doc['type'].title()} ‚Ññ{doc['number']} –æ—Ç {doc['date']}\n"
                    text += f"   ID: {doc['id']}\n"
                    if doc.get('amount'):
                        text += f"   –°—É–º–º–∞: {doc['amount']} —Ä—É–±.\n"
                    if doc.get('description'):
                        text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {doc['description']}\n"
                    if doc.get('file_url'):
                        text += f"   üìé –§–∞–π–ª: {doc['file_url']}\n"
                    text += "\n"
                
                await update.message.reply_text(text)
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–ù–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ [–Ω–∞–∑–≤–∞–Ω–∏–µ]'")
        return
    
    # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if re.search(r"(–Ω–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.*–ø—Ä–æ|–ø–æ–∏—Å–∫.*–¥–æ–∫—É–º–µ–Ω—Ç—ã.*–ø—Ä–æ|–¥–æ–∫—É–º–µ–Ω—Ç—ã.*–ø—Ä–æ)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {user_text}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords_match = re.search(r"–ø—Ä–æ\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        if keywords_match:
            keywords = keywords_match.group(1).strip().split()
            found_docs = finances.search_documents_by_keywords(keywords)
            
            if not found_docs:
                await update.message.reply_text(f"–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º '{', '.join(keywords)}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                text = f"üîç –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º '{', '.join(keywords)}' ({len(found_docs)}):\n\n"
                for doc in found_docs:
                    text += f"üìã {doc['type'].title()} ‚Ññ{doc['number']} –æ—Ç {doc['date']}\n"
                    text += f"   ID: {doc['id']}\n"
                    if doc.get('counterparty_name'):
                        text += f"   –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {doc['counterparty_name']}\n"
                    if doc.get('amount'):
                        text += f"   –°—É–º–º–∞: {doc['amount']} —Ä—É–±.\n"
                    if doc.get('description'):
                        text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {doc['description']}\n"
                    text += "\n"
                
                await update.message.reply_text(text)
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–ù–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ [–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞]'")
        return
    
    # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ
    if re.search(r"(–Ω–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.*—Å—É–º–º–∞|–¥–æ–∫—É–º–µ–Ω—Ç—ã.*—Å—É–º–º–∞|–ø–æ–∏—Å–∫.*—Å—É–º–º–∞)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ: {user_text}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É
        amount_match = re.search(r"—Å—É–º–º–∞[–∞]?\s+(?:–æ—Ç\s+)?(\d+)(?:\s+–¥–æ\s+(\d+))?", user_text, re.I)
        if amount_match:
            min_amount = int(amount_match.group(1))
            max_amount = int(amount_match.group(2)) if amount_match.group(2) else None
            
            found_docs = finances.search_documents_by_amount(min_amount, max_amount)
            
            if not found_docs:
                range_text = f"–æ—Ç {min_amount}" + (f" –¥–æ {max_amount}" if max_amount else "")
                await update.message.reply_text(f"–î–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ —Å—É–º–º–æ–π {range_text} —Ä—É–±. –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                range_text = f"–æ—Ç {min_amount}" + (f" –¥–æ {max_amount}" if max_amount else "")
                text = f"üí∞ –î–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ —Å—É–º–º–æ–π {range_text} —Ä—É–±. ({len(found_docs)}):\n\n"
                for doc in found_docs:
                    text += f"üìã {doc['type'].title()} ‚Ññ{doc['number']} –æ—Ç {doc['date']}\n"
                    text += f"   ID: {doc['id']}\n"
                    text += f"   –°—É–º–º–∞: {doc['amount']} —Ä—É–±.\n"
                    if doc.get('counterparty_name'):
                        text += f"   –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {doc['counterparty_name']}\n"
                    text += "\n"
                
                await update.message.reply_text(text)
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–ù–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å—É–º–º–∞ –æ—Ç 100000 –¥–æ 500000' –∏–ª–∏ '–ù–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å—É–º–º–∞ –æ—Ç 100000'")
        return
    
    # –°–≤–æ–¥–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
    if re.search(r"(—Å–≤–æ–¥–∫–∞.*–¥–æ–∫—É–º–µ–Ω—Ç—ã|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.*–¥–æ–∫—É–º–µ–Ω—Ç—ã|–¥–æ–∫—É–º–µ–Ω—Ç—ã.*—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É —Å–≤–æ–¥–∫–∏ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º: {user_text}")
        
        summary = finances.get_documents_summary()
        
        text = f"üìä –°–≤–æ–¥–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º:\n\n"
        text += f"üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {summary['total_documents']}\n"
        text += f"üìé –° —Ñ–∞–π–ª–∞–º–∏: {summary['with_files']}\n"
        text += f"üìÑ –ë–µ–∑ —Ñ–∞–π–ª–æ–≤: {summary['without_files']}\n"
        text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {summary['total_amount']} —Ä—É–±.\n\n"
        
        text += f"üìã –ü–æ —Ç–∏–ø–∞–º:\n"
        for doc_type, count in summary['by_type'].items():
            text += f"   {doc_type.title()}: {count}\n"
        
        await update.message.reply_text(text)
        return
    
    # RAG –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if re.search(r"(–Ω–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç|–ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤|—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫|rag –ø–æ–∏—Å–∫)", user_text, re.I):
        await handle_rag_search(update, context)
        return
    
    # –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if re.search(r"(–Ω–∞–π–¥–∏ –ø–æ —Ç–∏–ø—É|–ø–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É|–¥–æ–∫—É–º–µ–Ω—Ç—ã —Ç–∏–ø–∞)", user_text, re.I):
        await handle_search_by_type(update, context)
        return
    
    # –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É
    if re.search(r"(–Ω–∞–π–¥–∏ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É|–ø–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É|–¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞)", user_text, re.I):
        await handle_search_by_counterparty(update, context)
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã
    if re.search(r"(—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rag|rag —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|—Å—Ç–∞—Ç—É—Å rag)", user_text, re.I):
        await handle_rag_stats(update, context)
        return
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ü–µ–ª–µ–π –∏ KPI
    if re.search(r"(—Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å|–Ω–æ–≤–∞—è —Ü–µ–ª—å|–¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å)", user_text, re.I):
        await handle_create_goal(update, context)
        return
    
    if re.search(r"(–ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏|—Å—Ç–∞—Ç—É—Å —Ü–µ–ª–∏|–∫–∞–∫ –¥–µ–ª–∞ —Å —Ü–µ–ª—å—é)", user_text, re.I):
        await handle_goal_progress(update, context)
        return
    
    if re.search(r"(–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å|–æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å|–ø—Ä–æ–≥—Ä–µ—Å—Å)", user_text, re.I):
        await handle_update_goal_progress(update, context)
        return
    
    if re.search(r"(–≤—Å–µ —Ü–µ–ª–∏|—Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π|–º–æ–∏ —Ü–µ–ª–∏)", user_text, re.I):
        await handle_list_goals(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    if context.user_data.get('processed_document'):
        await handle_document_action(update, context)
        return
    
    # Email –∫–æ–º–∞–Ω–¥—ã
    if re.search(r"(—Å–≤–æ–¥–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö|–≤—Ö–æ–¥—è—â–∏–µ|email —Å–≤–æ–¥–∫–∞|–ø–æ—á—Ç–∞ —Å–≤–æ–¥–∫–∞)", user_text, re.I):
        await handle_email_summary(update, context)
        return
    
    if re.search(r"(—Å—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è|–æ–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞|–≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è|email –ª–∏–Ω–∑—ã)", user_text, re.I):
        await handle_email_lens(update, context)
        return
    
    if re.search(r"(—à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞|–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞|reply template)", user_text, re.I):
        await handle_reply_template(update, context)
        return
    
    if re.search(r"(–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ email|email –Ω–∞—Å—Ç—Ä–æ–π–∫–∞|–∫–æ–Ω—Ñ–∏–≥ email)", user_text, re.I):
        await handle_email_config(update, context)
        return
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–∞–º—è—Ç—å: —á—Ç–æ —Ä–µ—à–∏–ª–∏ —Å ...
    if re.search(r"—á—Ç–æ —Ä–µ—à–∏–ª–∏ —Å (.+)", user_text, re.I):
        await handle_what_decided(update, context)
        return
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–∞–º—è—Ç—å: —Å –∫–µ–º –æ–±—Å—É–∂–¥–∞–ª–∏ ...
    if re.search(r"—Å –∫–µ–º –æ–±—Å—É–∂–¥–∞–ª–∏ (.+)", user_text, re.I):
        await handle_who_discussed(update, context)
        return

    # –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å–µ—Ç—å
    if re.search(r"(–ø–∞—Ä—Ç–Ω—ë—Ä—ã —Å–≤–æ–¥–∫–∞|—Å–≤–æ–¥–∫–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤|partners summary)", user_text, re.I):
        await handle_partners_summary(update, context)
        return
    
    if re.search(r"–¥–æ–±–∞–≤—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞", user_text, re.I):
        await handle_add_partner(update, context)
        return
    
    if re.search(r"(–ø–∞—Ä—Ç–Ω—ë—Ä—ã –¥–ª—è –ø—Ä–æ–∑–≤–æ–Ω–∞|–ø—Ä–æ–∑–≤–æ–Ω|–∑–≤–æ–Ω–∏—Ç—å)", user_text, re.I):
        await handle_partners_for_calling(update, context)
        return
    
    if re.search(r"(–ø–∞—Ä—Ç–Ω—ë—Ä—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏|email —Ä–∞—Å—Å—ã–ª–∫–∞|—Ä–∞—Å—Å—ã–ª–∫–∞)", user_text, re.I):
        await handle_partners_for_emailing(update, context)
        return
    
    if re.search(r"(–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è|proposal –¥–ª—è)", user_text, re.I):
        await handle_generate_proposal(update, context)
        return
    
    if re.search(r"(–º–∞—Å—Å–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è|bulk proposals|–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã)", user_text, re.I):
        await handle_bulk_proposals(update, context)
        return

    # –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞—á–∞ –∏ –Ω–µ —Ñ–∏–Ω–∞–Ω—Å—ã ‚Äî fallback –Ω–∞ GPT-–æ—Ç–≤–µ—Ç
    reply = await ask_openai(user_text)
    await update.message.reply_text(reply)

def extract_date_phrase_for_finance(text):
    import re
    patterns = [
        r"–≤—á–µ—Ä–∞", r"—Å–µ–≥–æ–¥–Ω—è", r"–∑–∞–≤—Ç—Ä–∞", r"–ø–æ–∑–∞–≤—á–µ—Ä–∞", r"–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞",
        r"\d{1,2} [–∞-—è]+", r"\d{1,2}\.\d{1,2}\.\d{2,4}", r"\d{4}-\d{2}-\d{2}",
        r"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥–∞|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü–∞|—Å—É–±–±–æ—Ç–∞|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    ]
    for pat in patterns:
        m = re.search(pat, text, re.IGNORECASE)
        if m:
            return m.group(0)
    return None

def run_bot():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    start_scheduler(app)
    start_calendar_polling(app)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    app.add_handler(MessageHandler(filters.PHOTO, handle_document_photo))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.VOICE, handle_voice_message))
    
    app.run_polling()

# --- RAG —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def handle_rag_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö."""
    user_text = update.message.text
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
    query_match = re.search(r"(–Ω–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç|–ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤|—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫|rag –ø–æ–∏—Å–∫)\s+(.+)", user_text, re.I)
    if not query_match:
        await update.message.reply_text(
            "üîç <b>–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ '–ù–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç [–∑–∞–ø—Ä–æ—Å]' - –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É\n"
            "‚Ä¢ '–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ [–∑–∞–ø—Ä–æ—Å]' - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫\n"
            "‚Ä¢ 'RAG –ø–æ–∏—Å–∫ [–∑–∞–ø—Ä–æ—Å]' - –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ù–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ –æ–ø–ª–∞—Ç—É —É—Å–ª—É–≥\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n"
            "‚Ä¢ RAG –ø–æ–∏—Å–∫ –Ω–∞–∫–ª–∞–¥–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤",
            parse_mode='HTML'
        )
        return
    
    query = query_match.group(2).strip()
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results = rag_system.search_documents(query, n_results=5)
        
        if not results:
            await update.message.reply_text(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':</b>\n\n"
        
        for i, doc in enumerate(results, 1):
            metadata = doc.get('metadata', {})
            distance = doc.get('distance', 0)
            # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (distance –æ–±—ã—á–Ω–æ –æ—Ç 0 –¥–æ 2)
            relevance = max(0, min(100, int((1 - distance) * 100)))
            
            text += f"üìã <b>{i}. {metadata.get('type', '–î–æ–∫—É–º–µ–Ω—Ç').title()}</b>\n"
            text += f"   –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {metadata.get('counterparty_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            text += f"   –°—É–º–º–∞: {metadata.get('amount', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±.\n"
            text += f"   –î–∞—Ç–∞: {metadata.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            text += f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance}%\n"
            text += f"   ID: {doc['id']}\n\n"
        
        await update.message.reply_text(text, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

async def handle_search_by_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø—É."""
    user_text = update.message.text
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
    type_match = re.search(r"(–Ω–∞–π–¥–∏ –ø–æ —Ç–∏–ø—É|–ø–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É|–¥–æ–∫—É–º–µ–Ω—Ç—ã —Ç–∏–ø–∞)\s+(–Ω–∞–∫–ª–∞–¥–Ω–∞—è|—É–ø–¥|–≥—Ç–¥|—Å—á—ë—Ç|–∫–æ–Ω—Ç—Ä–∞–∫—Ç|–∞–∫—Ç)(?:\s+(.+))?", user_text, re.I)
    if not type_match:
        await update.message.reply_text(
            "üìã <b>–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø—É</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ '–ù–∞–π–¥–∏ –ø–æ —Ç–∏–ø—É [—Ç–∏–ø] [–∑–∞–ø—Ä–æ—Å]' - –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞\n"
            "‚Ä¢ '–ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É [—Ç–∏–ø] [–∑–∞–ø—Ä–æ—Å]' - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É\n\n"
            "–¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n"
            "‚Ä¢ –Ω–∞–∫–ª–∞–¥–Ω–∞—è, —É–ø–¥, –≥—Ç–¥, —Å—á—ë—Ç, –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –∞–∫—Ç\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ù–∞–π–¥–∏ –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É –Ω–∞–∫–ª–∞–¥–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞",
            parse_mode='HTML'
        )
        return
    
    doc_type = type_match.group(2).lower()
    query = type_match.group(3).strip() if type_match.group(3) else ""
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É
        results = rag_system.search_by_type(doc_type, query, n_results=5)
        
        if not results:
            type_text = f" —Ç–∏–ø–∞ '{doc_type}'"
            query_text = f" –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'" if query else ""
            await update.message.reply_text(f"üìã –î–æ–∫—É–º–µ–Ω—Ç—ã{type_text}{query_text} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        text = f"üìã <b>–î–æ–∫—É–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ '{doc_type}'"
        if query:
            text += f" –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'"
        text += f":</b>\n\n"
        
        for i, doc in enumerate(results, 1):
            metadata = doc.get('metadata', {})
            distance = doc.get('distance', 0)
            # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (distance –æ–±—ã—á–Ω–æ –æ—Ç 0 –¥–æ 2)
            relevance = max(0, min(100, int((1 - distance) * 100)))
            
            text += f"üìÑ <b>{i}. {metadata.get('type', '–î–æ–∫—É–º–µ–Ω—Ç').title()}</b>\n"
            text += f"   –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {metadata.get('counterparty_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            text += f"   –°—É–º–º–∞: {metadata.get('amount', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±.\n"
            text += f"   –î–∞—Ç–∞: {metadata.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            text += f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance}%\n"
            text += f"   ID: {doc['id']}\n\n"
        
        await update.message.reply_text(text, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

async def handle_search_by_counterparty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É."""
    user_text = update.message.text
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å
    counterparty_match = re.search(r"(–Ω–∞–π–¥–∏ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É|–ø–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É|–¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞)\s+([–∞-—è—ëa-z0-9\s]+?)(?:\s+(.+))?$", user_text, re.I)
    if not counterparty_match:
        await update.message.reply_text(
            "üè¢ <b>–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ '–ù–∞–π–¥–∏ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–∑–∞–ø—Ä–æ—Å]' - –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞\n"
            "‚Ä¢ '–ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–∑–∞–ø—Ä–æ—Å]' - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ù–∞–π–¥–∏ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É –û–û–û –†–æ–≥–∞ –∏ –ö–æ–ø—ã—Ç–∞\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É –ò–ü –ò–≤–∞–Ω–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç",
            parse_mode='HTML'
        )
        return
    
    counterparty = counterparty_match.group(2).strip()
    query = counterparty_match.group(3).strip() if counterparty_match.group(3) else ""
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É
        results = rag_system.search_by_counterparty(counterparty, query, n_results=5)
        
        if not results:
            query_text = f" –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'" if query else ""
            await update.message.reply_text(f"üè¢ –î–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ '{counterparty}'{query_text} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        text = f"üè¢ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ '{counterparty}'"
        if query:
            text += f" –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'"
        text += f":</b>\n\n"
        
        for i, doc in enumerate(results, 1):
            metadata = doc.get('metadata', {})
            distance = doc.get('distance', 0)
            # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (distance –æ–±—ã—á–Ω–æ –æ—Ç 0 –¥–æ 2)
            relevance = max(0, min(100, int((1 - distance) * 100)))
            
            text += f"üìÑ <b>{i}. {metadata.get('type', '–î–æ–∫—É–º–µ–Ω—Ç').title()}</b>\n"
            text += f"   –°—É–º–º–∞: {metadata.get('amount', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±.\n"
            text += f"   –î–∞—Ç–∞: {metadata.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            text += f"   –ü—Ä–æ–µ–∫—Ç: {metadata.get('project', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            text += f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance}%\n"
            text += f"   ID: {doc['id']}\n\n"
        
        await update.message.reply_text(text, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

async def handle_rag_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RAG —Å–∏—Å—Ç–µ–º—ã."""
    try:
        stats = rag_system.get_collection_stats()
        
        if "error" in stats:
            await update.message.reply_text(f"‚ùå {stats['error']}")
            return
        
        text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã:</b>\n\n"
        text += f"üìã –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {stats.get('total_documents', 0)}\n"
        text += f"üìÅ –ö–æ–ª–ª–µ–∫—Ü–∏—è: {stats.get('collection_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        text += f"üü¢ –°—Ç–∞—Ç—É—Å: {stats.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        
        await update.message.reply_text(text, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ---
async def handle_document_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photo = update.message.photo[-1]
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file = await context.bot.get_file(photo.file_id)
        temp_path = f"/tmp/doc_photo_{photo.file_id}.jpg"
        
        await file.download_to_drive(temp_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text(
            "üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞...\n"
            "üîç –í—ã–ø–æ–ª–Ω—è—é OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ..."
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = image_processor.process_image(temp_path)
        
        if "error" in result:
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['error']}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        doc_info = result["doc_info"]
        text = result["text"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏
        report = f"üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω:</b>\n\n"
        
        if doc_info["type"] and doc_info["type"] != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            report += f"üìã –¢–∏–ø: {doc_info['type'].title()}\n"
        if doc_info["number"]:
            report += f"üî¢ –ù–æ–º–µ—Ä: {doc_info['number']}\n"
        if doc_info["date"]:
            report += f"üìÖ –î–∞—Ç–∞: {doc_info['date']}\n"
        if doc_info["amount"]:
            report += f"üí∞ –°—É–º–º–∞: {doc_info['amount']}\n"
        if doc_info["counterparty"]:
            report += f"üè¢ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {doc_info['counterparty']}\n"
        
        report += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {doc_info['confidence']}%\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞
        if text:
            preview = text[:200] + "..." if len(text) > 200 else text
            report += f"üìù <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n{preview}\n\n"
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        report += "üîß <b>–î–µ–π—Å—Ç–≤–∏—è:</b>\n"
        report += "‚Ä¢ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF' - —Å–æ–∑–¥–∞—Ç—å PDF —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π\n"
        report += "‚Ä¢ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç' - —Å–æ–∑–¥–∞—Ç—å PDF –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞\n"
        report += "‚Ä¢ '–î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É' - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º—É\n"
        report += "‚Ä¢ '–û—Ç–º–µ–Ω–∞' - –æ—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['processed_document'] = {
            'image_path': temp_path,
            'text': text,
            'doc_info': doc_info,
            'timestamp': datetime.now().isoformat()
        }
        
        await processing_msg.edit_text(report, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")

async def handle_document_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º."""
    user_text = update.message.text.lower()
    
    if 'processed_document' not in context.user_data:
        await update.message.reply_text("‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        return
    
    doc_data = context.user_data['processed_document']
    
    try:
        if '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å pdf' in user_text:
            # –°–æ–∑–¥–∞–µ–º PDF –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π
            pdf_path = f"/tmp/doc_{doc_data['timestamp']}.pdf"
            success = image_processor.create_pdf_from_image(doc_data['image_path'], pdf_path)
            
            if success:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Google Drive
                drive_result = drive_manager.upload_file(pdf_path, f"doc_{doc_data['timestamp']}.pdf")
                
                if drive_result and 'id' in drive_result:
                    await update.message.reply_text(
                        f"‚úÖ PDF —Å–æ–∑–¥–∞–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive\n"
                        f"üìÅ ID —Ñ–∞–π–ª–∞: {drive_result['id']}\n"
                        f"üìÑ –ò–º—è: {drive_result.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Drive")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF")
        
        elif '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç' in user_text:
            # –°–æ–∑–¥–∞–µ–º PDF –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            pdf_path = f"/tmp/doc_text_{doc_data['timestamp']}.pdf"
            title = f"{doc_data['doc_info']['type'].title()} {doc_data['doc_info']['number'] or ''}"
            success = image_processor.create_pdf_from_text(doc_data['text'], pdf_path, title)
            
            if success:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Google Drive
                drive_result = drive_manager.upload_file(pdf_path, f"doc_text_{doc_data['timestamp']}.pdf")
                
                if drive_result and 'id' in drive_result:
                    await update.message.reply_text(
                        f"‚úÖ PDF –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive\n"
                        f"üìÅ ID —Ñ–∞–π–ª–∞: {drive_result['id']}\n"
                        f"üìÑ –ò–º—è: {drive_result.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Drive")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF –∏–∑ —Ç–µ–∫—Å—Ç–∞")
        
        elif '–¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É' in user_text:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º—É
            doc_info = doc_data['doc_info']
            
            if doc_info['type'] and doc_info['type'] != '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                # –°–æ–∑–¥–∞–µ–º PDF –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                pdf_path = f"/tmp/doc_final_{doc_data['timestamp']}.pdf"
                image_processor.images_to_pdf([doc_data['image_path']], pdf_path)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                doc_id = add_document(
                    doc_type=doc_info['type'],
                    counterparty_name=doc_info['counterparty'] or '–ù–µ —É–∫–∞–∑–∞–Ω',
                    amount=doc_info['amount'] or 0,
                    date=doc_info['date'] or datetime.now().strftime('%Y-%m-%d'),
                    description=f"–î–æ–∫—É–º–µ–Ω—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {doc_info['confidence']}%",
                    file_path=pdf_path
                )
                
                if doc_id:
                    await update.message.reply_text(
                        f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É!\n"
                        f"üìÑ ID: {doc_id}\n"
                        f"üìã –¢–∏–ø: {doc_info['type'].title()}\n"
                        f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {doc_info['confidence']}%"
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º—É")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É")
        
        elif '–æ—Ç–º–µ–Ω–∞' in user_text:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            del context.user_data['processed_document']
            await update.message.reply_text("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
        else:
            await update.message.reply_text(
                "üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
                "‚Ä¢ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF' - —Å–æ–∑–¥–∞—Ç—å PDF –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
                "‚Ä¢ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç' - —Å–æ–∑–¥–∞—Ç—å PDF –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞\n"
                "‚Ä¢ '–î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É' - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º—É\n"
                "‚Ä¢ '–û—Ç–º–µ–Ω–∞' - –æ—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"
            )
    
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {e}")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ü–µ–ª–µ–π –∏ KPI ---
async def handle_create_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏."""
    user_text = update.message.text
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏
    # –ü—Ä–∏–º–µ—Ä: "–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å –≤—ã—Ä—É—á–∫–∞ 3 –º–ª–Ω –¥–æ —Å–µ–Ω—Ç—è–±—Ä—è"
    goal_match = re.search(r"(?:—Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å|–Ω–æ–≤–∞—è —Ü–µ–ª—å|–¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å)\s+(.+?)\s+(\d+(?:\.\d+)?)\s*(–º–ª–Ω|—Ç—ã—Å|—Ä—É–±|%|—à—Ç|–∫–ª–∏–µ–Ω—Ç–æ–≤?)?(?:\s+–¥–æ\s+(.+))?", user_text, re.I)
    
    if not goal_match:
        await update.message.reply_text(
            "üéØ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "‚Ä¢ '–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–∑–Ω–∞—á–µ–Ω–∏–µ] [–µ–¥–∏–Ω–∏—Ü–∞] –¥–æ [–¥–∞—Ç–∞]'\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å –≤—ã—Ä—É—á–∫–∞ 3 –º–ª–Ω –¥–æ —Å–µ–Ω—Ç—è–±—Ä—è\n"
            "‚Ä¢ –ù–æ–≤–∞—è —Ü–µ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏ 100 –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–æ –¥–µ–∫–∞–±—Ä—è\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ 1000 —à—Ç –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞",
            parse_mode='HTML'
        )
        return
    
    goal_name = goal_match.group(1).strip()
    target_value = float(goal_match.group(2))
    unit = goal_match.group(3) or ""
    end_date_str = goal_match.group(4)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ü–µ–ª–∏
    goal_type = GoalType.CUSTOM
    if any(word in goal_name.lower() for word in ['–≤—ã—Ä—É—á–∫–∞', '–¥–æ—Ö–æ–¥', '–ø—Ä–∏–±—ã–ª—å', '–º–ª–Ω', '—Ç—ã—Å']):
        goal_type = GoalType.REVENUE
    elif any(word in goal_name.lower() for word in ['–ø–æ–¥–ø–∏—Å–∫', '–∫–ª–∏–µ–Ω—Ç', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']):
        goal_type = GoalType.SUBSCRIPTIONS
    elif any(word in goal_name.lower() for word in ['–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–ø—Ä–æ–¥—É–∫—Ç', '—à—Ç', '–µ–¥–∏–Ω–∏—Ü']):
        goal_type = GoalType.PRODUCTION
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    end_date = None
    if end_date_str:
        end_date = parse_natural_date(end_date_str)
        if end_date:
            end_date = end_date.strftime('%Y-%m-%d')
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª—å
        goal_id = goals_manager.create_goal(
            name=goal_name,
            description=f"–¶–µ–ª—å: {goal_name} {target_value}{unit}",
            goal_type=goal_type,
            target_value=target_value,
            end_date=end_date
        )
        
        await update.message.reply_text(
            f"‚úÖ <b>–¶–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ: {goal_name}\n"
            f"üìä –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {target_value}{unit}\n"
            f"üìÖ –°—Ä–æ–∫: {end_date or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üÜî ID: {goal_id}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            f"‚Ä¢ '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ {goal_name}' - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
            f"‚Ä¢ '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å {goal_name} [–∑–Ω–∞—á–µ–Ω–∏–µ]' - –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å",
            parse_mode='HTML'
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏: {e}")

async def handle_goal_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ü–µ–ª–∏."""
    user_text = update.message.text
    
    # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    # –ü—Ä–∏–º–µ—Ä: "–ö–∞–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ 3 –º–ª–Ω –≤—ã—Ä—É—á–∫–∏ –¥–æ —Å–µ–Ω—Ç—è–±—Ä—è?"
    progress_match = re.search(r"(?:–ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏|—Å—Ç–∞—Ç—É—Å —Ü–µ–ª–∏|–∫–∞–∫ –¥–µ–ª–∞ —Å —Ü–µ–ª—å—é)\s+(.+?)(?:\s+–¥–æ\s+(.+))?", user_text, re.I)
    
    if not progress_match:
        await update.message.reply_text(
            "üìä <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ü–µ–ª–∏</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ [–Ω–∞–∑–≤–∞–Ω–∏–µ]' - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
            "‚Ä¢ '–°—Ç–∞—Ç—É—Å —Ü–µ–ª–∏ [–Ω–∞–∑–≤–∞–Ω–∏–µ]' - –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ –≤—ã—Ä—É—á–∫–∞ 3 –º–ª–Ω\n"
            "‚Ä¢ –°—Ç–∞—Ç—É—Å —Ü–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ 100 –∫–ª–∏–µ–Ω—Ç–æ–≤",
            parse_mode='HTML'
        )
        return
    
    goal_query = progress_match.group(1).strip()
    
    try:
        # –ò—â–µ–º —Ü–µ–ª—å
        goals = goals_manager.search_goals(goal_query)
        
        if not goals:
            await update.message.reply_text(f"üîç –¶–µ–ª—å '{goal_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ü–µ–ª—å
        goal = goals[0]
        progress_data = goals_manager.get_goal_progress(goal.id)
        
        if not progress_data:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Ü–µ–ª–∏ '{goal.name}'")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏: {goal.name}</b>\n\n"
        report += f"üéØ –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {goal.target_value}\n"
        report += f"üìà –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {goal.current_value}\n"
        report += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_data['progress_percentage']}%\n"
        report += f"üìâ –û—Å—Ç–∞–ª–æ—Å—å: {progress_data['remaining']}\n\n"
        
        # –¢—Ä–µ–Ω–¥
        trend = progress_data['trend']
        trend_emoji = "üìà" if trend['direction'] == 'increasing' else "üìâ" if trend['direction'] == 'decreasing' else "‚û°Ô∏è"
        report += f"{trend_emoji} <b>–¢—Ä–µ–Ω–¥:</b> {trend['direction']} ({trend['rate']}/–¥–µ–Ω—å)\n"
        
        # –ü—Ä–æ–≥–Ω–æ–∑
        forecast = progress_data['forecast']
        if forecast['achievable']:
            report += f"‚úÖ <b>–ü—Ä–æ–≥–Ω–æ–∑:</b> –¶–µ–ª—å –¥–æ—Å—Ç–∏–∂–∏–º–∞\n"
            if forecast['estimated_completion']:
                completion_date = datetime.fromisoformat(forecast['estimated_completion']).strftime('%d.%m.%Y')
                report += f"üìÖ –û–∂–∏–¥–∞–µ–º–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {completion_date}\n"
        else:
            report += f"‚ö†Ô∏è <b>–ü—Ä–æ–≥–Ω–æ–∑:</b> –¶–µ–ª—å –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π\n"
            report += f"üìä –¢—Ä–µ–±—É–µ–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {forecast['required_rate']}/–¥–µ–Ω—å\n"
        
        # –°—Ç–∞—Ç—É—Å
        status_emoji = "üü¢" if progress_data['is_on_track'] else "üî¥"
        report += f"\n{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {'–ü–æ –ø–ª–∞–Ω—É' if progress_data['is_on_track'] else '–û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ'}"
        
        await update.message.reply_text(report, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

async def handle_update_goal_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ü–µ–ª–∏."""
    user_text = update.message.text
    
    # –ü–∞—Ä—Å–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    # –ü—Ä–∏–º–µ—Ä: "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã—Ä—É—á–∫–∞ 2.5 –º–ª–Ω"
    update_match = re.search(r"(?:–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å|–æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å|–ø—Ä–æ–≥—Ä–µ—Å—Å)\s+(.+?)\s+(\d+(?:\.\d+)?)\s*(–º–ª–Ω|—Ç—ã—Å|—Ä—É–±|%|—à—Ç|–∫–ª–∏–µ–Ω—Ç–æ–≤?)?", user_text, re.I)
    
    if not update_match:
        await update.message.reply_text(
            "üìà <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ü–µ–ª–∏</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "‚Ä¢ '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ] [–µ–¥–∏–Ω–∏—Ü–∞]'\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã—Ä—É—á–∫–∞ 2.5 –º–ª–Ω\n"
            "‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏ 75 –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ 800 —à—Ç",
            parse_mode='HTML'
        )
        return
    
    goal_query = update_match.group(1).strip()
    new_value = float(update_match.group(2))
    unit = update_match.group(3) or ""
    
    try:
        # –ò—â–µ–º —Ü–µ–ª—å
        goals = goals_manager.search_goals(goal_query)
        
        if not goals:
            await update.message.reply_text(f"üîç –¶–µ–ª—å '{goal_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ü–µ–ª—å
        goal = goals[0]
        old_value = goal.current_value
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        success = goals_manager.update_goal_progress(goal.id, new_value, f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram")
        
        if success:
            change = new_value - old_value
            change_emoji = "üìà" if change > 0 else "üìâ" if change < 0 else "‚û°Ô∏è"
            
            await update.message.reply_text(
                f"‚úÖ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                f"üéØ –¶–µ–ª—å: {goal.name}\n"
                f"üìä –ë—ã–ª–æ: {old_value}\n"
                f"üìà –°—Ç–∞–ª–æ: {new_value}\n"
                f"{change_emoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change:+g}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ {goal.name}' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

async def handle_list_goals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ü–µ–ª–µ–π."""
    try:
        goals = goals_manager.get_active_goals()
        
        if not goals:
            await update.message.reply_text(
                "üìã <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ü–µ–ª—å:\n"
                "‚Ä¢ '–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å –≤—ã—Ä—É—á–∫–∞ 3 –º–ª–Ω –¥–æ —Å–µ–Ω—Ç—è–±—Ä—è'\n"
                "‚Ä¢ '–ù–æ–≤–∞—è —Ü–µ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏ 100 –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–æ –¥–µ–∫–∞–±—Ä—è'",
                parse_mode='HTML'
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ü–µ–ª–∏ –ø–æ —Ç–∏–ø—É
        goals_by_type = {}
        for goal in goals:
            goal_type = goal.goal_type.value
            if goal_type not in goals_by_type:
                goals_by_type[goal_type] = []
            goals_by_type[goal_type].append(goal)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏ ({len(goals)}):</b>\n\n"
        
        for goal_type, type_goals in goals_by_type.items():
            type_emoji = {
                'revenue': 'üí∞',
                'subscriptions': 'üë•',
                'production': 'üè≠',
                'custom': 'üéØ'
            }.get(goal_type, 'üìä')
            
            report += f"{type_emoji} <b>{goal_type.title()}:</b>\n"
            
            for goal in type_goals:
                progress_data = goals_manager.get_goal_progress(goal.id)
                progress_percent = progress_data['progress_percentage'] if progress_data else 0
                
                status_emoji = "üü¢" if progress_data and progress_data['is_on_track'] else "üî¥"
                
                report += f"  {status_emoji} {goal.name}: {goal.current_value}/{goal.target_value} ({progress_percent}%)\n"
            
            report += "\n"
        
        report += "üí° <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        report += "‚Ä¢ '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ [–Ω–∞–∑–≤–∞–Ω–∏–µ]' - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
        report += "‚Ä¢ '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–∑–Ω–∞—á–µ–Ω–∏–µ]' - –æ–±–Ω–æ–≤–∏—Ç—å\n"
        report += "‚Ä¢ '–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–∑–Ω–∞—á–µ–Ω–∏–µ] –¥–æ [–¥–∞—Ç–∞]' - –Ω–æ–≤–∞—è —Ü–µ–ª—å"
        
        await update.message.reply_text(report, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π: {e}")

# --- –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–∞–º—è—Ç—å ---
async def handle_what_decided(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    match = re.search(r"—á—Ç–æ —Ä–µ—à–∏–ª–∏ —Å (.+)", user_text, re.I)
    if not match:
        await update.message.reply_text("–£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: '–ß—Ç–æ —Ä–µ—à–∏–ª–∏ —Å [—Ç–µ–º–∞/–æ–±—ä–µ–∫—Ç]'")
        return
    topic = match.group(1).strip()
    # –ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    messages = chat_memory.search(topic, limit=10)
    # –ü–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞—á–∞–º
    from core.planner import get_tasks
    tasks = [t for t in get_tasks() if topic.lower() in t['description'].lower()]
    # –ü–æ–∏—Å–∫ –ø–æ RAG (–¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø—Ä–æ—Ç–æ–∫–æ–ª—ã)
    from core.rag_system import rag_system
    rag_results = rag_system.search_documents(topic, n_results=3)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    reply = f"üß† <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: {topic}</b>\n\n"
    if messages:
        reply += "üí¨ <b>–§—Ä–∞–≥–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–ø–∏—Å–∫–∏:</b>\n"
        for m in messages:
            reply += f"‚Äî {m['username']}: {m['text']}\n"
        reply += "\n"
    if tasks:
        reply += "üìã <b>–ó–∞–¥–∞—á–∏:</b>\n"
        for t in tasks:
            reply += f"‚Äî {t['description']} ({'‚úÖ' if t.get('completed') else '‚è≥'})\n"
        reply += "\n"
    if rag_results:
        reply += "üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã/–ø—Ä–æ—Ç–æ–∫–æ–ª—ã:</b>\n"
        for doc in rag_results:
            meta = doc.get('metadata', {})
            reply += f"‚Äî {meta.get('type', '–î–æ–∫—É–º–µ–Ω—Ç')}: {meta.get('title', '')} (ID: {doc['id']})\n"
        reply += "\n"
    if not (messages or tasks or rag_results):
        reply += "‚ùì –ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏–ª–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –ø–æ —Ç–µ–º–µ."
    await update.message.reply_text(reply, parse_mode='HTML')

async def handle_who_discussed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    match = re.search(r"—Å –∫–µ–º –æ–±—Å—É–∂–¥–∞–ª–∏ (.+)", user_text, re.I)
    if not match:
        await update.message.reply_text("–£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: '–° –∫–µ–º –æ–±—Å—É–∂–¥–∞–ª–∏ [—Ç–µ–º–∞/–æ–±—ä–µ–∫—Ç]'")
        return
    topic = match.group(1).strip()
    # –ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    discussions = chat_memory.get_discussions_with(topic, limit=10)
    reply = f"üß† <b>–û–±—Å—É–∂–¥–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ: {topic}</b>\n\n"
    if discussions:
        for d in discussions:
            reply += f"üë§ <b>{d['username']}</b> —É—á–∞—Å—Ç–≤–æ–≤–∞–ª(–∞):\n"
            for m in d['messages'][-3:]:
                reply += f"‚Äî {m['text']}\n"
            reply += "\n"
    else:
        reply += "‚ùì –ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π –ø–æ —Ç–µ–º–µ."
    await update.message.reply_text(reply, parse_mode='HTML')

# --- –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ ---
async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text(
            "üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...\n"
            "üîç –í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏..."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice = update.message.voice
        file = await context.bot.get_file(voice.file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        temp_path = f"/tmp/voice_{voice.file_id}.ogg"
        await file.download_to_drive(temp_path)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
        recognized_text = speech_recognizer.recognize_speech(temp_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(temp_path):
            os.remove(temp_path)
        
        if not recognized_text:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –ø–∞–º—è—Ç—å
        user_id = update.message.from_user.id
        username = update.message.from_user.username or update.message.from_user.full_name
        chat_memory.add_message(user_id=user_id, username=username, text=recognized_text, role="user")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        await processing_msg.edit_text(
            f"üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n{recognized_text}\n\n"
            f"üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É...",
            parse_mode='HTML'
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        class FakeMessage:
            def __init__(self, original_message, text):
                self.text = text
                self.from_user = original_message.from_user
                self.effective_chat = original_message.effective_chat
                self.reply_text = original_message.reply_text
        
        class FakeUpdate:
            def __init__(self, original_update, text):
                self.message = FakeMessage(original_update.message, text)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–±—ã—á–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        fake_update = FakeUpdate(update, recognized_text)
        await handle_message(fake_update, context)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# --- Email —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def handle_email_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_text = update.message.text.lower()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    provider = "gmail"
    if "—è–Ω–¥–µ–∫—Å" in user_text or "yandex" in user_text:
        provider = "yandex"
    
    await update.message.reply_text(f"üìß –ü–æ–ª—É—á–∞—é —Å–≤–æ–¥–∫—É –≤—Ö–æ–¥—è—â–∏—Ö –∏–∑ {provider}...")
    
    try:
        summary = email_analyzer.get_inbox_summary(provider)
        
        if "error" in summary:
            await update.message.reply_text(f"‚ùå {summary['error']}")
            return
        
        text = f"üìß <b>–°–≤–æ–¥–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö ({provider}):</b>\n\n"
        text += f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {summary['total_messages']}\n"
        text += f"üö® –°—Ä–æ—á–Ω—ã—Ö: {summary['urgent_count']}\n"
        text += f"‚≠ê –í–∞–∂–Ω—ã—Ö: {summary['high_priority_count']}\n"
        text += f"üí¨ –¢—Ä–µ–±—É—é—Ç –æ—Ç–≤–µ—Ç–∞: {summary['need_reply_count']}\n\n"
        
        if summary['urgent_messages']:
            text += "üö® <b>–°—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
            for msg in summary['urgent_messages']:
                text += f"‚Ä¢ {msg['subject']} (–æ—Ç {msg['sender']})\n"
            text += "\n"
        
        if summary['need_reply_messages']:
            text += "üí¨ <b>–¢—Ä–µ–±—É—é—Ç –æ—Ç–≤–µ—Ç–∞:</b>\n"
            for msg in summary['need_reply_messages']:
                text += f"‚Ä¢ {msg['subject']} (–æ—Ç {msg['sender']})\n"
            text += "\n"
        
        text += f"üìù <b>–ê–Ω–∞–ª–∏–∑:</b>\n{summary['summary']}"
        
        await update.message.reply_text(text, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")

async def handle_email_lens(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ª–∏–Ω–∑–∞–º."""
    user_text = update.message.text.lower()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–Ω–∑—É
    lens = None
    if "—Å—Ä–æ—á–Ω—ã–µ" in user_text or "urgent" in user_text:
        lens = "urgent"
    elif "–æ—Ç–≤–µ—Ç" in user_text or "reply" in user_text:
        lens = "need_reply"
    elif "–≤–∞–∂–Ω–æ–µ" in user_text or "important" in user_text:
        lens = "important"
    else:
        await update.message.reply_text(
            "üîç <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ –ª–∏–Ω–∑–∞–º</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ '–°—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' - —Å—Ä–æ—á–Ω—ã–µ –∏ –≤–∞–∂–Ω—ã–µ\n"
            "‚Ä¢ '–û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞' - —Ç—Ä–µ–±—É—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞\n"
            "‚Ä¢ '–í–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' - –≤—Å–µ –≤–∞–∂–Ω—ã–µ\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ü–æ–∫–∞–∂–∏ —Å—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –ß—Ç–æ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞\n"
            "‚Ä¢ –í–∞–∂–Ω—ã–µ –≤—Ö–æ–¥—è—â–∏–µ",
            parse_mode='HTML'
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    provider = "gmail"
    if "—è–Ω–¥–µ–∫—Å" in user_text or "yandex" in user_text:
        provider = "yandex"
    
    await update.message.reply_text(f"üîç –ü–æ–ª—É—á–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ª–∏–Ω–∑–µ '{lens}' –∏–∑ {provider}...")
    
    try:
        messages = email_analyzer.get_messages_by_lens(lens, provider)
        
        if not messages:
            lens_names = {
                "urgent": "—Å—Ä–æ—á–Ω—ã—Ö",
                "need_reply": "–æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–∞",
                "important": "–≤–∞–∂–Ω—ã—Ö"
            }
            await update.message.reply_text(f"üìß –°–æ–æ–±—â–µ–Ω–∏–π {lens_names.get(lens, lens)} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_messages = messages[:10]
        
        lens_names = {
            "urgent": "–°—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            "need_reply": "–û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞",
            "important": "–í–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
        }
        
        text = f"üìß <b>{lens_names.get(lens, lens)} ({provider}):</b>\n\n"
        
        for i, msg in enumerate(display_messages, 1):
            text += f"üì® <b>{i}. {msg.subject}</b>\n"
            text += f"   –û—Ç: {msg.sender}\n"
            text += f"   –î–∞—Ç–∞: {msg.date.strftime('%d.%m %H:%M')}\n"
            text += f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {msg.priority.value}\n"
            if msg.is_reply_needed:
                text += f"   ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞\n"
            text += "\n"
        
        if len(messages) > 10:
            text += f"... –∏ –µ—â–µ {len(messages) - 10} —Å–æ–æ–±—â–µ–Ω–∏–π"
        
        await update.message.reply_text(text, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

async def handle_reply_template(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞."""
    user_text = update.message.text
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É –∏–ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è
    template_match = re.search(r"(—à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞|–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞|reply template)\s+(.+)", user_text, re.I)
    if not template_match:
        await update.message.reply_text(
            "üìù <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ '–®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ [—Ç–µ–º–∞]' - —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω\n"
            "‚Ä¢ '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ [—Ç–µ–º–∞]' - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—Ç–≤–µ—Ç\n"
            "‚Ä¢ 'Reply template [subject]' - –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã\n"
            "‚Ä¢ Reply template meeting request",
            parse_mode='HTML'
        )
        return
    
    query = template_match.group(2).strip()
    
    await update.message.reply_text(f"üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –¥–ª—è '{query}'...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞
        temp_message = EmailMessage(
            id="temp",
            subject=query,
            sender="Unknown",
            sender_email="unknown@example.com",
            date=datetime.now(),
            content=f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è: {query}",
            priority=EmailPriority.MEDIUM,
            status=EmailStatus.NEW,
            labels=[],
            thread_id="temp",
            is_reply_needed=True
        )
        
        template = email_analyzer.generate_reply_template(temp_message)
        
        text = f"üìù <b>–®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –¥–ª—è '{query}':</b>\n\n"
        text += template
        
        await update.message.reply_text(text, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")

async def handle_email_config(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ email –∞–∫–∫–∞—É–Ω—Ç–æ–≤."""
    user_text = update.message.text.lower()
    
    if "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞" in user_text or "config" in user_text:
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Email –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>\n\n"
            "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª email_config.json:\n\n"
            "1. <b>Gmail:</b>\n"
            "   - –í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é\n"
            "   - –°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
            "   - –£–∫–∞–∂–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n"
            "2. <b>–Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç–∞:</b>\n"
            "   - –í–∫–ª—é—á–∏—Ç–µ IMAP –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n"
            "   - –°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
            "   - –£–∫–∞–∂–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n"
            "–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ '–°–≤–æ–¥–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö' - –æ–±—â–∞—è —Å–≤–æ–¥–∫–∞\n"
            "‚Ä¢ '–°—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' - –ø–æ –ª–∏–Ω–∑–∞–º\n"
            "‚Ä¢ '–®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞' - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤",
            parse_mode='HTML'
        )
    else:
        await update.message.reply_text(
            "üìß <b>Email –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
            "‚Ä¢ '–°–≤–æ–¥–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö' - –æ–±—â–∞—è —Å–≤–æ–¥–∫–∞\n"
            "‚Ä¢ '–°—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' - —Å—Ä–æ—á–Ω—ã–µ –∏ –≤–∞–∂–Ω—ã–µ\n"
            "‚Ä¢ '–û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞' - —Ç—Ä–µ–±—É—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞\n"
            "‚Ä¢ '–í–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' - –≤—Å–µ –≤–∞–∂–Ω—ã–µ\n"
            "‚Ä¢ '–®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ [—Ç–µ–º–∞]' - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞\n"
            "‚Ä¢ '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ email' - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è Gmail –∏ –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç–∞",
            parse_mode='HTML'
        )

# --- –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å–µ—Ç—å ---
async def handle_partners_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π —Å–µ—Ç–∏."""
    try:
        summary = partners_manager.get_partners_summary()
        
        text = "ü§ù <b>–°–≤–æ–¥–∫–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π —Å–µ—Ç–∏:</b>\n\n"
        text += f"üìä –í—Å–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤: {summary['total']}\n"
        text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {summary['active_partners']}\n"
        text += f"üìû –ù—É–∂–¥–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç–µ: {summary['needs_contact']}\n\n"
        
        text += "üìà <b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
        for status, count in summary['by_status'].items():
            status_names = {
                "prospect": "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ",
                "lead": "–õ–∏–¥—ã", 
                "active": "–ê–∫—Ç–∏–≤–Ω—ã–µ",
                "partner": "–ü–∞—Ä—Ç–Ω—ë—Ä—ã",
                "inactive": "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ"
            }
            text += f"   {status_names.get(status, status)}: {count}\n"
        
        text += "\nüì° <b>–ü–æ –∫–∞–Ω–∞–ª–∞–º:</b>\n"
        for channel, count in summary['by_channel'].items():
            text += f"   {channel}: {count}\n"
        
        text += "\nüéØ <b>–ü–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º:</b>\n"
        for segment, count in summary['by_segment'].items():
            text += f"   {segment}: {count}\n"
        
        await update.message.reply_text(text, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")

async def handle_add_partner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞."""
    user_text = update.message.text
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞
    pattern = r"–¥–æ–±–∞–≤—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞? ([^,]+), –∫–∞–Ω–∞–ª ([^,]+), –∫–æ–Ω—Ç–∞–∫—Ç—ã ([^,]+)(?:, —Å—Ç–∞—Ç—É—Å ([^,]+))?(?:, —Å–µ–≥–º–µ–Ω—Ç ([^,]+))?"
    match = re.search(pattern, user_text, re.I)
    
    if not match:
        await update.message.reply_text(
            "ü§ù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞</b>\n\n"
            "–§–æ—Ä–º–∞—Ç:\n"
            "‚Ä¢ '–î–æ–±–∞–≤—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞ [–∏–º—è], –∫–∞–Ω–∞–ª [–∫–∞–Ω–∞–ª], –∫–æ–Ω—Ç–∞–∫—Ç—ã [–∫–æ–Ω—Ç–∞–∫—Ç—ã]'\n"
            "‚Ä¢ '–î–æ–±–∞–≤—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞ [–∏–º—è], –∫–∞–Ω–∞–ª [–∫–∞–Ω–∞–ª], –∫–æ–Ω—Ç–∞–∫—Ç—ã [–∫–æ–Ω—Ç–∞–∫—Ç—ã], —Å—Ç–∞—Ç—É—Å [—Å—Ç–∞—Ç—É—Å]'\n"
            "‚Ä¢ '–î–æ–±–∞–≤—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞ [–∏–º—è], –∫–∞–Ω–∞–ª [–∫–∞–Ω–∞–ª], –∫–æ–Ω—Ç–∞–∫—Ç—ã [–∫–æ–Ω—Ç–∞–∫—Ç—ã], —Å—Ç–∞—Ç—É—Å [—Å—Ç–∞—Ç—É—Å], —Å–µ–≥–º–µ–Ω—Ç [—Å–µ–≥–º–µ–Ω—Ç]'\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –î–æ–±–∞–≤—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, –∫–∞–Ω–∞–ª telegram, –∫–æ–Ω—Ç–∞–∫—Ç—ã @ivan_petrov\n"
            "‚Ä¢ –î–æ–±–∞–≤—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –û–û–û –†–æ–≥–∞, –∫–∞–Ω–∞–ª email, –∫–æ–Ω—Ç–∞–∫—Ç—ã info@roga.ru, —Å—Ç–∞—Ç—É—Å prospect, —Å–µ–≥–º–µ–Ω—Ç startup",
            parse_mode='HTML'
        )
        return
    
    name = match.group(1).strip()
    channel = match.group(2).strip()
    contacts = match.group(3).strip()
    status = match.group(4).strip() if match.group(4) else "prospect"
    segment = match.group(5).strip() if match.group(5) else "general"
    
    try:
        success = partners_manager.add_partner(name, channel, contacts, status, segment)
        if success:
            await update.message.reply_text(f"‚úÖ –ü–∞—Ä—Ç–Ω—ë—Ä {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def handle_partners_for_calling(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–∑–≤–æ–Ω–∞."""
    user_text = update.message.text.lower()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    days = 7
    if "–Ω–µ–¥–µ–ª—è" in user_text:
        days = 7
    elif "–º–µ—Å—è—Ü" in user_text:
        days = 30
    elif "–¥–µ–Ω—å" in user_text:
        days = 1
    
    try:
        partners = partners_manager.get_partners_for_calling(days)
        
        if not partners:
            await update.message.reply_text(f"üìû –ù–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–∑–≤–æ–Ω–∞ (–Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ {days} –¥–Ω–µ–π)")
            return
        
        text = f"üìû <b>–ü–∞—Ä—Ç–Ω—ë—Ä—ã –¥–ª—è –ø—Ä–æ–∑–≤–æ–Ω–∞ (–Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ {days} –¥–Ω–µ–π):</b>\n\n"
        
        for i, partner in enumerate(partners[:10], 1):
            text += f"{i}. <b>{partner['name']}</b>\n"
            text += f"   –ö–∞–Ω–∞–ª: {partner['channel']}\n"
            text += f"   –ö–æ–Ω—Ç–∞–∫—Ç—ã: {partner['contacts']}\n"
            text += f"   –°–µ–≥–º–µ–Ω—Ç: {partner.get('segment', 'general')}\n"
            text += f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: {partner.get('last_contact', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        
        if len(partners) > 10:
            text += f"... –∏ –µ—â–µ {len(partners) - 10} –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤"
        
        await update.message.reply_text(text, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")

async def handle_partners_for_emailing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user_text = update.message.text.lower()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç
    segment = None
    if "—Å—Ç–∞—Ä—Ç–∞–ø" in user_text:
        segment = "startup"
    elif "enterprise" in user_text or "–∫—Ä—É–ø–Ω—ã–µ" in user_text:
        segment = "enterprise"
    elif "–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ" in user_text:
        segment = "agency"
    elif "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫" in user_text:
        segment = "developer"
    
    try:
        partners = partners_manager.get_partners_for_emailing(segment)
        
        if not partners:
            segment_text = f" —Å–µ–≥–º–µ–Ω—Ç–∞ {segment}" if segment else ""
            await update.message.reply_text(f"üìß –ù–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è email —Ä–∞—Å—Å—ã–ª–∫–∏{segment_text}")
            return
        
        text = f"üìß <b>–ü–∞—Ä—Ç–Ω—ë—Ä—ã –¥–ª—è email —Ä–∞—Å—Å—ã–ª–∫–∏"
        if segment:
            text += f" (—Å–µ–≥–º–µ–Ω—Ç: {segment})"
        text += f":</b>\n\n"
        
        for i, partner in enumerate(partners[:10], 1):
            text += f"{i}. <b>{partner['name']}</b>\n"
            text += f"   –ö–æ–Ω—Ç–∞–∫—Ç—ã: {partner['contacts']}\n"
            text += f"   –°—Ç–∞—Ç—É—Å: {partner['status']}\n"
            text += f"   –°–µ–≥–º–µ–Ω—Ç: {partner.get('segment', 'general')}\n\n"
        
        if len(partners) > 10:
            text += f"... –∏ –µ—â–µ {len(partners) - 10} –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤"
        
        await update.message.reply_text(text, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")

async def handle_generate_proposal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞."""
    user_text = update.message.text
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    pattern = r"(–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ|proposal) (?:–¥–ª—è|–∫) ([^,]+)(?:, —Å–µ–≥–º–µ–Ω—Ç ([^,]+))?"
    match = re.search(pattern, user_text, re.I)
    
    if not match:
        await update.message.reply_text(
            "üìù <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>\n\n"
            "–§–æ—Ä–º–∞—Ç:\n"
            "‚Ä¢ '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è [–∏–º—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞]'\n"
            "‚Ä¢ '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è [–∏–º—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞], —Å–µ–≥–º–µ–Ω—Ç [—Å–µ–≥–º–µ–Ω—Ç]'\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n"
            "‚Ä¢ Proposal –¥–ª—è –û–û–û –†–æ–≥–∞, —Å–µ–≥–º–µ–Ω—Ç startup",
            parse_mode='HTML'
        )
        return
    
    partner_name = match.group(2).strip()
    segment = match.group(3).strip() if match.group(3) else None
    
    try:
        # –ò—â–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞
        partners = partners_manager.get_all_partners()
        partner = None
        for p in partners:
            if p['name'].lower() == partner_name.lower():
                partner = p
                break
        
        if not partner:
            await update.message.reply_text(f"‚ùå –ü–∞—Ä—Ç–Ω—ë—Ä '{partner_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            return
        
        await update.message.reply_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ...")
        
        proposal = partners_manager.generate_proposal(partner, segment)
        
        text = f"üìù <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è {partner['name']}:</b>\n\n"
        text += proposal
        
        await update.message.reply_text(text, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")

async def handle_bulk_proposals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤."""
    user_text = update.message.text.lower()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç
    segment = None
    if "—Å—Ç–∞—Ä—Ç–∞–ø" in user_text:
        segment = "startup"
    elif "enterprise" in user_text or "–∫—Ä—É–ø–Ω—ã–µ" in user_text:
        segment = "enterprise"
    elif "–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ" in user_text:
        segment = "agency"
    elif "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫" in user_text:
        segment = "developer"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç
    limit = 5
    if "10" in user_text:
        limit = 10
    elif "3" in user_text:
        limit = 3
    
    try:
        await update.message.reply_text(f"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {limit} –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤...")
        
        proposals = partners_manager.generate_bulk_proposals(segment, limit)
        
        if not proposals:
            segment_text = f" —Å–µ–≥–º–µ–Ω—Ç–∞ {segment}" if segment else ""
            await update.message.reply_text(f"‚ùå –ù–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π{segment_text}")
            return
        
        text = f"üìù <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤"
        if segment:
            text += f" (—Å–µ–≥–º–µ–Ω—Ç: {segment})"
        text += f":</b>\n\n"
        
        for i, item in enumerate(proposals, 1):
            partner = item['partner']
            proposal = item['proposal']
            
            text += f"<b>{i}. {partner['name']}</b>\n"
            text += f"–ö–∞–Ω–∞–ª: {partner['channel']}\n"
            text += f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {partner['contacts']}\n\n"
            text += f"<i>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</i>\n{proposal}\n"
            text += "‚îÄ" * 50 + "\n\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(text) > 4000:
            parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
            for i, part in enumerate(parts):
                await update.message.reply_text(f"{part} (—á–∞—Å—Ç—å {i+1}/{len(parts)})", parse_mode='HTML')
        else:
            await update.message.reply_text(text, parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")