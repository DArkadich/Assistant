import os
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
import openai
from core import calendar, finances, planner
import re
import json
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
import pytz
import dateparser
import asyncio
import threading

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DEFAULT_MODEL = os.getenv("OPENAI_DEFAULT_MODEL", "gpt-3.5-turbo")
SMART_MODEL = os.getenv("OPENAI_SMART_MODEL", "gpt-4-1106-preview")

client = openai.OpenAI(api_key=OPENAI_API_KEY)

# –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä: –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT-4.1
SMART_KEYWORDS = [
    "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "–æ—Ç—á—ë—Ç", "KPI", "–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–ø–∏—Å—å–º–æ", "–ö–ü", "–æ—Ñ—Ñ–µ—Ä", "—Å–ª–æ–∂–Ω—ã–π", "–ø—Ä–æ–≥–Ω–æ–∑", "–¥–∏–∞–≥—Ä–∞–º–º–∞", "–≤—ã—Ä—É—á–∫–∞", "–∏–Ω–≤–µ—Å—Ç–æ—Ä"
]

# --- GPT intent parsing for tasks ---
TASK_PROMPT = (
    "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤–µ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
    "–ù–∞ –≤—Ö–æ–¥–µ ‚Äî —Ñ—Ä–∞–∑–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
    "–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏: intent (add/view/delete/move/done/summary), "
    "task_text, date (–ì–ì–ì–ì-–ú–ú-–î–î –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–∞, –∏–Ω–∞—á–µ null), time (–ß–ß:–ú–ú –∏–ª–∏ null), new_date (–µ—Å–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å), task_id (–µ—Å–ª–∏ –µ—Å—Ç—å). "
    "–ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ, –≤–µ—Ä–Ω–∏ null. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –¥–∞—Ç—É. "
    "–ü—Ä–∏–º–µ—Ä: {\"intent\": \"add\", \"task_text\": \"–í—Å—Ç—Ä–µ—á–∞ —Å –¢–∏–≥—Ä–æ–π\", \"date\": \"2024-06-10\", \"time\": \"15:00\"}"
)

# --- GPT intent parsing for finances ---
FIN_PROMPT = (
    "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á—ë—Ç. "
    "–ù–∞ –≤—Ö–æ–¥–µ ‚Äî —Ñ—Ä–∞–∑–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
    "–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏: intent (income/expense/report/unclassified), "
    "amount (—á–∏—Å–ª–æ), project (—Å—Ç—Ä–æ–∫–∞), description (—Å—Ç—Ä–æ–∫–∞), date (–ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ null), period (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ null), category (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ null). "
    "–ü—Ä–∏–º–µ—Ä—ã: "
    "{\"intent\": \"income\", \"amount\": 400000, \"project\": \"–í–ë\", \"description\": \"–ü–æ—Å—Ç—É–ø–∏–ª–∏ –æ—Ç –í–ë\", \"date\": \"2024-06-10\"}"
    "{\"intent\": \"expense\", \"amount\": 15000, \"project\": \"Horien\", \"description\": \"–ó–∞–∫—É–ø–∫–∞ –∫–æ—Ä–æ–±–æ–∫\", \"date\": \"2024-06-10\", \"category\": \"—É–ø–∞–∫–æ–≤–∫–∞\"}"
    "{\"intent\": \"report\", \"period\": \"–∏—é–Ω—å\", \"project\": \"Horien\"}"
    "{\"intent\": \"unclassified\"}"
)

def choose_model(user_text: str) -> str:
    for word in SMART_KEYWORDS:
        if word.lower() in user_text.lower():
            return SMART_MODEL
    return DEFAULT_MODEL

async def ask_openai(user_text: str, system_prompt: str = None) -> str:
    model = choose_model(user_text)
    messages = []
    if system_prompt:
        messages.append({"role": "system", "content": system_prompt})
    messages.append({"role": "user", "content": user_text})
    response = client.chat.completions.create(
        model=model,
        messages=messages,
        max_tokens=512,
        temperature=0.2
    )
    return response.choices[0].message.content.strip()

async def parse_task_intent(user_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ GPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –∏–Ω—Ç–µ–Ω—Ç–æ–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –∑–∞–¥–∞—á."""
    gpt_response = await ask_openai(user_text, system_prompt=TASK_PROMPT)
    try:
        data = json.loads(gpt_response)
        return data
    except Exception:
        return None

async def parse_finance_intent(user_text: str):
    gpt_response = await ask_openai(user_text, system_prompt=FIN_PROMPT)
    try:
        data = json.loads(gpt_response)
        return data
    except Exception:
        return None

async def send_daily_summary(update: Update):
    today = datetime.now().strftime("%Y-%m-%d")
    # –ó–∞–¥–∞—á–∏
    tasks = calendar.get_daily_plan(today)
    if tasks:
        tasks_text = "\n".join([f"- {t['task_text']} {t['time'] or ''} {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}" for t in tasks])
    else:
        tasks_text = "–ù–µ—Ç –∑–∞–¥–∞—á."
    # –¶–µ–ª–∏
    goals = planner.get_goals()
    if goals:
        goals_text = "\n".join([f"- {g['goal_text']} ‚Äî {g['progress']}% (–¥–æ {g['deadline']})" for g in goals])
    else:
        goals_text = "–ù–µ—Ç —Ü–µ–ª–µ–π."
    # –§–∏–Ω–∞–Ω—Å—ã (–∑–∞ —Å–µ–≥–æ–¥–Ω—è)
    report = finances.get_report(period=today)
    finance_text = f"–î–æ—Ö–æ–¥: {report['income']}, –†–∞—Å—Ö–æ–¥: {report['expense']}, –ü—Ä–∏–±—ã–ª—å: {report['profit']}"
    # --- –ß–∏—Å—Ç—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –æ–±—â–∏–π ---
    total_balance = finances.get_total_balance()
    finance_text += f"\n–ß–∏—Å—Ç—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {total_balance}"
    # --- –†–∞–∑–º–µ—Ç–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º ---
    project_reports = finances.get_report_by_project(period=today)
    if project_reports:
        finance_text += "\n\n<b>–ü–æ –ø—Ä–æ–µ–∫—Ç–∞–º:</b>"
        for project, rep in project_reports.items():
            balance = finances.get_total_balance(project=project)
            finance_text += f"\n- {project}: –î–æ—Ö–æ–¥ {rep['income']}, –†–∞—Å—Ö–æ–¥ {rep['expense']}, –ü—Ä–∏–±—ã–ª—å {rep['profit']}, –û—Å—Ç–∞—Ç–æ–∫ {balance}"
    # –ò—Ç–æ–≥
    summary = f"üóìÔ∏è –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{tasks_text}\n\nüéØ –¶–µ–ª–∏:\n{goals_text}\n\nüí∞ –§–∏–Ω–∞–Ω—Å—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{finance_text}"
    await update.message.reply_text(summary, parse_mode='HTML')

async def send_weekly_summary(update: Update):
    from core import calendar, planner, finances
    import pytz
    today = datetime.now(pytz.timezone('Europe/Moscow')).date()
    week_dates = [(today + timedelta(days=i)) for i in range(7)]
    week_strs = [d.strftime('%Y-%m-%d') for d in week_dates]
    week_days = [d.strftime('%A, %d %B').capitalize() for d in week_dates]

    # 1. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ)
    tasks_by_day = {d: [] for d in week_strs}
    for d in week_strs:
        day_tasks = [t for t in calendar.get_daily_plan(d) if not t.get('done')]
        tasks_by_day[d] = day_tasks

    # 2. –î–µ–¥–ª–∞–π–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª–µ (–ø–æ –∑–∞–¥–∞—á–∞–º –∏ —Ü–µ–ª—è–º)
    deadlines = []
    # –ó–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –Ω–∞ –Ω–µ–¥–µ–ª–µ
    for d in week_strs:
        for t in tasks_by_day[d]:
            if not t.get('from_google_calendar'):
                deadlines.append((d, t['task_text']))
    # –¶–µ–ª–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –Ω–∞ –Ω–µ–¥–µ–ª–µ
    for goal in planner.get_goals():
        deadline = goal.get('deadline')
        if deadline and deadline in week_strs:
            deadlines.append((deadline, f"–¶–µ–ª—å: {goal['goal_text']}"))

    # 3. –í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar
    events = []
    for d in week_strs:
        for t in tasks_by_day[d]:
            if t.get('from_google_calendar'):
                events.append((d, t['task_text'], t.get('time')))

    # 4. –¶–µ–ª–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    goals = planner.get_goals()
    goals_text = []
    for goal in goals:
        deadline = goal.get('deadline')
        progress = goal.get('progress', 0)
        days_left = (datetime.strptime(deadline, '%Y-%m-%d').date() - today).days if deadline else None
        tasks_left = 0
        if hasattr(planner, 'get_goal_tasks'):
            tasks_left = len([t for t in planner.get_goal_tasks(goal['goal_text']) if not t.get('done')])
        goals_text.append(f"- {goal['goal_text']} ‚Äî {progress}% (–¥–æ {deadline or '‚Äî'}, –æ—Å—Ç–∞–ª–æ—Å—å {days_left if days_left is not None else '?'} –¥–Ω., {tasks_left} –∑–∞–¥–∞—á)")
    if not goals_text:
        goals_text = ["–ù–µ—Ç —Ü–µ–ª–µ–π."]

    # 5. –§–∏–Ω–∞–Ω—Å—ã –∑–∞ –º–µ—Å—è—Ü
    period = today.strftime("%Y-%m")
    report = finances.get_report(period=period)
    finance_text = f"–î–æ—Ö–æ–¥: {report['income']}, –†–∞—Å—Ö–æ–¥: {report['expense']}, –ü—Ä–∏–±—ã–ª—å: {report['profit']}"
    # --- –ß–∏—Å—Ç—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –æ–±—â–∏–π ---
    total_balance = finances.get_total_balance()
    finance_text += f"\n–ß–∏—Å—Ç—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {total_balance}"
    # --- –†–∞–∑–º–µ—Ç–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º ---
    project_reports = finances.get_report_by_project(period=period)
    if project_reports:
        finance_text += "\n\n<b>–ü–æ –ø—Ä–æ–µ–∫—Ç–∞–º:</b>"
        for project, rep in project_reports.items():
            balance = finances.get_total_balance(project=project)
            finance_text += f"\n- {project}: –î–æ—Ö–æ–¥ {rep['income']}, –†–∞—Å—Ö–æ–¥ {rep['expense']}, –ü—Ä–∏–±—ã–ª—å {rep['profit']}, –û—Å—Ç–∞—Ç–æ–∫ {balance}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    summary = "üóìÔ∏è <b>–ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n"
    for i, d in enumerate(week_strs):
        day_header = f"<b>{week_days[i]}</b>"
        day_tasks = tasks_by_day[d]
        if day_tasks:
            summary += f"\n{day_header}:\n"
            for t in day_tasks:
                time = t.get('time')
                summary += f"- [{time or '--:--'}] {t['task_text']}\n"
    # –î–µ–¥–ª–∞–π–Ω—ã
    if deadlines:
        summary += "\n‚è∞ <b>–î–µ–¥–ª–∞–π–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª–µ:</b>\n"
        for d, text in deadlines:
            summary += f"- {d}: {text}\n"
    # –°–æ–±—ã—Ç–∏—è
    if events:
        summary += "\nüìÖ <b>–°–æ–±—ã—Ç–∏—è:</b>\n"
        for d, text, time in events:
            summary += f"- {d} {time or ''}: {text}\n"
    # –¶–µ–ª–∏
    summary += "\nüéØ <b>–¶–µ–ª–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n" + "\n".join(goals_text)
    # –§–∏–Ω–∞–Ω—Å—ã
    summary += f"\n\nüí∞ <b>–§–∏–Ω–∞–Ω—Å—ã –∑–∞ {today.strftime('%B')}:</b>\n{finance_text}"

    await update.message.reply_text(summary, parse_mode='HTML')

# --- –î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–≤–æ–¥–∫–∏ ---
last_chat_id_file = 'last_chat_id.txt'
def save_last_chat_id(chat_id):
    with open(last_chat_id_file, 'w') as f:
        f.write(str(chat_id))
def load_last_chat_id():
    if os.path.exists(last_chat_id_file):
        with open(last_chat_id_file, 'r') as f:
            return int(f.read().strip())
    return None

async def send_daily_summary_to_chat(app, chat_id):
    today = datetime.now().strftime("%Y-%m-%d")
    tasks = calendar.get_daily_plan(today)
    if tasks:
        tasks_text = "\n".join([f"- {t['task_text']} {t['time'] or ''} {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}" for t in tasks])
    else:
        tasks_text = "–ù–µ—Ç –∑–∞–¥–∞—á."
    goals = planner.get_goals()
    if goals:
        goals_text = "\n".join([f"- {g['goal_text']} ‚Äî {g['progress']}% (–¥–æ {g['deadline']})" for g in goals])
    else:
        goals_text = "–ù–µ—Ç —Ü–µ–ª–µ–π."
    report = finances.get_report(period=today)
    finance_text = f"–î–æ—Ö–æ–¥: {report['income']}, –†–∞—Å—Ö–æ–¥: {report['expense']}, –ü—Ä–∏–±—ã–ª—å: {report['profit']}"
    # --- –ß–∏—Å—Ç—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –æ–±—â–∏–π ---
    total_balance = finances.get_total_balance()
    finance_text += f"\n–ß–∏—Å—Ç—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {total_balance}"
    # --- –†–∞–∑–º–µ—Ç–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º ---
    project_reports = finances.get_report_by_project(period=today)
    if project_reports:
        finance_text += "\n\n<b>–ü–æ –ø—Ä–æ–µ–∫—Ç–∞–º:</b>"
        for project, rep in project_reports.items():
            balance = finances.get_total_balance(project=project)
            finance_text += f"\n- {project}: –î–æ—Ö–æ–¥ {rep['income']}, –†–∞—Å—Ö–æ–¥ {rep['expense']}, –ü—Ä–∏–±—ã–ª—å {rep['profit']}, –û—Å—Ç–∞—Ç–æ–∫ {balance}"
    summary = f"üóìÔ∏è –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{tasks_text}\n\nüéØ –¶–µ–ª–∏:\n{goals_text}\n\nüí∞ –§–∏–Ω–∞–Ω—Å—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{finance_text}"
    await app.bot.send_message(chat_id=chat_id, text=summary)

# --- Scheduler ---
def start_scheduler(app):
    scheduler = BackgroundScheduler(timezone=pytz.timezone('Europe/Moscow'))
    
    def job():
        chat_id = load_last_chat_id()
        if chat_id:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π event loop –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            try:
                loop = asyncio.get_event_loop()
            except RuntimeError:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
            try:
                if loop.is_running():
                    # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º task
                    asyncio.create_task(send_daily_summary_to_chat(app, chat_id))
                else:
                    # –ï—Å–ª–∏ loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                    loop.run_until_complete(send_daily_summary_to_chat(app, chat_id))
            except Exception as e:
                print(f"Error in scheduler job: {e}")
    
    scheduler.add_job(job, 'cron', hour=8, minute=0)
    scheduler.start()

def validate_task_date(date_str):
    if not date_str:
        return None
    try:
        dt = datetime.strptime(date_str, '%Y-%m-%d')
        today = datetime.now().date()
        if dt.date() < today:
            return None  # –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º, –≤–µ—Ä–æ—è—Ç–Ω–æ –æ—à–∏–±–∫–∞
        return date_str
    except Exception:
        return None

def extract_date_phrase(text):
    patterns = [
        r"–∑–∞–≤—Ç—Ä–∞ –≤ \d{1,2}(:\d{2})?",
        r"–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ \d{1,2}(:\d{2})?",
        r"–∑–∞–≤—Ç—Ä–∞[\w\s:]*",
        r"–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞[\w\s:]*",
        r"—Å–µ–≥–æ–¥–Ω—è[\w\s:]*",
        r"—á–µ—Ä–µ–∑ [^ ]+",
        r"–≤ \d{1,2}:\d{2}",
        r"–≤ \w+",  # –≤ –ø—è—Ç–Ω–∏—Ü—É
        r"–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ",
    ]
    for pat in patterns:
        m = re.search(pat, text, re.IGNORECASE)
        if m:
            return m.group(0)
    return text

def parse_natural_date(text):
    dt = dateparser.parse(text, languages=['ru'])
    if dt:
        return dt.strftime('%Y-%m-%d')
    return None

def smart_hour_from_phrase(phrase):
    # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ "—É—Ç—Ä–∞", "–Ω–æ—á–∏", "am" ‚Äî 03:00
    if re.search(r"(—É—Ç—Ä–∞|–Ω–æ—á–∏|am)", phrase, re.IGNORECASE):
        return "03:00"
    # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ "–¥–Ω—è", "–≤–µ—á–µ—Ä–∞", "pm" ‚Äî 15:00
    if re.search(r"(–¥–Ω—è|–≤–µ—á–µ—Ä–∞|pm)", phrase, re.IGNORECASE):
        return "15:00"
    # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ "–≤ 3" ‚Äî —Å—á–∏—Ç–∞–µ–º 15:00 (—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å)
    hour_match = re.search(r"–≤ (\d{1,2})(?!:)", phrase)
    if hour_match:
        hour = int(hour_match.group(1))
        if 1 <= hour <= 8:
            return f"{hour+12:02d}:00"  # 3 ‚Üí 15:00, 8 ‚Üí 20:00
        elif 9 <= hour <= 20:
            return f"{hour:02d}:00"
        else:
            return "15:00"
    return "09:00"

def parse_natural_date_and_time(text):
    phrase = extract_date_phrase(text)
    dt = dateparser.parse(phrase, languages=['ru'], settings={'PREFER_DATES_FROM': 'future'})
    if dt:
        date = dt.strftime('%Y-%m-%d')
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø—Ä–∏–º–µ–Ω—è–µ–º smart_hour_from_phrase
        if re.search(r'\d{1,2}:\d{2}', phrase):
            time = dt.strftime('%H:%M')
        else:
            time = smart_hour_from_phrase(phrase)
        print(f"[DEBUG] dateparser: text='{text}', phrase='{phrase}', parsed_date='{date}', parsed_time='{time}'")
        return date, time
    print(f"[DEBUG] dateparser: text='{text}', phrase='{phrase}', parsed_date=None, parsed_time=None")
    return None, None

# --- –ü—É–ª–ª–∏–Ω–≥ Google Calendar ---
last_polled_events = {}

def start_calendar_polling(app):
    def poll():
        while True:
            now = datetime.now(pytz.timezone('Europe/Moscow'))
            if 9 <= now.hour < 20:
                interval = 300  # 5 –º–∏–Ω—É—Ç
            else:
                interval = 3600  # 60 –º–∏–Ω—É—Ç
            try:
                chat_id = load_last_chat_id()
                if chat_id:
                    check_calendar_changes_and_notify(app, chat_id)
            except Exception as e:
                print(f"[Calendar Polling] Error: {e}")
            finally:
                import time
                time.sleep(interval)
    t = threading.Thread(target=poll, daemon=True)
    t.start()

def check_calendar_changes_and_notify(app, chat_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    from core.calendar import get_google_calendar_events
    global last_polled_events
    today = datetime.now().strftime('%Y-%m-%d')
    events = get_google_calendar_events(today)
    event_map = {e['id']: (e['summary'], e['start'].get('dateTime', e['start'].get('date'))) for e in events}
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    if last_polled_events:
        # –ù–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
        new_events = [e for eid, e in event_map.items() if eid not in last_polled_events]
        # –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        changed_events = [eid for eid in event_map if eid in last_polled_events and event_map[eid] != last_polled_events[eid]]
        # –£–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        deleted_events = [eid for eid in last_polled_events if eid not in event_map]
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try:
            loop = asyncio.get_event_loop()
            if new_events:
                for summary, start in new_events:
                    asyncio.run_coroutine_threadsafe(
                        app.bot.send_message(chat_id=chat_id, text=f"[–ö–∞–ª–µ–Ω–¥–∞—Ä—å] –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {summary} ({start})"),
                        loop
                    )
            if changed_events:
                for eid in changed_events:
                    summary, start = event_map[eid]
                    asyncio.run_coroutine_threadsafe(
                        app.bot.send_message(chat_id=chat_id, text=f"[–ö–∞–ª–µ–Ω–¥–∞—Ä—å] –ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {summary} ({start})"),
                        loop
                    )
            if deleted_events:
                for eid in deleted_events:
                    summary, start = last_polled_events[eid]
                    asyncio.run_coroutine_threadsafe(
                        app.bot.send_message(chat_id=chat_id, text=f"[–ö–∞–ª–µ–Ω–¥–∞—Ä—å] –£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {summary} ({start})"),
                        loop
                    )
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ—Ç event loop –≤ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç–æ–∫–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            print(f"[Calendar Polling] No event loop available for notifications")
    last_polled_events = event_map.copy()

# --- –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ handle_message ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_text}")
    save_last_chat_id(update.effective_chat.id)

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤ ---
    if context.user_data.get('awaiting_fin_date'):
        fin_intent = context.user_data.pop('awaiting_fin_date')
        import dateparser
        dt = dateparser.parse(user_text, languages=['ru'])
        if not dt:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≤—á–µ—Ä–∞', '25 –∏—é–Ω—è').")
            context.user_data['awaiting_fin_date'] = fin_intent
            return
        fin_intent['date'] = dt.strftime('%Y-%m-%d')
        if fin_intent['intent'] == 'income':
            op = finances.add_income(
                fin_intent.get("amount"),
                fin_intent.get("project"),
                description=fin_intent.get("description"),
                date=fin_intent.get("date")
            )
            await update.message.reply_text(f"–î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {op['amount']} ({op['project']}) ‚Äî {op['description']} ({op['date']})")
        elif fin_intent['intent'] == 'expense':
            op = finances.add_expense(
                fin_intent.get("amount"),
                fin_intent.get("project"),
                description=fin_intent.get("description"),
                date=fin_intent.get("date"),
                category=fin_intent.get("category")
            )
            await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {op['amount']} ({op['project']}) ‚Äî {op['description']} ({op['date']})")
        return

    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏ Google Calendar ---
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    m = re.match(r"—É–¥–∞–ª–∏ —Å–æ–±—ã—Ç–∏–µ ([^\n]+) (\d{4}-\d{2}-\d{2})", user_text, re.I)
    if m:
        title, date = m.group(1).strip(), m.group(2)
        event = calendar.find_google_calendar_event_by_title_and_date(title, date)
        if event:
            ok = calendar.delete_google_calendar_event(event['id'])
            if ok:
                await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{title}' –Ω–∞ {date} —É–¥–∞–ª–µ–Ω–æ –∏–∑ Google Calendar.")
            else:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è '{title}' –Ω–∞ {date}.")
        else:
            await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{title}' –Ω–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    m = re.match(r"–ø–µ—Ä–µ–∏–º–µ–Ω—É–π —Å–æ–±—ã—Ç–∏–µ ([^\n]+) (\d{4}-\d{2}-\d{2}) –≤ ([^\n]+)", user_text, re.I)
    if m:
        old_title, date, new_title = m.group(1).strip(), m.group(2), m.group(3).strip()
        event = calendar.find_google_calendar_event_by_title_and_date(old_title, date)
        if event:
            ok = calendar.update_google_calendar_event(event['id'], new_title=new_title)
            if ok:
                await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{old_title}' –Ω–∞ {date} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ '{new_title}'.")
            else:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è '{old_title}'.")
        else:
            await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{old_title}' –Ω–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    # –ü–µ—Ä–µ–Ω–æ—Å —Å–æ–±—ã—Ç–∏—è
    m = re.match(r"–ø–µ—Ä–µ–Ω–µ—Å–∏ —Å–æ–±—ã—Ç–∏–µ ([^\n]+) (\d{4}-\d{2}-\d{2}) –Ω–∞ (\d{2}:\d{2})", user_text, re.I)
    if m:
        title, date, new_time = m.group(1).strip(), m.group(2), m.group(3)
        event = calendar.find_google_calendar_event_by_title_and_date(title, date)
        if event:
            ok = calendar.update_google_calendar_event(event['id'], new_time=new_time)
            if ok:
                await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{title}' –Ω–∞ {date} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ {new_time}.")
            else:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Å–æ–±—ã—Ç–∏—è '{title}'.")
        else:
            await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{title}' –Ω–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    # –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π/–≤—Å—Ç—Ä–µ—á/–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π/–∏–≤–µ–Ω—Ç–æ–≤ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
    m = re.match(r"—É–¥–∞–ª–∏ –≤—Å–µ (—Å–æ–±—ã—Ç–∏—è|–≤—Å—Ç—Ä–µ—á–∏|–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è|–∏–≤–µ–Ω—Ç—ã|event[—ãe]?|—Å–æ–±—ã—Ç–∏–µ) ?(–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è)? (–∑–∞|–Ω–∞) ([^\n]+)", user_text, re.I)
    if m:
        phrase = m.group(4).strip()
        date_list = calendar.get_date_range_from_phrase(phrase)
        if not date_list:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –ø–æ —Ñ—Ä–∞–∑–µ: '{phrase}'")
            return
        count = calendar.delete_all_google_calendar_events_in_range(date_list)
        await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ {count} —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar –∑–∞: {', '.join(date_list)}")
        return
    # --- –°–≤–æ–¥–∫–∞ –ø–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ñ—Ä–∞–∑–∞–º ---
    if re.search(r"(—á—Ç–æ —É –º–µ–Ω—è|–ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è|—É—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞|–¥–∞–π —Å–≤–æ–¥–∫—É|—Å–µ–≥–æ–¥–Ω—è)", user_text, re.I):
        await send_daily_summary(update)
        return
    if re.search(r"(–ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª—è|–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞)", user_text, re.I):
        await send_weekly_summary(update)
        return
    # --- –í–≠–î-–æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã ---
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    if re.search(r"–¥–æ–±–∞–≤—å –ø–ª–∞—Ç—ë–∂.*—Ä—É–±–ª", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {user_text}")
        m = re.match(r"–¥–æ–±–∞–≤—å –ø–ª–∞—Ç—ë–∂ (\d+) —Ä—É–±–ª–µ–π? ([^\n]+) (–≤—Ö–æ–¥—è—â–∏–π|–∏—Å—Ö–æ–¥—è—â–∏–π) (–≤ –†–æ—Å—Å–∏—é|–∑–∞ –≥—Ä–∞–Ω–∏—Ü—É) –ø—Ä–æ–µ–∫—Ç ([^\n]+) –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç ([^\n]+) –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ ([^\n]+)", user_text, re.I)
        if m:
            amount = int(m.group(1))
            date_phrase = m.group(2).strip()
            direction = 'in' if m.group(3) == '–≤—Ö–æ–¥—è—â–∏–π' else 'out'
            country = 'RU' if m.group(4) == '–≤ –†–æ—Å—Å–∏—é' else 'INT'
            project = m.group(5).strip()
            counterparty = m.group(6).strip()
            purpose = m.group(7).strip()
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            import dateparser
            dt = dateparser.parse(date_phrase, languages=['ru'])
            if not dt:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≤—á–µ—Ä–∞').")
                return
            
            payment = finances.add_payment(
                amount=amount,
                date=dt.strftime('%Y-%m-%d'),
                direction=direction,
                country=country,
                project=project,
                counterparty=counterparty,
                purpose=purpose
            )
            await update.message.reply_text(f"–ü–ª–∞—Ç—ë–∂ –¥–æ–±–∞–≤–ª–µ–Ω: {amount} —Ä—É–±. ({direction}, {country}, {project}) ‚Äî {counterparty} ({purpose})")
            return
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–î–æ–±–∞–≤—å –ø–ª–∞—Ç—ë–∂ <—Å—É–º–º–∞> —Ä—É–±–ª–µ–π <–¥–∞—Ç–∞> <–≤—Ö–æ–¥—è—â–∏–π/–∏—Å—Ö–æ–¥—è—â–∏–π> <–≤ –†–æ—Å—Å–∏—é/–∑–∞ –≥—Ä–∞–Ω–∏—Ü—É> –ø—Ä–æ–µ–∫—Ç <–Ω–∞–∑–≤–∞–Ω–∏–µ> –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç <–Ω–∞–∑–≤–∞–Ω–∏–µ> –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ <–æ–ø–∏—Å–∞–Ω–∏–µ>'")
            return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏
    if re.search(r"–¥–æ–±–∞–≤—å –∑–∞–∫—É–ø–∫—É", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—É–ø–∫–∏: {user_text}")
        m = re.match(r"–¥–æ–±–∞–≤—å –∑–∞–∫—É–ø–∫—É ([^\n]+) (\d+) —Ä—É–±–ª–µ–π? ([^\n]+)", user_text, re.I)
        if m:
            name = m.group(1).strip()
            amount = int(m.group(2))
            date_phrase = m.group(3).strip()
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            import dateparser
            dt = dateparser.parse(date_phrase, languages=['ru'])
            if not dt:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.")
                return
            
            purchase = finances.add_purchase(
                name=name,
                amount=amount,
                date=dt.strftime('%Y-%m-%d')
            )
            await update.message.reply_text(f"–ó–∞–∫—É–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {name} ‚Äî {amount} —Ä—É–±. ({purchase['date']})")
            return
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–î–æ–±–∞–≤—å –∑–∞–∫—É–ø–∫—É <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Å—É–º–º–∞> —Ä—É–±–ª–µ–π <–¥–∞—Ç–∞>'")
            return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if re.search(r"–¥–æ–±–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç.*(–Ω–∞–∫–ª–∞–¥–Ω–∞—è|—É–ø–¥|–≥—Ç–¥|—Å—á—ë—Ç|–∫–æ–Ω—Ç—Ä–∞–∫—Ç|–∞–∫—Ç)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {user_text}")
        m = re.match(r"–¥–æ–±–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–∞–∫–ª–∞–¥–Ω–∞—è|—É–ø–¥|–≥—Ç–¥|—Å—á—ë—Ç|–∫–æ–Ω—Ç—Ä–∞–∫—Ç|–∞–∫—Ç) –Ω–æ–º–µ—Ä ([^\n]+) –æ—Ç ([^\n]+) –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ ([a-f0-9-]+)", user_text, re.I)
        if m:
            doc_type = m.group(1)
            number = m.group(2).strip()
            date_phrase = m.group(3).strip()
            payment_id = m.group(4)
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            import dateparser
            dt = dateparser.parse(date_phrase, languages=['ru'])
            if not dt:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            payment = finances.find_payment_by_id(payment_id)
            if not payment:
                await update.message.reply_text(f"–ü–ª–∞—Ç—ë–∂ —Å ID {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            doc = finances.add_ved_document(
                doc_type=doc_type,
                number=number,
                date=dt.strftime('%Y-%m-%d'),
                payment_ids=[payment_id]
            )
            await update.message.reply_text(f"–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {doc_type} ‚Ññ{number} –æ—Ç {doc['date']} –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
            return
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–î–æ–±–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç <—Ç–∏–ø> –Ω–æ–º–µ—Ä <–Ω–æ–º–µ—Ä> –æ—Ç <–¥–∞—Ç–∞> –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ <ID>'")
            return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –ø–ª–∞—Ç–µ–∂–∏|–Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –ø–ª–∞—Ç–µ–∂–∏|–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {user_text}")
        unclosed = finances.get_unclosed_payments()
        if not unclosed:
            await update.message.reply_text("–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞–∫—Ä—ã—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.")
        else:
            text = "–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –ø–ª–∞—Ç–µ–∂–∏:\n"
            for payment in unclosed:
                required = finances.get_required_docs_for_payment(payment)
                docs = [finances.find_document_by_id(doc_id) for doc_id in payment['documents_ids']]
                doc_types = [d['type'] for d in docs if d]
                missing = [req for req in required if req not in doc_types and req != '–Ω–∞–∫–ª–∞–¥–Ω–∞—è/—É–ø–¥' or (req == '–Ω–∞–∫–ª–∞–¥–Ω–∞—è/—É–ø–¥' and not any(t in doc_types for t in ['–Ω–∞–∫–ª–∞–¥–Ω–∞—è', '—É–ø–¥']))]
                
                text += f"\nüí∞ {payment['amount']} —Ä—É–±. ({payment['project']}) ‚Äî {payment['counterparty']}\n"
                text += f"   –î–∞—Ç–∞: {payment['date']}, –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'–≤—Ö–æ–¥—è—â–∏–π' if payment['direction'] == 'in' else '–∏—Å—Ö–æ–¥—è—â–∏–π'}\n"
                text += f"   –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {', '.join(missing) if missing else '–≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –µ—Å—Ç—å'}\n"
            
            await update.message.reply_text(text)
        return
    # --- –§–∏–Ω–∞–Ω—Å—ã —á–µ—Ä–µ–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ ---
    fin_intent = await parse_finance_intent(user_text)
    if fin_intent:
        intent = fin_intent.get("intent")
        if intent in ("income", "expense"):
            import dateparser
            date_from_gpt = fin_intent.get("date")
            date_phrase = extract_date_phrase_for_finance(user_text)
            date_from_text = dateparser.parse(date_phrase, languages=['ru']) if date_phrase else None
            if date_from_text:
                date_from_text = date_from_text.strftime('%Y-%m-%d')
            print(f"[DEBUG] date_from_gpt: {date_from_gpt}, date_phrase: {date_phrase}, date_from_text: {date_from_text}", flush=True)
            # –ï—Å–ª–∏ dateparser —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –¥–∞—Ç—É ‚Äî –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if date_from_text:
                fin_intent['date'] = date_from_text
            # –ï—Å–ª–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ—Ç –¥–∞—Ç—ã ‚Äî —É—Ç–æ—á–Ω–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not fin_intent.get('date'):
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏. –£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–æ—Ö–æ–¥–∞/—Ä–∞—Å—Ö–æ–¥–∞.")
                context.user_data['awaiting_fin_date'] = fin_intent
                return
        if intent == "income":
            op = finances.add_income(
                fin_intent.get("amount"),
                fin_intent.get("project"),
                description=fin_intent.get("description"),
                date=fin_intent.get("date")
            )
            await update.message.reply_text(f"–î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {op['amount']} ({op['project']}) ‚Äî {op['description']} ({op['date']})")
            return
        elif intent == "expense":
            op = finances.add_expense(
                fin_intent.get("amount"),
                fin_intent.get("project"),
                description=fin_intent.get("description"),
                date=fin_intent.get("date"),
                category=fin_intent.get("category")
            )
            await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {op['amount']} ({op['project']}) ‚Äî {op['description']} ({op['date']})")
            return
        elif intent == "report":
            report = finances.get_report(
                period=fin_intent.get("period"),
                project=fin_intent.get("project")
            )
            await update.message.reply_text(
                f"–û—Ç—á—ë—Ç: –î–æ—Ö–æ–¥ {report['income']}, –†–∞—Å—Ö–æ–¥ {report['expense']}, –ü—Ä–∏–±—ã–ª—å {report['profit']}"
            )
            return
        elif intent == "unclassified":
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —è–≤–Ω–æ –µ—Å—Ç—å —Å–ª–æ–≤–∞ –ø—Ä–æ —Ç—Ä–∞—Ç—ã/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if "–∫–∞—Ç–µ–≥–æ—Ä" in user_text.lower() or "—Ç—Ä–∞—Ç—ã" in user_text.lower():
                unclassified = finances.get_unclassified_expenses()
                if not unclassified:
                    await update.message.reply_text("–ù–µ—Ç —Ç—Ä–∞—Ç –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
                else:
                    text = "\n".join([f"{op['amount']} ({op['project']}) ‚Äî {op['description']} ({op['date']})" for op in unclassified])
                    await update.message.reply_text(f"–¢—Ä–∞—Ç—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{text}")
                return
    # --- –¶–µ–ª–∏ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
    if re.match(r"—É—Å—Ç–∞–Ω–æ–≤–∏ —Ü–µ–ª—å|–¥–æ–±–∞–≤—å —Ü–µ–ª—å", user_text, re.I):
        # –ü—Ä–∏–º–µ—Ä: "–£—Å—Ç–∞–Ω–æ–≤–∏ —Ü–µ–ª—å 3 –º–ª–Ω –≤—ã—Ä—É—á–∫–∏ –¥–æ —Å–µ–Ω—Ç—è–±—Ä—è"
        match = re.search(r"—Ü–µ–ª—å (.+?)( –¥–æ ([^\n]+))?$", user_text, re.I)
        if match:
            goal_text = match.group(1).strip()
            deadline = match.group(3).strip() if match.group(3) else None
            goal = planner.set_goal(goal_text, deadline)
            await update.message.reply_text(f"–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {goal['goal_text']} (–¥–æ {goal['deadline']})")
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–£—Å—Ç–∞–Ω–æ–≤–∏ —Ü–µ–ª—å <—Ç–µ–∫—Å—Ç> –¥–æ <–¥–∞—Ç–∞/—Å—Ä–æ–∫>'")
        return
    elif re.match(r"–∫–∞–∫–∏–µ —Ü–µ–ª–∏|–ø–æ–∫–∞–∂–∏ —Ü–µ–ª–∏|—Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π", user_text, re.I):
        goals = planner.get_goals()
        if not goals:
            await update.message.reply_text("–¶–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = "\n".join([f"- {g['goal_text']} (–¥–æ {g['deadline']})" for g in goals])
            await update.message.reply_text(f"–¢–µ–∫—É—â–∏–µ —Ü–µ–ª–∏:\n{text}")
    elif re.match(r"–ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏", user_text, re.I):
        # –ü—Ä–∏–º–µ—Ä: "–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ 3 –º–ª–Ω –≤—ã—Ä—É—á–∫–∏"
        match = re.search(r"–ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ (.+)$", user_text, re.I)
        if match:
            goal_text = match.group(1).strip()
            progress = planner.get_goal_progress(goal_text)
            if progress:
                await update.message.reply_text(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ '{progress['goal_text']}': {progress['progress']}% (–¥–æ {progress['deadline']})")
            else:
                await update.message.reply_text("–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ <—Ç–µ–∫—Å—Ç —Ü–µ–ª–∏>'")
    elif re.match(r"–æ–±–Ω–æ–≤–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏", user_text, re.I):
        # –ü—Ä–∏–º–µ—Ä: "–û–±–Ω–æ–≤–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ 3 –º–ª–Ω –≤—ã—Ä—É—á–∫–∏: 40%"
        match = re.search(r"–æ–±–Ω–æ–≤–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ (.+?):\s*(\d+)%?", user_text, re.I)
        if match:
            goal_text = match.group(1).strip()
            progress = int(match.group(2))
            updated = planner.update_goal_progress(goal_text, progress)
            if updated:
                await update.message.reply_text(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ '{goal_text}' –æ–±–Ω–æ–≤–ª—ë–Ω: {progress}%")
            else:
                await update.message.reply_text("–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–û–±–Ω–æ–≤–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ <—Ç–µ–∫—Å—Ç>: <—á–∏—Å–ª–æ>%'")
    elif re.match(r"–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –∫ —Ü–µ–ª–∏", user_text, re.I):
        # –ü—Ä–∏–º–µ—Ä: "–î–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –∫ —Ü–µ–ª–∏ 3 –º–ª–Ω –≤—ã—Ä—É—á–∫–∏: –ü–æ–∑–≤–æ–Ω–∏—Ç—å 10 –∫–ª–∏–µ–Ω—Ç–∞–º"
        match = re.search(r"–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –∫ —Ü–µ–ª–∏ (.+?):\s*(.+)$", user_text, re.I)
        if match:
            goal_text = match.group(1).strip()
            task_text = match.group(2).strip()
            task = planner.add_goal_task(goal_text, task_text)
            await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Ü–µ–ª–∏ '{goal_text}': {task['task_text']}")
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–î–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –∫ —Ü–µ–ª–∏ <—Ü–µ–ª—å>: <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏>'")
    elif re.match(r"–æ—Ç–º–µ—Ç—å –∑–∞–¥–∞—á—É –ø–æ —Ü–µ–ª–∏.*–∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é", user_text, re.I):
        # –ü—Ä–∏–º–µ—Ä: "–û—Ç–º–µ—Ç—å –∑–∞–¥–∞—á—É –ø–æ —Ü–µ–ª–∏ 3 –º–ª–Ω –≤—ã—Ä—É—á–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é: –ü–æ–∑–≤–æ–Ω–∏—Ç—å 10 –∫–ª–∏–µ–Ω—Ç–∞–º"
        match = re.search(r"–æ—Ç–º–µ—Ç—å –∑–∞–¥–∞—á—É –ø–æ —Ü–µ–ª–∏ (.+?) –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é: (.+)$", user_text, re.I)
        if match:
            goal_text = match.group(1).strip()
            task_text = match.group(2).strip()
            task = planner.mark_goal_task_done(goal_text, task_text)
            if task:
                await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ '{task_text}' –ø–æ —Ü–µ–ª–∏ '{goal_text}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
            else:
                await update.message.reply_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–û—Ç–º–µ—Ç—å –∑–∞–¥–∞—á—É –ø–æ —Ü–µ–ª–∏ <—Ü–µ–ª—å> –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é: <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏>'")
    elif re.match(r"–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ü–µ–ª–∏", user_text, re.I):
        # –ü—Ä–∏–º–µ—Ä: "–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ü–µ–ª–∏ 3 –º–ª–Ω –≤—ã—Ä—É—á–∫–∏"
        match = re.search(r"–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ü–µ–ª–∏ (.+)$", user_text, re.I)
        if match:
            goal_text = match.group(1).strip()
            tasks = planner.get_goal_tasks(goal_text)
            if not tasks:
                await update.message.reply_text("–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ —ç—Ç–æ–π —Ü–µ–ª–∏ –Ω–µ—Ç.")
            else:
                text = "\n".join([f"- {t['task_text']} ({t['date'] if t['date'] else '–±–µ–∑ –¥–∞—Ç—ã'}) {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}" for t in tasks])
                await update.message.reply_text(f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ü–µ–ª–∏ '{goal_text}':\n{text}")
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ü–µ–ª–∏ <—Ç–µ–∫—Å—Ç —Ü–µ–ª–∏>'")
    elif re.match(r"—Ä–∞–∑–±–µ–π —Ü–µ–ª—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", user_text, re.I):
        # –ü—Ä–∏–º–µ—Ä: "–†–∞–∑–±–µ–π —Ü–µ–ª—å 3 –º–ª–Ω –≤—ã—Ä—É—á–∫–∏ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: 3000000 —Å 2024-06-01 –ø–æ 2024-06-30 —Ä—É–±."
        match = re.search(r"—Ä–∞–∑–±–µ–π —Ü–µ–ª—å (.+?) –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: (\d+) —Å (\d{4}-\d{2}-\d{2}) –ø–æ (\d{4}-\d{2}-\d{2}) ?([\w.]+)?", user_text, re.I)
        if match:
            goal_text = match.group(1).strip()
            total_value = int(match.group(2))
            start_date = match.group(3)
            end_date = match.group(4)
            unit = match.group(5) if match.group(5) else "–µ–¥–∏–Ω–∏—Ü"
            tasks = planner.suggest_daily_tasks(goal_text, total_value, start_date, end_date, unit)
            await update.message.reply_text(f"–°–æ–∑–¥–∞–Ω–æ {len(tasks)} –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ —Ü–µ–ª–∏ '{goal_text}'.")
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–†–∞–∑–±–µ–π —Ü–µ–ª—å <—Ü–µ–ª—å> –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: <—á–∏—Å–ª–æ> —Å <–¥–∞—Ç–∞> –ø–æ <–¥–∞—Ç–∞> <–µ–¥–∏–Ω–∏—Ü—ã>'")
    # --- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –∑–∞–¥–∞—á ---
    task_intent = await parse_task_intent(user_text)
    if task_intent:
        intent = task_intent.get("intent")
        if intent == "add":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –∑–∞–¥–∞—á–∏
            date = validate_task_date(task_intent.get("date"))
            time = task_intent.get("time")
            if not date:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                date, parsed_time = parse_natural_date_and_time(user_text)
                if parsed_time:
                    time = parsed_time
            if not date and task_intent.get("date"):
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –±—ã–ª–∞, –Ω–æ –æ–Ω–∞ –≤ –ø—Ä–æ—à–ª–æ–º ‚Äî —Å–æ–æ–±—â–∞–µ–º –∏ —Å—Ç–∞–≤–∏–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                date = datetime.now().strftime('%Y-%m-%d')
                msg = "–î–∞—Ç–∞ –∑–∞–¥–∞—á–∏ –±—ã–ª–∞ –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –∑–∞–¥–∞—á–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
            elif not date:
                # Fallback: —Å–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —è–≤–Ω–æ
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –∑–∞–¥–∞—á–∏. –ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É?")
                return
            else:
                msg = None
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"[DEBUG] add_task: text={task_intent.get('task_text')}, date={date}, time={time}")
            task = calendar.add_task(
                task_intent.get("task_text"),
                date=date,
                time=time
            )
            reply = f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task['task_text']} ({task['date']} {task['time'] or ''})"
            if msg:
                reply = msg + "\n" + reply
            await update.message.reply_text(reply)
            return
        elif intent == "view":
            date = task_intent.get("date")
            if date:
                tasks = calendar.get_daily_plan(date)
                if not tasks:
                    await update.message.reply_text("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–¥–∞—á –Ω–µ—Ç.")
                else:
                    text = "\n".join([f"[{t['id']}] {t['task_text']} {t['time'] or ''} {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}" for t in tasks])
                    await update.message.reply_text(f"–ó–∞–¥–∞—á–∏ –Ω–∞ {date}:\n{text}")
            else:
                tasks = calendar.get_tasks()
                if not tasks:
                    await update.message.reply_text("–ó–∞–¥–∞—á –Ω–µ—Ç.")
                else:
                    text = "\n".join([f"[{t['id']}] {t['task_text']} {t['date']} {t['time'] or ''} {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}" for t in tasks])
                    await update.message.reply_text(f"–í—Å–µ –∑–∞–¥–∞—á–∏:\n{text}")
            return
        elif intent == "delete":
            task_id = task_intent.get("task_id")
            if task_id:
                calendar.delete_task(task_id)
                await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞.")
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        elif intent == "move":
            task_id = task_intent.get("task_id")
            new_date = task_intent.get("new_date")
            if task_id and new_date:
                calendar.move_task(task_id, new_date)
                await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ {task_id} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ {new_date}.")
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–ª–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É.")
            return
        elif intent == "done":
            task_id = task_intent.get("task_id")
            if task_id:
                calendar.mark_task_done(task_id)
                await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏.")
            return
        elif intent == "summary":
            today = datetime.now().strftime("%Y-%m-%d")
            tasks = calendar.get_daily_plan(today)
            if not tasks:
                await update.message.reply_text("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç.")
            else:
                text = "\n".join([f"[{t['id']}] {t['task_text']} {t['time'] or ''} {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}" for t in tasks])
                await update.message.reply_text(f"–ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{text}")
            return
    # –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞—á–∞ –∏ –Ω–µ —Ñ–∏–Ω–∞–Ω—Å—ã ‚Äî fallback –Ω–∞ GPT-–æ—Ç–≤–µ—Ç
    reply = await ask_openai(user_text)
    await update.message.reply_text(reply)

def extract_date_phrase_for_finance(text):
    import re
    patterns = [
        r"–≤—á–µ—Ä–∞", r"—Å–µ–≥–æ–¥–Ω—è", r"–∑–∞–≤—Ç—Ä–∞", r"–ø–æ–∑–∞–≤—á–µ—Ä–∞", r"–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞",
        r"\d{1,2} [–∞-—è]+", r"\d{1,2}\.\d{1,2}\.\d{2,4}", r"\d{4}-\d{2}-\d{2}",
        r"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥–∞|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü–∞|—Å—É–±–±–æ—Ç–∞|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    ]
    for pat in patterns:
        m = re.search(pat, text, re.IGNORECASE)
        if m:
            return m.group(0)
    return None

def run_bot():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    start_scheduler(app)
    start_calendar_polling(app)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling() 