import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters, CallbackQueryHandler
import openai
from core import calendar, finances, planner
import re
import json
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
import pytz
import dateparser
import asyncio
import threading
from core.calendar import *
from core.finances import *
from core.planner import *
from core.drive_manager import drive_manager
from core.image_processor import image_processor
from core.goals import goals_manager, GoalType, GoalPeriod
from core.memory import chat_memory
from core.speech_recognition import speech_recognizer
from core.email_analyzer import email_analyzer
from core.partners import partners_manager
from core.amocrm import amocrm
from core.obsidian_manager import obsidian_manager
from core.ai_critic import analyze_decision, format_critic_result
from email.message import EmailMessage
# from email.policy import EmailPriority, EmailStatus # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û, —Ç.–∫. –≤—ã–∑—ã–≤–∞–µ—Ç ImportError
import core.analytics
import core.team_manager
import core.payment_control
import core.inbox_monitor
import core.global_search
import core.digest
from core.ai_critic import analyze_decision, format_critic_result
import core.antistress
import core.meeting_prep
from core.focus import focus_manager
from core.work_mode import work_mode_manager
from core.notification_manager import notification_manager
from typing import Optional
from core.document_assistant import document_assistant
from core.speech_synthesizer import speech_synthesizer
from core.inbox_monitor import inbox_monitor
from core.deadline_monitor import deadline_monitor
from core.meeting_assistant import meeting_assistant
import tempfile

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DEFAULT_MODEL = os.getenv("OPENAI_DEFAULT_MODEL", "gpt-3.5-turbo")
SMART_MODEL = os.getenv("OPENAI_SMART_MODEL", "gpt-4-1106-preview")

client = openai.OpenAI(api_key=OPENAI_API_KEY)

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞ ---
STATE_FILE = 'bot_state.json'

def get_bot_state():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(STATE_FILE):
        return {}
    try:
        with open(STATE_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (IOError, json.JSONDecodeError):
        return {}

def save_bot_state(state):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª."""
    with open(STATE_FILE, 'w', encoding='utf-8') as f:
        json.dump(state, f, indent=4, ensure_ascii=False)

def set_quiet_mode(chat_id: int, enabled: bool):
    """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è —á–∞—Ç–∞."""
    state = get_bot_state()
    if 'quiet_mode' not in state:
        state['quiet_mode'] = {}
    state['quiet_mode'][str(chat_id)] = enabled
    save_bot_state(state)

def is_quiet_mode_enabled(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è —á–∞—Ç–∞."""
    state = get_bot_state()
    return state.get('quiet_mode', {}).get(str(chat_id), False)

# –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä: –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT-4.1
SMART_KEYWORDS = [
    "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "–æ—Ç—á—ë—Ç", "KPI", "–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–ø–∏—Å—å–º–æ", "–ö–ü", "–æ—Ñ—Ñ–µ—Ä", "—Å–ª–æ–∂–Ω—ã–π", "–ø—Ä–æ–≥–Ω–æ–∑", "–¥–∏–∞–≥—Ä–∞–º–º–∞", "–≤—ã—Ä—É—á–∫–∞", "–∏–Ω–≤–µ—Å—Ç–æ—Ä"
]

# --- GPT intent parsing for tasks ---
TASK_PROMPT = (
    "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤–µ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
    "–ù–∞ –≤—Ö–æ–¥–µ ‚Äî —Ñ—Ä–∞–∑–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
    "–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏: intent (add/view/delete/move/done/summary), "
    "task_text, date (–ì–ì–ì–ì-–ú–ú-–î–î –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–∞, –∏–Ω–∞—á–µ null), time (–ß–ß:–ú–ú –∏–ª–∏ null), new_date (–µ—Å–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å), task_id (–µ—Å–ª–∏ –µ—Å—Ç—å). "
    "–ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ, –≤–µ—Ä–Ω–∏ null. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –¥–∞—Ç—É. "
    "–ü—Ä–∏–º–µ—Ä: {\"intent\": \"add\", \"task_text\": \"–í—Å—Ç—Ä–µ—á–∞ —Å –¢–∏–≥—Ä–æ–π\", \"date\": \"2024-06-10\", \"time\": \"15:00\"}"
)

# --- GPT intent parsing for finances ---
FIN_PROMPT = (
    "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á—ë—Ç. "
    "–ù–∞ –≤—Ö–æ–¥–µ ‚Äî —Ñ—Ä–∞–∑–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
    "–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏: intent (income/expense/report/unclassified), "
    "amount (—á–∏—Å–ª–æ), project (—Å—Ç—Ä–æ–∫–∞), description (—Å—Ç—Ä–æ–∫–∞), date (–ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ null), period (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ null), category (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ null). "
    "–ü—Ä–∏–º–µ—Ä—ã: "
    "{\"intent\": \"income\", \"amount\": 400000, \"project\": \"–í–ë\", \"description\": \"–ü–æ—Å—Ç—É–ø–∏–ª–∏ –æ—Ç –í–ë\", \"date\": \"2024-06-10\"}"
    "{\"intent\": \"expense\", \"amount\": 15000, \"project\": \"Horien\", \"description\": \"–ó–∞–∫—É–ø–∫–∞ –∫–æ—Ä–æ–±–æ–∫\", \"date\": \"2024-06-10\", \"category\": \"—É–ø–∞–∫–æ–≤–∫–∞\"}"
    "{\"intent\": \"report\", \"period\": \"–∏—é–Ω—å\", \"project\": \"Horien\"}"
    "{\"intent\": \"unclassified\"}"
)

def choose_model(user_text: str) -> str:
    for word in SMART_KEYWORDS:
        if word.lower() in user_text.lower():
            return SMART_MODEL
    return DEFAULT_MODEL

async def ask_openai(user_text: str, system_prompt: str = None) -> str:
    model = choose_model(user_text)
    messages = []
    if system_prompt:
        messages.append({"role": "system", "content": system_prompt})
    messages.append({"role": "user", "content": user_text})
    response = client.chat.completions.create(
        model=model,
        messages=messages,
        max_tokens=512,
        temperature=0.2
    )
    return response.choices[0].message.content.strip()

async def parse_task_intent(user_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ GPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –∏–Ω—Ç–µ–Ω—Ç–æ–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –∑–∞–¥–∞—á."""
    gpt_response = await ask_openai(user_text, system_prompt=TASK_PROMPT)
    try:
        data = json.loads(gpt_response)
        return data
    except Exception:
        return None

async def parse_finance_intent(user_text: str):
    gpt_response = await ask_openai(user_text, system_prompt=FIN_PROMPT)
    try:
        data = json.loads(gpt_response)
        return data
    except Exception:
        return None

async def send_daily_summary(update: Update):
    today = datetime.now().strftime("%Y-%m-%d")
    
    # –§–æ–∫—É—Å –¥–Ω—è
    focus = focus_manager.get_daily_focus()
    focus_text = f"<b>{focus}</b>" if focus else "–ù–µ –∑–∞–¥–∞–Ω"
    
    # –ó–∞–¥–∞—á–∏
    tasks = calendar.get_daily_plan(today)
    if tasks:
        # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Ñ–æ–∫—É—Å–Ω—ã–µ –∏ –Ω–µ—Ñ–æ–∫—É—Å–Ω—ã–µ
        focus_tasks = []
        other_tasks = []
        for t in tasks:
            if focus_manager.is_task_in_focus(t['task_text']):
                focus_tasks.append(t)
            else:
                other_tasks.append(t)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
        if focus_tasks:
            tasks_text = "üéØ –í —Ñ–æ–∫—É—Å–µ:\n" + "\n".join([
                f"- {t['task_text']} {t['time'] or ''} {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}"
                for t in focus_tasks
            ])
            if other_tasks:
                tasks_text += "\n\n‚ö™Ô∏è –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n" + "\n".join([
                    f"- {t['task_text']} {t['time'] or ''} {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}"
                    for t in other_tasks
                ])
        else:
            tasks_text = "\n".join([
                f"- {t['task_text']} {t['time'] or ''} {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}"
                for t in tasks
            ])
    else:
        tasks_text = "–ù–µ—Ç –∑–∞–¥–∞—á."
    
    # –¶–µ–ª–∏
    goals = planner.get_goals()
    if goals:
        goals_text = "\n".join([f"- {g['goal_text']} ‚Äî {g['progress']}% (–¥–æ {g['deadline']})" for g in goals])
    else:
        goals_text = "–ù–µ—Ç —Ü–µ–ª–µ–π."
    
    # –§–∏–Ω–∞–Ω—Å—ã (–∑–∞ —Å–µ–≥–æ–¥–Ω—è)
    report = finances.get_report(period=today)
    finance_text = f"–î–æ—Ö–æ–¥: {report['income']}, –†–∞—Å—Ö–æ–¥: {report['expense']}, –ü—Ä–∏–±—ã–ª—å: {report['profit']}"
    # --- –ß–∏—Å—Ç—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –æ–±—â–∏–π ---
    total_balance = finances.get_total_balance()
    finance_text += f"\n–ß–∏—Å—Ç—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {total_balance}"
    # --- –†–∞–∑–º–µ—Ç–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º ---
    project_reports = finances.get_report_by_project(period=today)
    if project_reports:
        finance_text += "\n\n<b>–ü–æ –ø—Ä–æ–µ–∫—Ç–∞–º:</b>"
        for project, rep in project_reports.items():
            balance = finances.get_total_balance(project=project)
            finance_text += f"\n- {project}: –î–æ—Ö–æ–¥ {rep['income']}, –†–∞—Å—Ö–æ–¥ {rep['expense']}, –ü—Ä–∏–±—ã–ª—å {rep['profit']}, –û—Å—Ç–∞—Ç–æ–∫ {balance}"
    
    # –ò—Ç–æ–≥
    summary = f"üéØ –§–æ–∫—É—Å –¥–Ω—è: {focus_text}\n\nüóìÔ∏è –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{tasks_text}\n\nüéØ –¶–µ–ª–∏:\n{goals_text}\n\nüí∞ –§–∏–Ω–∞–Ω—Å—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{finance_text}"
    await update.message.reply_text(summary, parse_mode='HTML')

async def send_weekly_summary(update: Update):
    from core import calendar, planner, finances
    import pytz
    today = datetime.now(pytz.timezone('Europe/Moscow')).date()
    week_dates = [(today + timedelta(days=i)) for i in range(7)]
    week_strs = [d.strftime('%Y-%m-%d') for d in week_dates]
    week_days = [d.strftime('%A, %d %B').capitalize() for d in week_dates]

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∑–∞–¥–∞—á –∏ —Ü–µ–ª–µ–π
    CATEGORIES = [
        ("üí∏ –§–∏–Ω–∞–Ω—Å—ã", ["—Ñ–∏–Ω–∞–Ω—Å—ã", "–æ–ø–ª–∞—Ç–∞", "–±—é–¥–∂–µ—Ç", "—Ä–∞—Å—Ö–æ–¥", "–¥–æ—Ö–æ–¥", "–ø–ª–∞—Ç—ë–∂", "—Å—á—ë—Ç", "invoice", "pnl"]),
        ("üë• –ö–æ–º–∞–Ω–¥–∞", ["–∫–æ–º–∞–Ω–¥–∞", "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫", "–≤—Å—Ç—Ä–µ—á–∞", "–æ—Ç—á—ë—Ç", "–±—Ä–∏—Ñ", "–º–∏—Ç–∏–Ω–≥", "—Å–æ–±—Ä–∞–Ω–∏–µ", "hr"]),
        ("üìà –ü—Ä–æ–¥–∞–∂–∏", ["–ø—Ä–æ–¥–∞–∂–∞", "–∫–ø", "–æ—Ñ—Ñ–µ—Ä", "–ª–∏–¥", "—Å–¥–µ–ª–∫–∞", "crm", "amocrm", "–ø—Ä–æ–¥–∞–∂–∏", "–∫–ª–∏–µ–Ω—Ç"]),
        ("ü§ù –ö–ª–∏–µ–Ω—Ç—ã", ["–∫–ª–∏–µ–Ω—Ç", "–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "–¥–æ–≥–æ–≤–æ—Ä", "–∫–æ–Ω—Ç—Ä–∞–∫—Ç", "–ø–æ–¥–ø–∏—Å–∞—Ç—å", "–¥–æ–∫—É–º–µ–Ω—Ç"]),
    ]
    def categorize(text):
        for cat, keywords in CATEGORIES:
            for kw in keywords:
                if kw in text.lower():
                    return cat
        return "üîπ –î—Ä—É–≥–æ–µ"

    # –°–±–æ—Ä –∑–∞–¥–∞—á –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    tasks_by_cat = {cat: [] for cat, _ in CATEGORIES}
    tasks_by_cat["üîπ –î—Ä—É–≥–æ–µ"] = []
    for d in week_strs:
        for t in calendar.get_daily_plan(d):
            if t.get('done'): continue
            cat = categorize(t['task_text'])
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–µ–¥–ª–∞–π–Ω
            deadline = d
            status = "–≤ —Ä–∞–±–æ—Ç–µ"
            if t.get('from_google_calendar'):
                status = "—Å–æ–±—ã—Ç–∏–µ"
            # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ?
            overdue = datetime.strptime(d, '%Y-%m-%d').date() < today
            soon = 0 <= (datetime.strptime(d, '%Y-%m-%d').date() - today).days <= 1
            reminder = " üîî" if soon and not t.get('done') else ""
            overdue_mark = " ‚è∞ –ü–†–û–°–†–û–ß–ï–ù–û" if overdue and not t.get('done') else ""
            tasks_by_cat[cat].append(f"[{d}] {t['task_text']} (—Å—Ç–∞—Ç—É—Å: {status}){reminder}{overdue_mark}")

    # –°–±–æ—Ä —Ü–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    goals = planner.get_goals()
    goals_by_cat = {cat: [] for cat, _ in CATEGORIES}
    goals_by_cat["üîπ –î—Ä—É–≥–æ–µ"] = []
    for goal in goals:
        cat = categorize(goal['goal_text'])
        deadline = goal.get('deadline')
        progress = goal.get('progress', 0)
        days_left = (datetime.strptime(deadline, '%Y-%m-%d').date() - today).days if deadline else None
        soon = days_left is not None and 0 <= days_left <= 1
        overdue = days_left is not None and days_left < 0
        reminder = " üîî" if soon else ""
        overdue_mark = " ‚è∞ –ü–†–û–°–†–û–ß–ï–ù–û" if overdue else ""
        goals_by_cat[cat].append(f"{goal['goal_text']} ‚Äî {progress}% (–¥–æ {deadline or '‚Äî'}){reminder}{overdue_mark}")

    # –§–∏–Ω–∞–Ω—Å—ã –∑–∞ –Ω–µ–¥–µ–ª—é
    week_income = finances.get_income_for_week()
    week_expense = finances.get_expense_for_week()
    finance_block = f"–î–æ—Ö–æ–¥: {week_income['total_amount']} —Ä—É–±.\n–†–∞—Å—Ö–æ–¥: {week_expense['total_amount']} —Ä—É–±.\n–ü—Ä–∏–±—ã–ª—å: {week_income['total_amount'] - week_expense['total_amount']} —Ä—É–±."

    # --- –ü–ª–∞–Ω –ø–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º –ø–ª–∞—Ç–µ–∂–∞–º ---
    upcoming_payments = []
    for p in getattr(finances, 'payments', []):
        try:
            pay_date = datetime.strptime(p['date'], '%Y-%m-%d').date()
        except Exception:
            continue
        if today <= pay_date <= week_dates[-1]:
            upcoming_payments.append(p)
    upcoming_payments.sort(key=lambda p: p['date'])
    payments_block = ""
    if upcoming_payments:
        payments_block += "\nüí≥ <b>–ü–ª–∞–Ω –ø–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º –ø–ª–∞—Ç–µ–∂–∞–º:</b>\n"
        for p in upcoming_payments:
            pay_date = p['date']
            overdue = datetime.strptime(pay_date, '%Y-%m-%d').date() < today
            soon = 0 <= (datetime.strptime(pay_date, '%Y-%m-%d').date() - today).days <= 1
            reminder = " üîî" if soon else ""
            overdue_mark = " ‚è∞ –ü–†–û–°–†–û–ß–ï–ù–û" if overdue else ""
            closed = finances.is_payment_closed(p)
            status = "‚úÖ –∑–∞–∫—Ä—ã—Ç" if closed else "üïì –Ω–µ –∑–∞–∫—Ä—ã—Ç"
            payments_block += (
                f"[{pay_date}] {p['amount']} —Ä—É–±. ({p['project']}) ‚Äî {p['counterparty']}\n"
                f"   –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {p['purpose']} | –°—Ç–∞—Ç—É—Å: {status}{reminder}{overdue_mark}\n"
            )
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    summary = "üóìÔ∏è <b>–ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n"
    for cat, _ in CATEGORIES + [("üîπ –î—Ä—É–≥–æ–µ", [])]:
        if tasks_by_cat[cat] or goals_by_cat[cat]:
            summary += f"\n{cat}:\n"
            for t in tasks_by_cat[cat]:
                summary += f"- {t}\n"
            for g in goals_by_cat[cat]:
                summary += f"üéØ {g}\n"
    # –§–∏–Ω–∞–Ω—Å—ã
    summary += f"\nüí∞ <b>–§–∏–Ω–∞–Ω—Å—ã –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n{finance_block}"
    # –ü–ª–∞—Ç–µ–∂–∏
    if payments_block:
        summary += payments_block
    await update.message.reply_text(summary, parse_mode='HTML')

# --- –î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–≤–æ–¥–∫–∏ ---
last_chat_id_file = 'last_chat_id.txt'
def save_last_chat_id(chat_id):
    with open(last_chat_id_file, 'w') as f:
        f.write(str(chat_id))
def load_last_chat_id():
    if os.path.exists(last_chat_id_file):
        with open(last_chat_id_file, 'r') as f:
            return int(f.read().strip())
    return None

async def send_daily_summary_to_chat(app, chat_id):
    if is_quiet_mode_enabled(chat_id):
        print(f"[Scheduler] –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è —á–∞—Ç–∞ {chat_id}, –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return
    today = datetime.now().strftime("%Y-%m-%d")
    tasks = calendar.get_daily_plan(today)
    if tasks:
        tasks_text = "\n".join([f"- {t['task_text']} {t['time'] or ''} {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}" for t in tasks])
    else:
        tasks_text = "–ù–µ—Ç –∑–∞–¥–∞—á."
    goals = planner.get_goals()
    if goals:
        goals_text = "\n".join([f"- {g['goal_text']} ‚Äî {g['progress']}% (–¥–æ {g['deadline']})" for g in goals])
    else:
        goals_text = "–ù–µ—Ç —Ü–µ–ª–µ–π."
    report = finances.get_report(period=today)
    finance_text = f"–î–æ—Ö–æ–¥: {report['income']}, –†–∞—Å—Ö–æ–¥: {report['expense']}, –ü—Ä–∏–±—ã–ª—å: {report['profit']}"
    # --- –ß–∏—Å—Ç—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –æ–±—â–∏–π ---
    total_balance = finances.get_total_balance()
    finance_text += f"\n–ß–∏—Å—Ç—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {total_balance}"
    # --- –†–∞–∑–º–µ—Ç–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º ---
    project_reports = finances.get_report_by_project(period=today)
    if project_reports:
        finance_text += "\n\n<b>–ü–æ –ø—Ä–æ–µ–∫—Ç–∞–º:</b>"
        for project, rep in project_reports.items():
            balance = finances.get_total_balance(project=project)
            finance_text += f"\n- {project}: –î–æ—Ö–æ–¥ {rep['income']}, –†–∞—Å—Ö–æ–¥ {rep['expense']}, –ü—Ä–∏–±—ã–ª—å {rep['profit']}, –û—Å—Ç–∞—Ç–æ–∫ {balance}"
    summary = f"üóìÔ∏è –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{tasks_text}\n\nüéØ –¶–µ–ª–∏:\n{goals_text}\n\nüí∞ –§–∏–Ω–∞–Ω—Å—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{finance_text}"
    await app.bot.send_message(chat_id=chat_id, text=summary)

# --- Scheduler ---
def start_scheduler(app):
    scheduler = BackgroundScheduler(timezone=pytz.timezone('Europe/Moscow'))
    
    def job():
        chat_id = load_last_chat_id()
        if chat_id:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π event loop –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            try:
                loop = asyncio.get_event_loop()
            except RuntimeError:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
            try:
                if loop.is_running():
                    # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º task
                    asyncio.create_task(send_daily_summary_to_chat(app, chat_id))
                else:
                    # –ï—Å–ª–∏ loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                    loop.run_until_complete(send_daily_summary_to_chat(app, chat_id))
            except Exception as e:
                print(f"Error in scheduler job: {e}")
    
    scheduler.add_job(job, 'cron', hour=8, minute=0)
    scheduler.start()

def validate_task_date(date_str):
    if not date_str:
        return None
    try:
        dt = datetime.strptime(date_str, '%Y-%m-%d')
        today = datetime.now().date()
        if dt.date() < today:
            return None  # –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º, –≤–µ—Ä–æ—è—Ç–Ω–æ –æ—à–∏–±–∫–∞
        return date_str
    except Exception:
        return None

def extract_date_phrase(text):
    patterns = [
        r"–∑–∞–≤—Ç—Ä–∞ –≤ \d{1,2}(:\d{2})?",
        r"–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ \d{1,2}(:\d{2})?",
        r"–∑–∞–≤—Ç—Ä–∞[\w\s:]*",
        r"–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞[\w\s:]*",
        r"—Å–µ–≥–æ–¥–Ω—è[\w\s:]*",
        r"—á–µ—Ä–µ–∑ [^ ]+",
        r"–≤ \d{1,2}:\d{2}",
        r"–≤ \w+",  # –≤ –ø—è—Ç–Ω–∏—Ü—É
        r"–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ",
    ]
    for pat in patterns:
        m = re.search(pat, text, re.IGNORECASE)
        if m:
            return m.group(0)
    return text

def parse_natural_date(text):
    dt = dateparser.parse(text, languages=['ru'])
    if dt:
        return dt.strftime('%Y-%m-%d')
    return None

def smart_hour_from_phrase(phrase):
    # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ "—É—Ç—Ä–∞", "–Ω–æ—á–∏", "am" ‚Äî 03:00
    if re.search(r"(—É—Ç—Ä–∞|–Ω–æ—á–∏|am)", phrase, re.IGNORECASE):
        return "03:00"
    # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ "–¥–Ω—è", "–≤–µ—á–µ—Ä–∞", "pm" ‚Äî 15:00
    if re.search(r"(–¥–Ω—è|–≤–µ—á–µ—Ä–∞|pm)", phrase, re.IGNORECASE):
        return "15:00"
    # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ "–≤ 3" ‚Äî —Å—á–∏—Ç–∞–µ–º 15:00 (—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å)
    hour_match = re.search(r"–≤ (\d{1,2})(?!:)", phrase)
    if hour_match:
        hour = int(hour_match.group(1))
        if 1 <= hour <= 8:
            return f"{hour+12:02d}:00"  # 3 ‚Üí 15:00, 8 ‚Üí 20:00
        elif 9 <= hour <= 20:
            return f"{hour:02d}:00"
        else:
            return "15:00"
    return "09:00"

def parse_natural_date_and_time(text):
    phrase = extract_date_phrase(text)
    dt = dateparser.parse(phrase, languages=['ru'], settings={'PREFER_DATES_FROM': 'future'})
    if dt:
        date = dt.strftime('%Y-%m-%d')
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø—Ä–∏–º–µ–Ω—è–µ–º smart_hour_from_phrase
        if re.search(r'\d{1,2}:\d{2}', phrase):
            time = dt.strftime('%H:%M')
        else:
            time = smart_hour_from_phrase(phrase)
        print(f"[DEBUG] dateparser: text='{text}', phrase='{phrase}', parsed_date='{date}', parsed_time='{time}'")
        return date, time
    print(f"[DEBUG] dateparser: text='{text}', phrase='{phrase}', parsed_date=None, parsed_time=None")
    return None, None

# --- –ü—É–ª–ª–∏–Ω–≥ Google Calendar ---
last_polled_events = {}

def start_calendar_polling(app):
    def poll():
        while True:
            now = datetime.now(pytz.timezone('Europe/Moscow'))
            if 9 <= now.hour < 20:
                interval = 300  # 5 –º–∏–Ω—É—Ç
            else:
                interval = 3600  # 60 –º–∏–Ω—É—Ç
            try:
                chat_id = load_last_chat_id()
                if chat_id:
                    check_calendar_changes_and_notify(app, chat_id)
            except Exception as e:
                print(f"[Calendar Polling] Error: {e}")
            finally:
                import time
                time.sleep(interval)
    t = threading.Thread(target=poll, daemon=True)
    t.start()

def check_calendar_changes_and_notify(app, chat_id):
    if is_quiet_mode_enabled(chat_id):
        print(f"[Calendar Polling] –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è —á–∞—Ç–∞ {chat_id}, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø—Ä–æ–ø—É—â–µ–Ω—ã.")
        return
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    from core.calendar import get_google_calendar_events
    global last_polled_events
    today = datetime.now().strftime('%Y-%m-%d')
    events = get_google_calendar_events(today)
    event_map = {e['id']: (e['summary'], e['start'].get('dateTime', e['start'].get('date'))) for e in events}
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    if last_polled_events:
        # –ù–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
        new_events = [e for eid, e in event_map.items() if eid not in last_polled_events]
        # –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        changed_events = [eid for eid in event_map if eid in last_polled_events and event_map[eid] != last_polled_events[eid]]
        # –£–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        deleted_events = [eid for eid in last_polled_events if eid not in event_map]
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try:
            loop = asyncio.get_event_loop()
            if new_events:
                for summary, start in new_events:
                    asyncio.run_coroutine_threadsafe(
                        app.bot.send_message(chat_id=chat_id, text=f"[–ö–∞–ª–µ–Ω–¥–∞—Ä—å] –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {summary} ({start})"),
                        loop
                    )
            if changed_events:
                for eid in changed_events:
                    summary, start = event_map[eid]
                    asyncio.run_coroutine_threadsafe(
                        app.bot.send_message(chat_id=chat_id, text=f"[–ö–∞–ª–µ–Ω–¥–∞—Ä—å] –ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {summary} ({start})"),
                        loop
                    )
            if deleted_events:
                for eid in deleted_events:
                    summary, start = last_polled_events[eid]
                    asyncio.run_coroutine_threadsafe(
                        app.bot.send_message(chat_id=chat_id, text=f"[–ö–∞–ª–µ–Ω–¥–∞—Ä—å] –£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {summary} ({start})"),
                        loop
                    )
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ—Ç event loop –≤ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç–æ–∫–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            print(f"[Calendar Polling] No event loop available for notifications")
    last_polled_events = event_map.copy()

# --- –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ handle_message ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    user_id = update.message.from_user.id
    username = update.message.from_user.username or update.message.from_user.full_name
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å
    chat_memory.add_message(user_id=user_id, username=username, text=user_text, role="user")
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_text}")
    save_last_chat_id(update.effective_chat.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º "–ù–∞ –æ–±—ä–µ–∫—Ç–µ"
    if await handle_on_site_mode(update, context):
        return
    
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤ ---
    if context.user_data.get('awaiting_fin_date'):
        fin_intent = context.user_data.pop('awaiting_fin_date')
        import dateparser
        dt = dateparser.parse(user_text, languages=['ru'])
        if not dt:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≤—á–µ—Ä–∞', '25 –∏—é–Ω—è').")
            context.user_data['awaiting_fin_date'] = fin_intent
            return
        fin_intent['date'] = dt.strftime('%Y-%m-%d')
        if fin_intent['intent'] == 'income':
            op = finances.add_income(
                fin_intent.get("amount"),
                fin_intent.get("project"),
                description=fin_intent.get("description"),
                date=fin_intent.get("date")
            )
            await update.message.reply_text(f"–î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {op['amount']} ({op['project']}) ‚Äî {op['description']} ({op['date']})")
        elif fin_intent['intent'] == 'expense':
            op = finances.add_expense(
                fin_intent.get("amount"),
                fin_intent.get("project"),
                description=fin_intent.get("description"),
                date=fin_intent.get("date"),
                category=fin_intent.get("category")
            )
            await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {op['amount']} ({op['project']}) ‚Äî {op['description']} ({op['date']})")
        return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
    if context.user_data.get('awaiting_payment_choice'):
        doc_data = context.user_data.pop('awaiting_payment_choice')
        try:
            payment_index = int(user_text.strip()) - 1
            all_payments = finances.payments
            if 0 <= payment_index < len(all_payments):
                payment = all_payments[payment_index]
                doc = finances.add_ved_document(
                    doc_type=doc_data['doc_type'],
                    number=doc_data['number'],
                    date=doc_data['date'],
                    payment_ids=[payment['id']]
                )
                await update.message.reply_text(f"–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {doc_data['doc_type']} ‚Ññ{doc_data['number']} –æ—Ç {doc_data['date']} –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment['counterparty']} ({payment['id']})")
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                context.user_data['awaiting_payment_choice'] = doc_data
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞).")
            context.user_data['awaiting_payment_choice'] = doc_data
        return

    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏ Google Calendar ---
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    m = re.match(r"—É–¥–∞–ª–∏ —Å–æ–±—ã—Ç–∏–µ ([^\n]+) (\d{4}-\d{2}-\d{2})", user_text, re.I)
    if m:
        title, date = m.group(1).strip(), m.group(2)
        event = calendar.find_google_calendar_event_by_title_and_date(title, date)
        if event:
            ok = calendar.delete_google_calendar_event(event['id'])
            if ok:
                await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{title}' –Ω–∞ {date} —É–¥–∞–ª–µ–Ω–æ –∏–∑ Google Calendar.")
            else:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è '{title}' –Ω–∞ {date}.")
        else:
            await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{title}' –Ω–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    m = re.match(r"–ø–µ—Ä–µ–∏–º–µ–Ω—É–π —Å–æ–±—ã—Ç–∏–µ ([^\n]+) (\d{4}-\d{2}-\d{2}) –≤ ([^\n]+)", user_text, re.I)
    if m:
        old_title, date, new_title = m.group(1).strip(), m.group(2), m.group(3).strip()
        event = calendar.find_google_calendar_event_by_title_and_date(old_title, date)
        if event:
            ok = calendar.update_google_calendar_event(event['id'], new_title=new_title)
            if ok:
                await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{old_title}' –Ω–∞ {date} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ '{new_title}'.")
            else:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è '{old_title}'.")
        else:
            await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{old_title}' –Ω–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    # –ü–µ—Ä–µ–Ω–æ—Å —Å–æ–±—ã—Ç–∏—è
    m = re.match(r"–ø–µ—Ä–µ–Ω–µ—Å–∏ —Å–æ–±—ã—Ç–∏–µ ([^\n]+) (\d{4}-\d{2}-\d{2}) –Ω–∞ (\d{2}:\d{2})", user_text, re.I)
    if m:
        title, date, new_time = m.group(1).strip(), m.group(2), m.group(3)
        event = calendar.find_google_calendar_event_by_title_and_date(title, date)
        if event:
            ok = calendar.update_google_calendar_event(event['id'], new_time=new_time)
            if ok:
                await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{title}' –Ω–∞ {date} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ {new_time}.")
            else:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Å–æ–±—ã—Ç–∏—è '{title}'.")
        else:
            await update.message.reply_text(f"–°–æ–±—ã—Ç–∏–µ '{title}' –Ω–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    # –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π/–≤—Å—Ç—Ä–µ—á/–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π/–∏–≤–µ–Ω—Ç–æ–≤ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
    m = re.match(r"—É–¥–∞–ª–∏ –≤—Å–µ (—Å–æ–±—ã—Ç–∏—è|–≤—Å—Ç—Ä–µ—á–∏|–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è|–∏–≤–µ–Ω—Ç—ã|event[—ãe]?|—Å–æ–±—ã—Ç–∏–µ) ?(–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è)? (–∑–∞|–Ω–∞) ([^\n]+)", user_text, re.I)
    if m:
        phrase = m.group(4).strip()
        date_list = calendar.get_date_range_from_phrase(phrase)
        if not date_list:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –ø–æ —Ñ—Ä–∞–∑–µ: '{phrase}'")
            return
        count = calendar.delete_all_google_calendar_events_in_range(date_list)
        await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ {count} —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar –∑–∞: {', '.join(date_list)}")
        return
    # --- –°–≤–æ–¥–∫–∞ –ø–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ñ—Ä–∞–∑–∞–º ---
    if re.search(r"(—á—Ç–æ —É –º–µ–Ω—è|–ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è|—É—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞|–¥–∞–π —Å–≤–æ–¥–∫—É|—Å–µ–≥–æ–¥–Ω—è)", user_text, re.I):
        await send_daily_summary(update)
        return
    if re.search(r"(–ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª—è|–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞)", user_text, re.I):
        await send_weekly_summary(update)
        return
    
    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–æ–º –¥–Ω—è ---
    if await handle_focus_commands(update, context):
        return
    
    # --- –î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã ---
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    if re.search(r"–¥–æ–±–∞–≤—å –ø–ª–∞—Ç—ë–∂.*—Ä—É–±–ª", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {user_text}")
        m = re.match(r"–¥–æ–±–∞–≤—å –ø–ª–∞—Ç—ë–∂ (\d+) —Ä—É–±–ª–µ–π? ([^\n]+) (–≤—Ö–æ–¥—è—â–∏–π|–∏—Å—Ö–æ–¥—è—â–∏–π) (–≤ –†–æ—Å—Å–∏—é|–∑–∞ –≥—Ä–∞–Ω–∏—Ü—É) –ø—Ä–æ–µ–∫—Ç ([^\n]+) –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç ([^\n]+) –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ ([^\n]+)", user_text, re.I)
        if m:
            amount = int(m.group(1))
            date_phrase = m.group(2).strip()
            direction = 'in' if m.group(3) == '–≤—Ö–æ–¥—è—â–∏–π' else 'out'
            country = 'RU' if m.group(4) == '–≤ –†–æ—Å—Å–∏—é' else 'INT'
            project = m.group(5).strip()
            counterparty = m.group(6).strip()
            purpose = m.group(7).strip()
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            import dateparser
            dt = dateparser.parse(date_phrase, languages=['ru'])
            if not dt:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≤—á–µ—Ä–∞').")
                return
            
            payment = finances.add_payment(
                amount=amount,
                date=dt.strftime('%Y-%m-%d'),
                direction=direction,
                country=country,
                project=project,
                counterparty=counterparty,
                purpose=purpose
            )
            await update.message.reply_text(f"–ü–ª–∞—Ç—ë–∂ –¥–æ–±–∞–≤–ª–µ–Ω: {amount} —Ä—É–±. ({direction}, {country}, {project}) ‚Äî {counterparty} ({purpose})")
            return
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–î–æ–±–∞–≤—å –ø–ª–∞—Ç—ë–∂ <—Å—É–º–º–∞> —Ä—É–±–ª–µ–π <–¥–∞—Ç–∞> <–≤—Ö–æ–¥—è—â–∏–π/–∏—Å—Ö–æ–¥—è—â–∏–π> <–≤ –†–æ—Å—Å–∏—é/–∑–∞ –≥—Ä–∞–Ω–∏—Ü—É> –ø—Ä–æ–µ–∫—Ç <–Ω–∞–∑–≤–∞–Ω–∏–µ> –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç <–Ω–∞–∑–≤–∞–Ω–∏–µ> –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ <–æ–ø–∏—Å–∞–Ω–∏–µ>'")
            return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏
    if re.search(r"–¥–æ–±–∞–≤—å –∑–∞–∫—É–ø–∫—É", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—É–ø–∫–∏: {user_text}")
        m = re.match(r"–¥–æ–±–∞–≤—å –∑–∞–∫—É–ø–∫—É ([^\n]+) (\d+) —Ä—É–±–ª–µ–π? ([^\n]+)", user_text, re.I)
        if m:
            name = m.group(1).strip()
            amount = int(m.group(2))
            date_phrase = m.group(3).strip()
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            import dateparser
            dt = dateparser.parse(date_phrase, languages=['ru'])
            if not dt:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.")
                return
            
            purchase = finances.add_purchase(
                name=name,
                amount=amount,
                date=dt.strftime('%Y-%m-%d')
            )
            await update.message.reply_text(f"–ó–∞–∫—É–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {name} ‚Äî {amount} —Ä—É–±. ({purchase['date']})")
            return
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–î–æ–±–∞–≤—å –∑–∞–∫—É–ø–∫—É <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Å—É–º–º–∞> —Ä—É–±–ª–µ–π <–¥–∞—Ç–∞>'")
            return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if re.search(r"–¥–æ–±–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç.*(–Ω–∞–∫–ª–∞–¥–Ω–∞—è|—É–ø–¥|–≥—Ç–¥|—Å—á—ë—Ç|–∫–æ–Ω—Ç—Ä–∞–∫—Ç|–∞–∫—Ç)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {user_text}")
        m = re.match(r"–¥–æ–±–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–∞–∫–ª–∞–¥–Ω–∞—è|—É–ø–¥|–≥—Ç–¥|—Å—á—ë—Ç|–∫–æ–Ω—Ç—Ä–∞–∫—Ç|–∞–∫—Ç) –Ω–æ–º–µ—Ä ([^\n]+) –æ—Ç ([^\n]+) –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ ([a-f0-9-]+)", user_text, re.I)
        if m:
            doc_type = m.group(1)
            number = m.group(2).strip()
            date_phrase = m.group(3).strip()
            payment_id = m.group(4)
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            import dateparser
            dt = dateparser.parse(date_phrase, languages=['ru'])
            if not dt:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            payment = finances.find_payment_by_id(payment_id)
            if not payment:
                await update.message.reply_text(f"–ü–ª–∞—Ç—ë–∂ —Å ID {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            doc = finances.add_document(
                doc_type=doc_type,
                number=number,
                date=dt.strftime('%Y-%m-%d'),
                payment_ids=[payment_id]
            )
            await update.message.reply_text(f"–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {doc_type} ‚Ññ{number} –æ—Ç {doc['date']} –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
            return
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–î–æ–±–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç <—Ç–∏–ø> –Ω–æ–º–µ—Ä <–Ω–æ–º–µ—Ä> –æ—Ç <–¥–∞—Ç–∞> –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ <ID>'")
            return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ (–∞–≤—Ç–æ–ø–æ–∏—Å–∫ –ø–ª–∞—Ç–µ–∂–∞)
    if re.search(r"–¥–æ–±–∞–≤—å (–Ω–∞–∫–ª–∞–¥–Ω–∞—è|—É–ø–¥|–≥—Ç–¥|—Å—á—ë—Ç|–∫–æ–Ω—Ç—Ä–∞–∫—Ç|–∞–∫—Ç).*–¥–ª—è.*–ø–ª–∞—Ç–µ–∂–∞", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∞–≤—Ç–æ–ø–æ–∏—Å–∫): {user_text}")
        # –ò—â–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc_type_match = re.search(r"(–Ω–∞–∫–ª–∞–¥–Ω–∞—è|—É–ø–¥|–≥—Ç–¥|—Å—á—ë—Ç|–∫–æ–Ω—Ç—Ä–∞–∫—Ç|–∞–∫—Ç)", user_text, re.I)
        if not doc_type_match:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            return
        doc_type = doc_type_match.group(1)
        
        # –ò—â–µ–º –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
        number_match = re.search(r"–Ω–æ–º–µ—Ä ([^\s]+)", user_text, re.I)
        if not number_match:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            return
        number = number_match.group(1)
        
        # –ò—â–µ–º –¥–∞—Ç—É
        date_match = re.search(r"–æ—Ç ([^\s]+)", user_text, re.I)
        if not date_match:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            return
        date_phrase = date_match.group(1)
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        import dateparser
        dt = dateparser.parse(date_phrase, languages=['ru'])
        if not dt:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.")
            return
        
        # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ
        all_payments = finances.payments
        if not all_payments:
            await update.message.reply_text("–ü–ª–∞—Ç–µ–∂–µ–π –Ω–µ—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–ª–∞—Ç—ë–∂.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        text = f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—ë–∂ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_type} ‚Ññ{number} –æ—Ç {dt.strftime('%Y-%m-%d')}:\n"
        for i, payment in enumerate(all_payments, 1):
            text += f"{i}. {payment['amount']} —Ä—É–±. ‚Äî {payment['counterparty']} ({payment['date']}) [ID: {payment['id']}]\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['awaiting_payment_choice'] = {
            'doc_type': doc_type,
            'number': number,
            'date': dt.strftime('%Y-%m-%d')
        }
        
        await update.message.reply_text(text + "\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä–æ–º –ø–ª–∞—Ç–µ–∂–∞ (1, 2, 3...)")
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –ø–ª–∞—Ç–µ–∂–∏|–Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –ø–ª–∞—Ç–µ–∂–∏|–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {user_text}")
        unclosed = finances.get_unclosed_payments()
        if not unclosed:
            await update.message.reply_text("–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞–∫—Ä—ã—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.")
        else:
            text = "–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –ø–ª–∞—Ç–µ–∂–∏:\n"
            for payment in unclosed:
                required = finances.get_required_docs_for_payment(payment)
                docs = [finances.find_document_by_id(doc_id) for doc_id in payment['documents_ids']]
                doc_types = [d['type'] for d in docs if d]
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                debug_info = f"\n[DEBUG] –ü–ª–∞—Ç—ë–∂ {payment['id']}:"
                debug_info += f"\n  –¢—Ä–µ–±—É–µ–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {required}"
                debug_info += f"\n  –ï—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã: {doc_types}"
                debug_info += f"\n  IDs –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {payment['documents_ids']}"
                print(debug_info)
                
                missing = [req for req in required if req not in doc_types and req != '–Ω–∞–∫–ª–∞–¥–Ω–∞—è/—É–ø–¥' or (req == '–Ω–∞–∫–ª–∞–¥–Ω–∞—è/—É–ø–¥' and not any(t in doc_types for t in ['–Ω–∞–∫–ª–∞–¥–Ω–∞—è', '—É–ø–¥']))]
                
                text += f"\nüí∞ {payment['amount']} —Ä—É–±. ({payment['project']}) ‚Äî {payment['counterparty']}\n"
                text += f"   –î–∞—Ç–∞: {payment['date']}, –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'–≤—Ö–æ–¥—è—â–∏–π' if payment['direction'] == 'in' else '–∏—Å—Ö–æ–¥—è—â–∏–π'}\n"
                text += f"   ID: {payment['id']}\n"
                text += f"   –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {', '.join(missing) if missing else '–≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –µ—Å—Ç—å'}\n"
            
            await update.message.reply_text(text)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏|–≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏|—Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {user_text}")
        all_payments = finances.payments  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
        if not all_payments:
            await update.message.reply_text("–ü–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = "–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏:\n"
            for payment in all_payments:
                direction_text = '–≤—Ö–æ–¥—è—â–∏–π' if payment['direction'] == 'in' else '–∏—Å—Ö–æ–¥—è—â–∏–π'
                country_text = '–†–æ—Å—Å–∏—è' if payment['country'] == 'RU' else '–∑–∞ –≥—Ä–∞–Ω–∏—Ü—É'
                text += f"\n {payment['amount']} —Ä—É–±. ({payment['project']}) ‚Äî {payment['counterparty']}\n"
                text += f"   –î–∞—Ç–∞: {payment['date']}, {direction_text}, {country_text}\n"
                text += f"   ID: {payment['id']}\n"
                text += f"   –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {payment['purpose']}\n"
            
            await update.message.reply_text(text)
        return
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    if re.search(r"(—É–¥–∞–ª–∏ –ø–ª–∞—Ç—ë–∂|—É–¥–∞–ª–∏—Ç—å –ø–ª–∞—Ç—ë–∂|—É–¥–∞–ª–∏—Ç—å –ø–ª–∞—Ç–µ–∂|—É–¥–∞–ª–∏ –ø–ª–∞—Ç–µ–∂).*([a-f0-9-]{36})", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {user_text}")
        payment_id_match = re.search(r"([a-f0-9-]{36})", user_text)
        if payment_id_match:
            payment_id = payment_id_match.group(1)
            payment = finances.find_payment_by_id(payment_id)
            if payment:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                text = f"–£–¥–∞–ª—è—é –ø–ª–∞—Ç—ë–∂:\n"
                text += f"üí∞ {payment['amount']} —Ä—É–±. ({payment['project']}) ‚Äî {payment['counterparty']}\n"
                text += f"–î–∞—Ç–∞: {payment['date']}\n"
                text += f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'–≤—Ö–æ–¥—è—â–∏–π' if payment['direction'] == 'in' else '–∏—Å—Ö–æ–¥—è—â–∏–π'}\n"
                text += f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {payment['purpose']}\n"
                
                if payment['documents_ids']:
                    text += f"\n–°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã):\n"
                    for doc_id in payment['documents_ids']:
                        doc = finances.find_document_by_id(doc_id)
                        if doc:
                            text += f"  üìÑ {doc['type']} ‚Ññ{doc['number']} –æ—Ç {doc['date']}\n"
                
                # –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç—ë–∂
                if finances.delete_payment(payment_id):
                    text += f"\n‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏."
                    await update.message.reply_text(text)
                else:
                    await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
            else:
                await update.message.reply_text(f"–ü–ª–∞—Ç—ë–∂ —Å ID {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–£–¥–∞–ª–∏ –ø–ª–∞—Ç—ë–∂ [ID_–ø–ª–∞—Ç–µ–∂–∞]'")
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫—É–ø–æ–∫
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –≤—Å–µ –∑–∞–∫—É–ø–∫–∏|–≤—Å–µ –∑–∞–∫—É–ø–∫–∏|—Å–ø–∏—Å–æ–∫ –∑–∞–∫—É–ø–æ–∫)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–∫—É–ø–æ–∫: {user_text}")
        all_purchases = finances.purchases  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫—É–ø–∫–∏
        if not all_purchases:
            await update.message.reply_text("–ó–∞–∫—É–ø–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = "–í—Å–µ –∑–∞–∫—É–ø–∫–∏:\n"
            for purchase in all_purchases:
                text += f"\nüì¶ {purchase['name']} ‚Äî {purchase['amount']} —Ä—É–±.\n"
                text += f"   –î–∞—Ç–∞: {purchase['date']}\n"
                text += f"   ID: {purchase['id']}\n"
            
            await update.message.reply_text(text)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã|–≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã|—Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {user_text}")
        all_documents = finances.documents  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        if not all_documents:
            await update.message.reply_text("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = "–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n"
            for doc in all_documents:
                text += f"\nüìÑ {doc['type']} ‚Ññ{doc['number']} –æ—Ç {doc['date']}\n"
                text += f"   ID: {doc['id']}\n"
                if doc['payment_ids']:
                    payment = finances.find_payment_by_id(doc['payment_ids'][0])
                    if payment:
                        text += f"   –ü–ª–∞—Ç—ë–∂: {payment['counterparty']} ({payment['amount']} —Ä—É–±.)\n"
                else:
                    text += f"   –ü–ª–∞—Ç—ë–∂: –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω\n"
                if doc.get('file_url'):
                    text += f"   üìé –§–∞–π–ª: {doc['file_url']}\n"
            
            await update.message.reply_text(text)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã|–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã|—Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤|–≤—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {user_text}")
        contracts = [doc for doc in finances.documents if doc['type'] == '–∫–æ–Ω—Ç—Ä–∞–∫—Ç']
        if not contracts:
            await update.message.reply_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã ({len(contracts)}):\n"
            for contract in contracts:
                text += f"\nüìã –ö–æ–Ω—Ç—Ä–∞–∫—Ç ‚Ññ{contract['number']} –æ—Ç {contract['date']}\n"
                text += f"   ID: {contract['id']}\n"
                if contract['payment_ids']:
                    payment = finances.find_payment_by_id(contract['payment_ids'][0])
                    if payment:
                        text += f"   –ü–ª–∞—Ç—ë–∂: {payment['counterparty']} ({payment['amount']} —Ä—É–±.)\n"
                        text += f"   –ü—Ä–æ–µ–∫—Ç: {payment['project']}\n"
                        text += f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'–≤—Ö–æ–¥—è—â–∏–π' if payment['direction'] == 'in' else '–∏—Å—Ö–æ–¥—è—â–∏–π'}\n"
                else:
                    text += f"   –ü–ª–∞—Ç—ë–∂: –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω\n"
                if contract.get('file_url'):
                    text += f"   üìé –§–∞–π–ª: {contract['file_url']}\n"
            
            await update.message.reply_text(text)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –∏ –£–ü–î
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ|–Ω–∞–∫–ª–∞–¥–Ω—ã–µ|—É–ø–¥|–ø–æ–∫–∞–∂–∏ —É–ø–¥|—Å–ø–∏—Å–æ–∫ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö|—Å–ø–∏—Å–æ–∫ —É–ø–¥)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö/–£–ü–î: {user_text}")
        invoices = [doc for doc in finances.documents if doc['type'] in ['–Ω–∞–∫–ª–∞–¥–Ω–∞—è', '—É–ø–¥']]
        if not invoices:
            await update.message.reply_text("–ù–∞–∫–ª–∞–¥–Ω—ã—Ö –∏ –£–ü–î –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = f"–ù–∞–∫–ª–∞–¥–Ω—ã–µ –∏ –£–ü–î ({len(invoices)}):\n"
            for invoice in invoices:
                text += f"\nüìÑ {invoice['type'].title()} ‚Ññ{invoice['number']} –æ—Ç {invoice['date']}\n"
                text += f"   ID: {invoice['id']}\n"
                if invoice['payment_ids']:
                    payment = finances.find_payment_by_id(invoice['payment_ids'][0])
                    if payment:
                        text += f"   –ü–ª–∞—Ç—ë–∂: {payment['counterparty']} ({payment['amount']} —Ä—É–±.)\n"
                        text += f"   –ü—Ä–æ–µ–∫—Ç: {payment['project']}\n"
                else:
                    text += f"   –ü–ª–∞—Ç—ë–∂: –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω\n"
                if invoice.get('file_url'):
                    text += f"   üìé –§–∞–π–ª: {invoice['file_url']}\n"
            
            await update.message.reply_text(text)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ì–¢–î
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –≥—Ç–¥|–≥—Ç–¥|—Å–ø–∏—Å–æ–∫ –≥—Ç–¥|–≤—Å–µ –≥—Ç–¥)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ì–¢–î: {user_text}")
        gtd_docs = [doc for doc in finances.documents if doc['type'] == '–≥—Ç–¥']
        if not gtd_docs:
            await update.message.reply_text("–ì–¢–î –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = f"–ì–¢–î ({len(gtd_docs)}):\n"
            for gtd in gtd_docs:
                text += f"\nüåç –ì–¢–î ‚Ññ{gtd['number']} –æ—Ç {gtd['date']}\n"
                text += f"   ID: {gtd['id']}\n"
                if gtd['payment_ids']:
                    payment = finances.find_payment_by_id(gtd['payment_ids'][0])
                    if payment:
                        text += f"   –ü–ª–∞—Ç—ë–∂: {payment['counterparty']} ({payment['amount']} —Ä—É–±.)\n"
                        text += f"   –ü—Ä–æ–µ–∫—Ç: {payment['project']}\n"
                        text += f"   –°—Ç—Ä–∞–Ω–∞: {'–∑–∞ –≥—Ä–∞–Ω–∏—Ü—É' if payment['country'] == 'INT' else '–†–æ—Å—Å–∏—è'}\n"
                else:
                    text += f"   –ü–ª–∞—Ç—ë–∂: –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω\n"
                if gtd.get('file_url'):
                    text += f"   üìé –§–∞–π–ª: {gtd['file_url']}\n"
            
            await update.message.reply_text(text)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—á–µ—Ç–æ–≤
    if re.search(r"(–ø–æ–∫–∞–∂–∏ —Å—á–µ—Ç–∞|—Å—á–µ—Ç–∞|—Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤|–≤—Å–µ —Å—á–µ—Ç–∞)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—á–µ—Ç–æ–≤: {user_text}")
        bills = [doc for doc in finances.documents if doc['type'] == '—Å—á—ë—Ç']
        if not bills:
            await update.message.reply_text("–°—á–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = f"–°—á–µ—Ç–∞ ({len(bills)}):\n"
            for bill in bills:
                text += f"\nüí∞ –°—á—ë—Ç ‚Ññ{bill['number']} –æ—Ç {bill['date']}\n"
                text += f"   ID: {bill['id']}\n"
                if bill['payment_ids']:
                    payment = finances.find_payment_by_id(bill['payment_ids'][0])
                    if payment:
                        text += f"   –ü–ª–∞—Ç—ë–∂: {payment['counterparty']} ({payment['amount']} —Ä—É–±.)\n"
                        text += f"   –ü—Ä–æ–µ–∫—Ç: {payment['project']}\n"
                        text += f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'–≤—Ö–æ–¥—è—â–∏–π' if payment['direction'] == 'in' else '–∏—Å—Ö–æ–¥—è—â–∏–π'}\n"
                else:
                    text += f"   –ü–ª–∞—Ç—ë–∂: –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω\n"
                if bill.get('file_url'):
                    text += f"   üìé –§–∞–π–ª: {bill['file_url']}\n"
            
            await update.message.reply_text(text)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–æ–≤
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –∞–∫—Ç—ã|–∞–∫—Ç—ã|—Å–ø–∏—Å–æ–∫ –∞–∫—Ç–æ–≤|–≤—Å–µ –∞–∫—Ç—ã)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–æ–≤: {user_text}")
        acts = [doc for doc in finances.documents if doc['type'] == '–∞–∫—Ç']
        if not acts:
            await update.message.reply_text("–ê–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = f"–ê–∫—Ç—ã ({len(acts)}):\n"
            for act in acts:
                text += f"\nüìã –ê–∫—Ç ‚Ññ{act['number']} –æ—Ç {act['date']}\n"
                text += f"   ID: {act['id']}\n"
                text += f"   –¢–∏–ø: {act.get('entity_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                text += f"   –°–æ–∑–¥–∞–Ω–∞: {datetime.fromtimestamp(act.get('created_at', 0)).strftime('%d.%m.%Y')}\n\n"
            
            await update.message.reply_text(text)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –ø—Ä–∏—Ö–æ–¥—ã –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é|–ø—Ä–∏—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é|–¥–æ—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é|–ø–æ–∫–∞–∂–∏ –¥–æ—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {user_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_match = re.search(r"–ø—Ä–æ–µ–∫—Ç[–∞]?\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        project = project_match.group(1).strip() if project_match else None
        
        week_data = finances.get_income_for_week(project=project)
        
        if not week_data['income_list']:
            project_text = f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'" if project else ""
            await update.message.reply_text(f"–ü—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é{project_text} –Ω–µ—Ç.")
        else:
            text = f"üí∞ –ü—Ä–∏—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é ({week_data['week_start']} - {week_data['week_end']})"
            if project:
                text += f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'"
            text += f":\n\n"
            
            for income in week_data['income_list']:
                text += f"üìà {income['amount']} —Ä—É–±. ({income['project']})\n"
                text += f"   {income['description']} ‚Äî {income['date']}\n\n"
            
            text += f"üíµ <b>–ò—Ç–æ–≥–æ: {week_data['total_amount']} —Ä—É–±.</b>"
            
            await update.message.reply_text(text, parse_mode='HTML')
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é
    if re.search(r"(–ø–æ–∫–∞–∂–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é|—Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é|–ø–æ–∫–∞–∂–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é|—Ç—Ä–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {user_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_match = re.search(r"–ø—Ä–æ–µ–∫—Ç[–∞]?\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        project = project_match.group(1).strip() if project_match else None
        
        week_data = finances.get_expense_for_week(project=project)
        
        if not week_data['expense_list']:
            project_text = f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'" if project else ""
            await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é{project_text} –Ω–µ—Ç.")
        else:
            text = f"üí∏ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é ({week_data['week_start']} - {week_data['week_end']})"
            if project:
                text += f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'"
            text += f":\n\n"
            
            for expense in week_data['expense_list']:
                category_text = f" [{expense.get('category', '–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}]" if expense.get('category') else ""
                text += f"üìâ {expense['amount']} —Ä—É–±. ({expense['project']}){category_text}\n"
                text += f"   {expense['description']} ‚Äî {expense['date']}\n\n"
            
            text += f"üí∏ <b>–ò—Ç–æ–≥–æ: {week_data['total_amount']} —Ä—É–±.</b>"
            
            await update.message.reply_text(text, parse_mode='HTML')
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –ø—Ä–∏—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü|–ø—Ä–∏—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü|–¥–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü|–ø–æ–∫–∞–∂–∏ –¥–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {user_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_match = re.search(r"–ø—Ä–æ–µ–∫—Ç[–∞]?\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        project = project_match.group(1).strip() if project_match else None
        
        month_data = finances.get_income_for_month(project=project)
        
        if not month_data['income_list']:
            project_text = f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'" if project else ""
            await update.message.reply_text(f"–ü—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ {month_data['period']}{project_text} –Ω–µ—Ç.")
        else:
            text = f"üí∞ –ü—Ä–∏—Ö–æ–¥—ã –∑–∞ {month_data['period']}"
            if project:
                text += f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'"
            text += f":\n\n"
            
            for income in month_data['income_list']:
                text += f"üìà {income['amount']} —Ä—É–±. ({income['project']})\n"
                text += f"   {income['description']} ‚Äî {income['date']}\n\n"
            
            text += f"üíµ <b>–ò—Ç–æ–≥–æ: {month_data['total_amount']} —Ä—É–±.</b>"
            
            await update.message.reply_text(text, parse_mode='HTML')
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü
    if re.search(r"(–ø–æ–∫–∞–∂–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü|—Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü|–ø–æ–∫–∞–∂–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü|—Ç—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {user_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_match = re.search(r"–ø—Ä–æ–µ–∫—Ç[–∞]?\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        project = project_match.group(1).strip() if project_match else None
        
        month_data = finances.get_expense_for_month(project=project)
        
        if not month_data['expense_list']:
            project_text = f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'" if project else ""
            await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {month_data['period']}{project_text} –Ω–µ—Ç.")
        else:
            text = f"üí∏ –†–∞—Å—Ö–æ–¥—ã –∑–∞ {month_data['period']}"
            if project:
                text += f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'"
            text += f":\n\n"
            
            for expense in month_data['expense_list']:
                category_text = f" [{expense.get('category', '–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}]" if expense.get('category') else ""
                text += f"üìâ {expense['amount']} —Ä—É–±. ({expense['project']}){category_text}\n"
                text += f"   {expense['description']} ‚Äî {expense['date']}\n\n"
            
            text += f"üí∏ <b>–ò—Ç–æ–≥–æ: {month_data['total_amount']} —Ä—É–±.</b>"
            
            await update.message.reply_text(text, parse_mode='HTML')
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –ø—Ä–∏—Ö–æ–¥—ã –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª|–ø—Ä–∏—Ö–æ–¥—ã –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª|–¥–æ—Ö–æ–¥—ã –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª|–ø–æ–∫–∞–∂–∏ –¥–æ—Ö–æ–¥—ã –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª: {user_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_match = re.search(r"–ø—Ä–æ–µ–∫—Ç[–∞]?\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        project = project_match.group(1).strip() if project_match else None
        
        quarter_data = finances.get_income_for_quarter(project=project)
        
        if not quarter_data['income_list']:
            project_text = f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'" if project else ""
            await update.message.reply_text(f"–ü—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ {quarter_data['period']}{project_text} –Ω–µ—Ç.")
        else:
            text = f"üí∞ –ü—Ä–∏—Ö–æ–¥—ã –∑–∞ {quarter_data['period']}"
            if project:
                text += f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'"
            text += f":\n\n"
            
            for income in quarter_data['income_list']:
                text += f"üìà {income['amount']} —Ä—É–±. ({income['project']})\n"
                text += f"   {income['description']} ‚Äî {income['date']}\n\n"
            
            text += f"üíµ <b>–ò—Ç–æ–≥–æ: {quarter_data['total_amount']} —Ä—É–±.</b>"
            
            await update.message.reply_text(text, parse_mode='HTML')
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª
    if re.search(r"(–ø–æ–∫–∞–∂–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª|—Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª|–ø–æ–∫–∞–∂–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª|—Ç—Ä–∞—Ç—ã –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª: {user_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_match = re.search(r"–ø—Ä–æ–µ–∫—Ç[–∞]?\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        project = project_match.group(1).strip() if project_match else None
        
        quarter_data = finances.get_expense_for_quarter(project=project)
        
        if not quarter_data['expense_list']:
            project_text = f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'" if project else ""
            await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {quarter_data['period']}{project_text} –Ω–µ—Ç.")
        else:
            text = f"üí∏ –†–∞—Å—Ö–æ–¥—ã –∑–∞ {quarter_data['period']}"
            if project:
                text += f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'"
            text += f":\n\n"
            
            for expense in quarter_data['expense_list']:
                category_text = f" [{expense.get('category', '–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}]" if expense.get('category') else ""
                text += f"üìâ {expense['amount']} —Ä—É–±. ({expense['project']}){category_text}\n"
                text += f"   {expense['description']} ‚Äî {expense['date']}\n\n"
            
            text += f"üí∏ <b>–ò—Ç–æ–≥–æ: {quarter_data['total_amount']} —Ä—É–±.</b>"
            
            await update.message.reply_text(text, parse_mode='HTML')
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –≥–æ–¥
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –ø—Ä–∏—Ö–æ–¥—ã –∑–∞ –≥–æ–¥|–ø—Ä–∏—Ö–æ–¥—ã –∑–∞ –≥–æ–¥|–¥–æ—Ö–æ–¥—ã –∑–∞ –≥–æ–¥|–ø–æ–∫–∞–∂–∏ –¥–æ—Ö–æ–¥—ã –∑–∞ –≥–æ–¥)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ –≥–æ–¥: {user_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_match = re.search(r"–ø—Ä–æ–µ–∫—Ç[–∞]?\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        project = project_match.group(1).strip() if project_match else None
        
        year_data = finances.get_income_for_year(project=project)
        
        if not year_data['income_list']:
            project_text = f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'" if project else ""
            await update.message.reply_text(f"–ü—Ä–∏—Ö–æ–¥–æ–≤ –∑–∞ {year_data['period']} –≥–æ–¥{project_text} –Ω–µ—Ç.")
        else:
            text = f"üí∞ –ü—Ä–∏—Ö–æ–¥—ã –∑–∞ {year_data['period']} –≥–æ–¥"
            if project:
                text += f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'"
            text += f":\n\n"
            
            for income in year_data['income_list']:
                text += f"üìà {income['amount']} —Ä—É–±. ({income['project']})\n"
                text += f"   {income['description']} ‚Äî {income['date']}\n\n"
            
            text += f"üíµ <b>–ò—Ç–æ–≥–æ: {year_data['total_amount']} —Ä—É–±.</b>"
            
            await update.message.reply_text(text, parse_mode='HTML')
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –≥–æ–¥
    if re.search(r"(–ø–æ–∫–∞–∂–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –≥–æ–¥|—Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –≥–æ–¥|–ø–æ–∫–∞–∂–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –≥–æ–¥|—Ç—Ä–∞—Ç—ã –∑–∞ –≥–æ–¥)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –≥–æ–¥: {user_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_match = re.search(r"–ø—Ä–æ–µ–∫—Ç[–∞]?\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        project = project_match.group(1).strip() if project_match else None
        
        year_data = finances.get_expense_for_year(project=project)
        
        if not year_data['expense_list']:
            project_text = f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'" if project else ""
            await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {year_data['period']} –≥–æ–¥{project_text} –Ω–µ—Ç.")
        else:
            text = f"üí∏ –†–∞—Å—Ö–æ–¥—ã –∑–∞ {year_data['period']} –≥–æ–¥"
            if project:
                text += f" –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project}'"
            text += f":\n\n"
            
            for expense in year_data['expense_list']:
                category_text = f" [{expense.get('category', '–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}]" if expense.get('category') else ""
                text += f"üìâ {expense['amount']} —Ä—É–±. ({expense['project']}){category_text}\n"
                text += f"   {expense['description']} ‚Äî {expense['date']}\n\n"
            
            text += f"üí∏ <b>–ò—Ç–æ–≥–æ: {year_data['total_amount']} —Ä—É–±.</b>"
            
            await update.message.reply_text(text, parse_mode='HTML')
        return
    
    # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É
    if re.search(r"(–Ω–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.*–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç|–ø–æ–∏—Å–∫.*–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç|–¥–æ–∫—É–º–µ–Ω—Ç—ã.*–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É: {user_text}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
        counterparty_match = re.search(r"–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç[–∞]?\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        if counterparty_match:
            counterparty_name = counterparty_match.group(1).strip()
            found_docs = finances.search_documents_by_counterparty(counterparty_name)
            
            if not found_docs:
                await update.message.reply_text(f"–î–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ '{counterparty_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                text = f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ '{counterparty_name}' ({len(found_docs)}):\n\n"
                for doc in found_docs:
                    text += f"üìã {doc['type'].title()} ‚Ññ{doc['number']} –æ—Ç {doc['date']}\n"
                    text += f"   ID: {doc['id']}\n"
                    if doc.get('amount'):
                        text += f"   –°—É–º–º–∞: {doc['amount']} —Ä—É–±.\n"
                    if doc.get('description'):
                        text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {doc['description']}\n"
                    if doc.get('file_url'):
                        text += f"   üìé –§–∞–π–ª: {doc['file_url']}\n"
                    text += "\n"
                
                await update.message.reply_text(text)
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–ù–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ [–Ω–∞–∑–≤–∞–Ω–∏–µ]'")
        return
    
    # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if re.search(r"(–Ω–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.*–ø—Ä–æ|–ø–æ–∏—Å–∫.*–¥–æ–∫—É–º–µ–Ω—Ç—ã.*–ø—Ä–æ|–¥–æ–∫—É–º–µ–Ω—Ç—ã.*–ø—Ä–æ)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {user_text}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords_match = re.search(r"–ø—Ä–æ\s+([–∞-—è—ëa-z0-9\s]+)", user_text, re.I)
        if keywords_match:
            keywords = keywords_match.group(1).strip().split()
            found_docs = finances.search_documents_by_keywords(keywords)
            
            if not found_docs:
                await update.message.reply_text(f"–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º '{', '.join(keywords)}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                text = f"üîç –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º '{', '.join(keywords)}' ({len(found_docs)}):\n\n"
                for doc in found_docs:
                    text += f"üìã {doc['type'].title()} ‚Ññ{doc['number']} –æ—Ç {doc['date']}\n"
                    text += f"   ID: {doc['id']}\n"
                    if doc.get('counterparty_name'):
                        text += f"   –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {doc['counterparty_name']}\n"
                    if doc.get('amount'):
                        text += f"   –°—É–º–º–∞: {doc['amount']} —Ä—É–±.\n"
                    if doc.get('description'):
                        text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {doc['description']}\n"
                    text += "\n"
                
                await update.message.reply_text(text)
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–ù–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ [–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞]'")
        return
    
    # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ
    if re.search(r"(–Ω–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.*—Å—É–º–º–∞|–¥–æ–∫—É–º–µ–Ω—Ç—ã.*—Å—É–º–º–∞|–ø–æ–∏—Å–∫.*—Å—É–º–º–∞)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ: {user_text}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É
        amount_match = re.search(r"—Å—É–º–º–∞[–∞]?\s+(?:–æ—Ç\s+)?(\d+)(?:\s+–¥–æ\s+(\d+))?", user_text, re.I)
        if amount_match:
            min_amount = int(amount_match.group(1))
            max_amount = int(amount_match.group(2)) if amount_match.group(2) else None
            
            found_docs = finances.search_documents_by_amount(min_amount, max_amount)
            
            if not found_docs:
                range_text = f"–æ—Ç {min_amount}" + (f" –¥–æ {max_amount}" if max_amount else "")
                await update.message.reply_text(f"–î–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ —Å—É–º–º–æ–π {range_text} —Ä—É–±. –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                range_text = f"–æ—Ç {min_amount}" + (f" –¥–æ {max_amount}" if max_amount else "")
                text = f"üí∞ –î–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ —Å—É–º–º–æ–π {range_text} —Ä—É–±. ({len(found_docs)}):\n\n"
                for doc in found_docs:
                    text += f"üìã {doc['type'].title()} ‚Ññ{doc['number']} –æ—Ç {doc['date']}\n"
                    text += f"   ID: {doc['id']}\n"
                    text += f"   –°—É–º–º–∞: {doc['amount']} —Ä—É–±.\n"
                    if doc.get('counterparty_name'):
                        text += f"   –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {doc['counterparty_name']}\n"
                    text += "\n"
                
                await update.message.reply_text(text)
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–ù–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å—É–º–º–∞ –æ—Ç 100000 –¥–æ 500000' –∏–ª–∏ '–ù–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å—É–º–º–∞ –æ—Ç 100000'")
        return
    
    # –°–≤–æ–¥–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
    if re.search(r"(—Å–≤–æ–¥–∫–∞.*–¥–æ–∫—É–º–µ–Ω—Ç—ã|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.*–¥–æ–∫—É–º–µ–Ω—Ç—ã|–¥–æ–∫—É–º–µ–Ω—Ç—ã.*—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)", user_text, re.I):
        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É —Å–≤–æ–¥–∫–∏ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º: {user_text}")
        
        summary = finances.get_documents_summary()
        
        text = f"üìä –°–≤–æ–¥–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º:\n\n"
        text += f"üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {summary['total_documents']}\n"
        text += f"üìé –° —Ñ–∞–π–ª–∞–º–∏: {summary['with_files']}\n"
        text += f"üìÑ –ë–µ–∑ —Ñ–∞–π–ª–æ–≤: {summary['without_files']}\n"
        text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {summary['total_amount']} —Ä—É–±.\n\n"
        
        text += f"üìã –ü–æ —Ç–∏–ø–∞–º:\n"
        for doc_type, count in summary['by_type'].items():
            text += f"   {doc_type.title()}: {count}\n"
        
        await update.message.reply_text(text)
        return
    
    # RAG –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if re.search(r"(–Ω–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç|–ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤|—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫|rag –ø–æ–∏—Å–∫)", user_text, re.I):
        await handle_rag_search(update, context)
        return
    
    # –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if re.search(r"(–Ω–∞–π–¥–∏ –ø–æ —Ç–∏–ø—É|–ø–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É|–¥–æ–∫—É–º–µ–Ω—Ç—ã —Ç–∏–ø–∞)", user_text, re.I):
        await handle_search_by_type(update, context)
        return
    
    # –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É
    if re.search(r"(–Ω–∞–π–¥–∏ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É|–ø–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É|–¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞)", user_text, re.I):
        await handle_search_by_counterparty(update, context)
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã
    if re.search(r"(—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rag|rag —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|—Å—Ç–∞—Ç—É—Å rag)", user_text, re.I):
        await handle_rag_stats(update, context)
        return
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ü–µ–ª–µ–π –∏ KPI
    if re.search(r"(—Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å|–Ω–æ–≤–∞—è —Ü–µ–ª—å|–¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å)", user_text, re.I):
        await handle_create_goal(update, context)
        return
    
    if re.search(r"(–ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏|—Å—Ç–∞—Ç—É—Å —Ü–µ–ª–∏|–∫–∞–∫ –¥–µ–ª–∞ —Å —Ü–µ–ª—å—é)", user_text, re.I):
        await handle_goal_progress(update, context)
        return
    
    if re.search(r"(–ø–æ–∫–∞–∂–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª—è–º|–ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª—è–º|–ø–æ–∫–∞–∂–∏ okr|–ø–æ–∫–∞–∂–∏ kpi)", user_text, re.I):
        await handle_goals_progress_summary(update, context)
        return
    
    if re.search(r"(–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å|–æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å|–ø—Ä–æ–≥—Ä–µ—Å—Å)", user_text, re.I):
        await handle_update_goal_progress(update, context)
        return
    
    if re.search(r"(–≤—Å–µ —Ü–µ–ª–∏|—Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π|–º–æ–∏ —Ü–µ–ª–∏)", user_text, re.I):
        await handle_list_goals(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    if context.user_data.get('processed_document'):
        await handle_document_action(update, context)
        return
    
    # Email –∫–æ–º–∞–Ω–¥—ã
    if re.search(r"(—Å–≤–æ–¥–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö|–≤—Ö–æ–¥—è—â–∏–µ|email —Å–≤–æ–¥–∫–∞|–ø–æ—á—Ç–∞ —Å–≤–æ–¥–∫–∞)", user_text, re.I):
        await handle_email_summary(update, context)
        return
    
    if re.search(r"(—Å—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è|–æ–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞|–≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è|email –ª–∏–Ω–∑—ã)", user_text, re.I):
        await handle_email_lens(update, context)
        return
    
    if re.search(r"(—à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞|–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞|reply template)", user_text, re.I):
        await handle_reply_template(update, context)
        return
    
    if re.search(r"(–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ email|email –Ω–∞—Å—Ç—Ä–æ–π–∫–∞|–∫–æ–Ω—Ñ–∏–≥ email)", user_text, re.I):
        await handle_email_config(update, context)
        return
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–∞–º—è—Ç—å: —á—Ç–æ —Ä–µ—à–∏–ª–∏ —Å ...
    if re.search(r"—á—Ç–æ —Ä–µ—à–∏–ª–∏ —Å (.+)", user_text, re.I):
        await handle_what_decided(update, context)
        return
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–∞–º—è—Ç—å: —Å –∫–µ–º –æ–±—Å—É–∂–¥–∞–ª–∏ ...
    if re.search(r"—Å –∫–µ–º –æ–±—Å—É–∂–¥–∞–ª–∏ (.+)", user_text, re.I):
        await handle_who_discussed(update, context)
        return

    # –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å–µ—Ç—å
    if re.search(r"(–ø–∞—Ä—Ç–Ω—ë—Ä—ã —Å–≤–æ–¥–∫–∞|—Å–≤–æ–¥–∫–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤|partners summary)", user_text, re.I):
        await handle_partners_summary(update, context)
        return
    
    if re.search(r"–¥–æ–±–∞–≤—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞", user_text, re.I):
        await handle_add_partner(update, context)
        return
    
    if re.search(r"(–ø–∞—Ä—Ç–Ω—ë—Ä—ã –¥–ª—è –ø—Ä–æ–∑–≤–æ–Ω–∞|–ø—Ä–æ–∑–≤–æ–Ω|–∑–≤–æ–Ω–∏—Ç—å)", user_text, re.I):
        await handle_partners_for_calling(update, context)
        return
    
    if re.search(r"(–ø–∞—Ä—Ç–Ω—ë—Ä—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏|email —Ä–∞—Å—Å—ã–ª–∫–∞|—Ä–∞—Å—Å—ã–ª–∫–∞)", user_text, re.I):
        await handle_partners_for_emailing(update, context)
        return
    
    if re.search(r"(–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è|proposal –¥–ª—è)", user_text, re.I):
        await handle_generate_proposal(update, context)
        return
    
    if re.search(r"(–º–∞—Å—Å–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è|bulk proposals|–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã)", user_text, re.I):
        await handle_bulk_proposals(update, context)
        return

    # AmoCRM –∫–æ–º–∞–Ω–¥—ã
    if re.search(r"(–∫–æ–Ω—Ç–∞–∫—Ç—ã amocrm|amocrm –∫–æ–Ω—Ç–∞–∫—Ç—ã|–∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ crm)", user_text, re.I):
        await handle_amocrm_contacts(update, context)
        return
    
    if re.search(r"(—Å–¥–µ–ª–∫–∏ amocrm|amocrm —Å–¥–µ–ª–∫–∏|–ª–∏–¥—ã –≤ crm)", user_text, re.I):
        await handle_amocrm_leads(update, context)
        return
    
    if re.search(r"(–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ amocrm|amocrm –∞–Ω–∞–ª–∏—Ç–∏–∫–∞|crm –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)", user_text, re.I):
        await handle_amocrm_analytics(update, context)
        return
    
    if re.search(r"(—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è amocrm|amocrm —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è|—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤)", user_text, re.I):
        await handle_amocrm_sync_partners(update, context)
        return
    
    if re.search(r"(—Å–æ–∑–¥–∞–π –∫–æ–Ω—Ç–∞–∫—Ç|–¥–æ–±–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç)", user_text, re.I):
        await handle_amocrm_create_contact(update, context)
        return
    
    if re.search(r"(—Å–æ–∑–¥–∞–π —Å–¥–µ–ª–∫—É|–¥–æ–±–∞–≤—å —Å–¥–µ–ª–∫—É)", user_text, re.I):
        await handle_amocrm_create_lead(update, context)
        return
    
    if re.search(r"(–≤–æ—Ä–æ–Ω–∫–∏ amocrm|amocrm –≤–æ—Ä–æ–Ω–∫–∏|–≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂)", user_text, re.I):
        await handle_amocrm_pipelines(update, context)
        return
    
    if re.search(r"(–∑–∞–¥–∞—á–∏ amocrm|amocrm –∑–∞–¥–∞—á–∏|–∑–∞–¥–∞—á–∏ –≤ crm)", user_text, re.I):
        await handle_amocrm_tasks(update, context)
        return

    # Obsidian –∫–æ–º–∞–Ω–¥—ã
    if re.search(r"(—Å–æ–∑–¥–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é|–Ω–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è|–¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é)", user_text, re.I):
        await handle_create_strategy(update, context)
        return
    
    if re.search(r"(—Å–æ–∑–¥–∞–π —Ä–µ—à–µ–Ω–∏–µ|–Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ|–¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ)", user_text, re.I):
        await handle_create_decision(update, context)
        return
    
    if re.search(r"(–Ω–∞–π–¥–∏ –∑–∞–º–µ—Ç–∫–∏|–ø–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫|–ø–æ–∏—Å–∫ –≤ obsidian|obsidian –ø–æ–∏—Å–∫)", user_text, re.I):
        await handle_obsidian_search(update, context)
        return
    
    if re.search(r"(—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ obsidian|obsidian —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–µ—Ç–æ–∫)", user_text, re.I):
        await handle_obsidian_stats(update, context)
        return

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    if re.search(r"(–¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞|–¥–æ–±–∞–≤—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞|–Ω–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)", user_text, re.I):
        await handle_add_employee(update, context)
        return
    
    if re.search(r"(–Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É|–Ω–∞–∑–Ω–∞—á–∏ –∑–∞–¥–∞—á—É|–ø–æ—Ä—É—á–∏ –∑–∞–¥–∞—á—É)", user_text, re.I):
        await handle_assign_task(update, context)
        return
    
    if re.search(r"(–º–æ–∏ –∑–∞–¥–∞—á–∏|–ø–æ–∫–∞–∂–∏ –º–æ–∏ –∑–∞–¥–∞—á–∏|–∑–∞–¥–∞—á–∏ –¥–ª—è –º–µ–Ω—è)", user_text, re.I):
        await handle_my_tasks(update, context)
        return
    
    if re.search(r"(–∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É|–∑–∞–≤–µ—Ä—à–∏ –∑–∞–¥–∞—á—É|–∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)", user_text, re.I):
        await handle_complete_task(update, context)
        return
    
    if re.search(r"(–æ—Ç—á—ë—Ç:|–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç|–¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç)", user_text, re.I):
        await handle_daily_report(update, context)
        return
    
    if re.search(r"(—Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã|–∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å|–ø–æ–∫–∞–∂–∏ –∫–æ–º–∞–Ω–¥—É)", user_text, re.I):
        await handle_team_status(update, context)
        return
    
    if re.search(r"(–≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ø—É—Å–∫–∞|—Ä–µ–∂–∏–º –æ—Ç–ø—É—Å–∫–∞|–≤–ª–∞–¥–µ–ª–µ—Ü –≤ –æ—Ç–ø—É—Å–∫–µ)", user_text, re.I):
        await handle_vacation_mode(update, context)
        return
    
    if re.search(r"(–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏|–∑–∞–¥–∞—á–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã|overdue tasks)", user_text, re.I):
        await handle_overdue_tasks(update, context)
        return

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if re.search(r"(–∫–æ–Ω—Ç—Ä–æ–ª—å –ø–ª–∞—Ç–µ–∂–µ–π|–æ—Ç—á—ë—Ç –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—é|–¥–µ–Ω—å–≥–∏ –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤|–ø–ª–∞—Ç–µ–∂–∏ –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)", user_text, re.I):
        await handle_payment_control_report(update, context)
        return
    
    if re.search(r"(–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è|—Å–≤–æ–¥–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è|–∫–æ–Ω—Ç—Ä–æ–ª—å —Å–≤–æ–¥–∫–∞)", user_text, re.I):
        await handle_weekly_control_summary(update, context)
        return
    
    if re.search(r"(–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è|–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏|–∫—Ä–∏—Ç–∏—á–Ω–æ)", user_text, re.I):
        await handle_critical_alerts(update, context)
        return
    
    if re.search(r"(–Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –ø–ª–∞—Ç–µ–∂–∏|–ø–ª–∞—Ç–µ–∂–∏ –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤|–Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)", user_text, re.I):
        await handle_unclosed_payments_report(update, context)
        return
    
    if re.search(r"(–¥–æ–∫—É–º–µ–Ω—Ç—ã –±–µ–∑ –æ–ø–ª–∞—Ç—ã|–¥–æ–∫—É–º–µ–Ω—Ç—ã –±–µ–∑ –ø–ª–∞—Ç–µ–∂–µ–π|–Ω–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è)", user_text, re.I):
        await handle_orphaned_documents_report(update, context)
        return

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if re.search(r"(—Å–≤–æ–¥–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö|–≤—Ö–æ–¥—è—â–∏–µ —Å–≤–æ–¥–∫–∞|–∫–æ–Ω—Ç—Ä–æ–ª—å –≤—Ö–æ–¥—è—â–∏—Ö|inbox summary)", user_text, re.I):
        await handle_inbox_summary(update, context)
        return
    
    if re.search(r"(—Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è|–≤–Ω–∏–º–∞–Ω–∏–µ|attention messages)", user_text, re.I):
        await handle_attention_messages(update, context)
        return
    
    if re.search(r"(–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã|–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞|overdue responses)", user_text, re.I):
        await handle_overdue_responses(update, context)
        return
    
    if re.search(r"(–∑–∞–±—ã—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è|–∑–∞–±—ã—Ç–æ|forgotten messages)", user_text, re.I):
        await handle_forgotten_messages(update, context)
        return
    
    if re.search(r"(–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π|–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è|reminder suggestions)", user_text, re.I):
        await handle_reminder_suggestions(update, context)
        return
    
    if re.search(r"–æ—Ç–º–µ—Ç–∏—Ç—å –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–º ([a-zA-Z0-9_-]+)", user_text, re.I):
        await handle_mark_responded(update, context)
        return
    
    if re.search(r"–æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º ([a-zA-Z0-9_-]+)", user_text, re.I):
        await handle_mark_ignored(update, context)
        return
    
    if re.search(r"–¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", user_text, re.I):
        await handle_add_message(update, context)
        return

    # --- –†–µ–∂–∏–º "–ê–Ω—Ç–∏—Ä–∞–∑—Ä—ã–≤" ---
    if re.search(r"(—É—Å—Ç–∞–ª|–∞–Ω—Ç–∏—Ä–∞–∑—Ä—ã–≤|—Å—Ç—Ä–µ—Å—Å|–≤—Å[–µ—ë] –≥–æ—Ä–∏—Ç|—Å–∏–ª –Ω–µ—Ç)", user_text, re.I):
        await handle_antistress_mode(update, context)
        return

    # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—Å—Ç—Ä–µ—á–µ ---
    if re.search(r"(–ø–æ–¥–≥–æ—Ç–æ–≤—å –∏–Ω—Ñ—É|–ø–æ–¥–≥–æ—Ç–æ–≤—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ|–∏–Ω—Ñ–∞ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏)", user_text, re.I):
        await handle_meeting_prep(update, context)
        return

    # –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞—á–∞ –∏ –Ω–µ —Ñ–∏–Ω–∞–Ω—Å—ã ‚Äî fallback –Ω–∞ GPT-–æ—Ç–≤–µ—Ç
    reply = await ask_openai(user_text)
    await update.message.reply_text(reply)

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–π –ø–∞–º—è—Ç–∏
    if re.search(r"(–≥–¥–µ –æ–±—Å—É–∂–¥–∞–ª–∏|–Ω–∞–π–¥–∏ —Ñ–∞–π–ª|–Ω–∞–π–¥–∏ |–ø–æ–∏—Å–∫ )", user_text, re.I):
        await handle_global_search(update, context)
        return

    # –ü—Ä–æ–≥–Ω–æ–∑ cash flow
    if re.search(r"(–ø—Ä–æ–≥–Ω–æ–∑ cash ?flow|–Ω–∞ —Å–∫–æ–ª—å–∫–æ —Ö–≤–∞—Ç–∏—Ç –¥–µ–Ω–µ–≥|–¥–µ–Ω–µ–≥ —Ö–≤–∞—Ç–∏—Ç –Ω–∞)", user_text, re.I):
        await handle_cashflow_forecast(update, context)
        return

    # –ú—É–ª—å—Ç–∏–¥–∞—à–±–æ—Ä–¥ /–¥–∞–π–¥–∂–µ—Å—Ç –∏ "—á—Ç–æ —É –Ω–∞—Å"
    if re.search(r"(/–¥–∞–π–¥–∂–µ—Å—Ç|—á—Ç–æ —É –Ω–∞—Å\??)", user_text, re.I):
        await handle_digest(update, context)
        return

    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞ ---
    STATE_FILE = 'bot_state.json'

    def get_bot_state():
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
        if not os.path.exists(STATE_FILE):
            return {}
        with open(STATE_FILE, 'r') as f:
            return json.load(f)

    def save_bot_state(state):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª."""
        with open(STATE_FILE, 'w') as f:
            json.dump(state, f, indent=4)

    def set_quiet_mode(chat_id: int, enabled: bool):
        """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è —á–∞—Ç–∞."""
        state = get_bot_state()
        if 'quiet_mode' not in state:
            state['quiet_mode'] = {}
        state['quiet_mode'][str(chat_id)] = enabled
        save_bot_state(state)

    def is_quiet_mode_enabled(chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è —á–∞—Ç–∞."""
        state = get_bot_state()
        return state.get('quiet_mode', {}).get(str(chat_id), False)

    async def handle_document_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º."""
        user_text = update.message.text.lower()
        
        if 'processed_document' not in context.user_data:
            await update.message.reply_text("‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            return
        
        doc_data = context.user_data['processed_document']
        
        try:
            if '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å pdf' in user_text:
                # –°–æ–∑–¥–∞–µ–º PDF –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π
                pdf_path = f"/tmp/doc_{doc_data['timestamp']}.pdf"
                success = image_processor.create_pdf_from_image(doc_data['image_path'], pdf_path)
                
                if success:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Google Drive
                    drive_result = drive_manager.upload_file(pdf_path, f"doc_{doc_data['timestamp']}.pdf")
                    
                    if drive_result and 'id' in drive_result:
                        await update.message.reply_text(
                            f"‚úÖ PDF —Å–æ–∑–¥–∞–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive\n"
                            f"üìÅ ID —Ñ–∞–π–ª–∞: {drive_result['id']}\n"
                            f"üìÑ –ò–º—è: {drive_result.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
                        )
                    else:
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Drive")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF")
            
            elif '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç' in user_text:
                # –°–æ–∑–¥–∞–µ–º PDF –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                pdf_path = f"/tmp/doc_text_{doc_data['timestamp']}.pdf"
                title = f"{doc_data['doc_info']['type'].title()} {doc_data['doc_info']['number'] or ''}"
                success = image_processor.create_pdf_from_text(doc_data['text'], pdf_path, title)
                
                if success:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Google Drive
                    drive_result = drive_manager.upload_file(pdf_path, f"doc_text_{doc_data['timestamp']}.pdf")
                    
                    if drive_result and 'id' in drive_result:
                        await update.message.reply_text(
                            f"‚úÖ PDF –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive\n"
                            f"üìÅ ID —Ñ–∞–π–ª–∞: {drive_result['id']}\n"
                            f"üìÑ –ò–º—è: {drive_result.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
                        )
                    else:
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Drive")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF –∏–∑ —Ç–µ–∫—Å—Ç–∞")
            
            elif '–¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É' in user_text:
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º—É
                doc_info = doc_data['doc_info']
                
                if doc_info['type'] and doc_info['type'] != '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                    # –°–æ–∑–¥–∞–µ–º PDF –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                    pdf_path = f"/tmp/doc_final_{doc_data['timestamp']}.pdf"
                    image_processor.images_to_pdf([doc_data['image_path']], pdf_path)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                    doc_id = add_document(
                        doc_type=doc_info['type'],
                        counterparty_name=doc_info['counterparty'] or '–ù–µ —É–∫–∞–∑–∞–Ω',
                        amount=doc_info['amount'] or 0,
                        date=doc_info['date'] or datetime.now().strftime('%Y-%m-%d'),
                        description=f"–î–æ–∫—É–º–µ–Ω—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {doc_info['confidence']}%",
                        file_path=pdf_path
                    )
                    
                    if doc_id:
                        await update.message.reply_text(
                            f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É!\n"
                            f"üìÑ ID: {doc_id}\n"
                            f"üìã –¢–∏–ø: {doc_info['type'].title()}\n"
                            f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {doc_info['confidence']}%"
                        )
                    else:
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º—É")
                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É")
            
            elif '–æ—Ç–º–µ–Ω–∞' in user_text:
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                del context.user_data['processed_document']
                await update.message.reply_text("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            
            else:
                await update.message.reply_text(
                    "üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
                    "‚Ä¢ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF' - —Å–æ–∑–¥–∞—Ç—å PDF –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
                    "‚Ä¢ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç' - —Å–æ–∑–¥–∞—Ç—å PDF –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞\n"
                    "‚Ä¢ '–î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É' - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º—É\n"
                    "‚Ä¢ '–û—Ç–º–µ–Ω–∞' - –æ—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"
                )
        
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {e}")

    # --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ü–µ–ª–µ–π –∏ KPI ---
    async def handle_create_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏."""
        user_text = update.message.text
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏
        # –ü—Ä–∏–º–µ—Ä: "–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å –≤—ã—Ä—É—á–∫–∞ 3 –º–ª–Ω –¥–æ —Å–µ–Ω—Ç—è–±—Ä—è"
        goal_match = re.search(r"(?:—Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å|–Ω–æ–≤–∞—è —Ü–µ–ª—å|–¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å)\s+(.+?)\s+(\d+(?:\.\d+)?)\s*(–º–ª–Ω|—Ç—ã—Å|—Ä—É–±|%|—à—Ç|–∫–ª–∏–µ–Ω—Ç–æ–≤?)?(?:\s+–¥–æ\s+(.+))?", user_text, re.I)
        
        if not goal_match:
            await update.message.reply_text(
                "üéØ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                "‚Ä¢ '–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–∑–Ω–∞—á–µ–Ω–∏–µ] [–µ–¥–∏–Ω–∏—Ü–∞] –¥–æ [–¥–∞—Ç–∞]'\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å –≤—ã—Ä—É—á–∫–∞ 3 –º–ª–Ω –¥–æ —Å–µ–Ω—Ç—è–±—Ä—è\n"
                "‚Ä¢ –ù–æ–≤–∞—è —Ü–µ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏ 100 –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–æ –¥–µ–∫–∞–±—Ä—è\n"
                "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ 1000 —à—Ç –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞",
                parse_mode='HTML'
            )
            return
        
        goal_name = goal_match.group(1).strip()
        target_value = float(goal_match.group(2))
        unit = goal_match.group(3) or ""
        end_date_str = goal_match.group(4)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ü–µ–ª–∏
        goal_type = GoalType.CUSTOM
        if any(word in goal_name.lower() for word in ['–≤—ã—Ä—É—á–∫–∞', '–¥–æ—Ö–æ–¥', '–ø—Ä–∏–±—ã–ª—å', '–º–ª–Ω', '—Ç—ã—Å']):
            goal_type = GoalType.REVENUE
        elif any(word in goal_name.lower() for word in ['–ø–æ–¥–ø–∏—Å–∫', '–∫–ª–∏–µ–Ω—Ç', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']):
            goal_type = GoalType.SUBSCRIPTIONS
        elif any(word in goal_name.lower() for word in ['–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–ø—Ä–æ–¥—É–∫—Ç', '—à—Ç', '–µ–¥–∏–Ω–∏—Ü']):
            goal_type = GoalType.PRODUCTION
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        end_date = None
        if end_date_str:
            end_date = parse_natural_date(end_date_str)
            if end_date:
                end_date = end_date.strftime('%Y-%m-%d')
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª—å
            goal_id = goals_manager.create_goal(
                name=goal_name,
                description=f"–¶–µ–ª—å: {goal_name} {target_value}{unit}",
                goal_type=goal_type,
                target_value=target_value,
                end_date=end_date
            )
            
            await update.message.reply_text(
                f"‚úÖ <b>–¶–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ: {goal_name}\n"
                f"üìä –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {target_value}{unit}\n"
                f"üìÖ –°—Ä–æ–∫: {end_date or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üÜî ID: {goal_id}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                f"‚Ä¢ '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ {goal_name}' - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
                f"‚Ä¢ '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å {goal_name} [–∑–Ω–∞—á–µ–Ω–∏–µ]' - –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å",
                parse_mode='HTML'
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏: {e}")

    async def handle_goal_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ü–µ–ª–∏."""
        user_text = update.message.text
        
        # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        # –ü—Ä–∏–º–µ—Ä: "–ö–∞–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ 3 –º–ª–Ω –≤—ã—Ä—É—á–∫–∏ –¥–æ —Å–µ–Ω—Ç—è–±—Ä—è?"
        progress_match = re.search(r"(?:–ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏|—Å—Ç–∞—Ç—É—Å —Ü–µ–ª–∏|–∫–∞–∫ –¥–µ–ª–∞ —Å —Ü–µ–ª—å—é)\s+(.+?)(?:\s+–¥–æ\s+(.+))?", user_text, re.I)
        
        if not progress_match:
            await update.message.reply_text(
                "üìä <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ü–µ–ª–∏</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ [–Ω–∞–∑–≤–∞–Ω–∏–µ]' - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
                "‚Ä¢ '–°—Ç–∞—Ç—É—Å —Ü–µ–ª–∏ [–Ω–∞–∑–≤–∞–Ω–∏–µ]' - –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ –≤—ã—Ä—É—á–∫–∞ 3 –º–ª–Ω\n"
                "‚Ä¢ –°—Ç–∞—Ç—É—Å —Ü–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ 100 –∫–ª–∏–µ–Ω—Ç–æ–≤",
                parse_mode='HTML'
            )
            return
        
        goal_query = progress_match.group(1).strip()
        
        try:
            # –ò—â–µ–º —Ü–µ–ª—å
            goals = goals_manager.search_goals(goal_query)
            
            if not goals:
                await update.message.reply_text(f"üîç –¶–µ–ª—å '{goal_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ü–µ–ª—å
            goal = goals[0]
            progress_data = goals_manager.get_goal_progress(goal.id)
            
            if not progress_data:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Ü–µ–ª–∏ '{goal.name}'")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏: {goal.name}</b>\n\n"
            report += f"üéØ –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {goal.target_value}\n"
            report += f"üìà –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {goal.current_value}\n"
            report += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_data['progress_percentage']}%\n"
            report += f"üìâ –û—Å—Ç–∞–ª–æ—Å—å: {progress_data['remaining']}\n\n"
            
            # –¢—Ä–µ–Ω–¥
            trend = progress_data['trend']
            trend_emoji = "üìà" if trend['direction'] == 'increasing' else "üìâ" if trend['direction'] == 'decreasing' else "‚û°Ô∏è"
            report += f"{trend_emoji} <b>–¢—Ä–µ–Ω–¥:</b> {trend['direction']} ({trend['rate']}/–¥–µ–Ω—å)\n"
            
            # –ü—Ä–æ–≥–Ω–æ–∑
            forecast = progress_data['forecast']
            if forecast['achievable']:
                report += f"‚úÖ <b>–ü—Ä–æ–≥–Ω–æ–∑:</b> –¶–µ–ª—å –¥–æ—Å—Ç–∏–∂–∏–º–∞\n"
                if forecast['estimated_completion']:
                    completion_date = datetime.fromisoformat(forecast['estimated_completion']).strftime('%d.%m.%Y')
                    report += f"üìÖ –û–∂–∏–¥–∞–µ–º–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {completion_date}\n"
            else:
                report += f"‚ö†Ô∏è <b>–ü—Ä–æ–≥–Ω–æ–∑:</b> –¶–µ–ª—å –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π\n"
                report += f"üìä –¢—Ä–µ–±—É–µ–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {forecast['required_rate']}/–¥–µ–Ω—å\n"
            
            # –°—Ç–∞—Ç—É—Å
            status_emoji = "üü¢" if progress_data['is_on_track'] else "üî¥"
            report += f"\n{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {'–ü–æ –ø–ª–∞–Ω—É' if progress_data['is_on_track'] else '–û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ'}"
            
            await update.message.reply_text(report, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

    async def handle_update_goal_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ü–µ–ª–∏."""
        user_text = update.message.text
        
        # –ü–∞—Ä—Å–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        # –ü—Ä–∏–º–µ—Ä: "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã—Ä—É—á–∫–∞ 2.5 –º–ª–Ω"
        update_match = re.search(r"(?:–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å|–æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å|–ø—Ä–æ–≥—Ä–µ—Å—Å)\s+(.+?)\s+(\d+(?:\.\d+)?)\s*(–º–ª–Ω|—Ç—ã—Å|—Ä—É–±|%|—à—Ç|–∫–ª–∏–µ–Ω—Ç–æ–≤?)?", user_text, re.I)
        
        if not update_match:
            await update.message.reply_text(
                "üìà <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ü–µ–ª–∏</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                "‚Ä¢ '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ] [–µ–¥–∏–Ω–∏—Ü–∞]'\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã—Ä—É—á–∫–∞ 2.5 –º–ª–Ω\n"
                "‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏ 75 –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
                "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ 800 —à—Ç",
                parse_mode='HTML'
            )
            return
        
        goal_query = update_match.group(1).strip()
        new_value = float(update_match.group(2))
        unit = update_match.group(3) or ""
        
        try:
            # –ò—â–µ–º —Ü–µ–ª—å
            goals = goals_manager.search_goals(goal_query)
            
            if not goals:
                await update.message.reply_text(f"üîç –¶–µ–ª—å '{goal_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ü–µ–ª—å
            goal = goals[0]
            old_value = goal.current_value
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            success = goals_manager.update_goal_progress(goal.id, new_value, f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram")
            
            if success:
                change = new_value - old_value
                change_emoji = "üìà" if change > 0 else "üìâ" if change < 0 else "‚û°Ô∏è"
                
                await update.message.reply_text(
                    f"‚úÖ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                    f"üéØ –¶–µ–ª—å: {goal.name}\n"
                    f"üìä –ë—ã–ª–æ: {old_value}\n"
                    f"üìà –°—Ç–∞–ª–æ: {new_value}\n"
                    f"{change_emoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change:+g}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ {goal.name}' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞",
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

    async def handle_list_goals(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ü–µ–ª–µ–π."""
        try:
            goals = goals_manager.get_active_goals()
            
            if not goals:
                await update.message.reply_text(
                    "üìã <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π</b>\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ü–µ–ª—å:\n"
                    "‚Ä¢ '–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å –≤—ã—Ä—É—á–∫–∞ 3 –º–ª–Ω –¥–æ —Å–µ–Ω—Ç—è–±—Ä—è'\n"
                    "‚Ä¢ '–ù–æ–≤–∞—è —Ü–µ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏ 100 –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–æ –¥–µ–∫–∞–±—Ä—è'",
                    parse_mode='HTML'
                )
                return
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ü–µ–ª–∏ –ø–æ —Ç–∏–ø—É
            goals_by_type = {}
            for goal in goals:
                goal_type = goal.goal_type.value
                if goal_type not in goals_by_type:
                    goals_by_type[goal_type] = []
                goals_by_type[goal_type].append(goal)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏ ({len(goals)}):</b>\n\n"
            
            for goal_type, type_goals in goals_by_type.items():
                type_emoji = {
                    'revenue': 'üí∞',
                    'subscriptions': 'üë•',
                    'production': 'üè≠',
                    'custom': 'üéØ'
                }.get(goal_type, 'ÔøΩÔøΩ')
                
                report += f"{type_emoji} <b>{goal_type.title()}:</b>\n"
                
                for goal in type_goals:
                    progress_data = goals_manager.get_goal_progress(goal.id)
                    progress_percent = progress_data['progress_percentage'] if progress_data else 0
                    
                    status_emoji = "üü¢" if progress_data and progress_data['is_on_track'] else "üî¥"
                    
                    report += f"  {status_emoji} {goal.name}: {goal.current_value}/{goal.target_value} ({progress_percent}%)\n"
                
                report += "\n"
            
            report += "üí° <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            report += "‚Ä¢ '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ [–Ω–∞–∑–≤–∞–Ω–∏–µ]' - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
            report += "‚Ä¢ '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–∑–Ω–∞—á–µ–Ω–∏–µ]' - –æ–±–Ω–æ–≤–∏—Ç—å\n"
            report += "‚Ä¢ '–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–∑–Ω–∞—á–µ–Ω–∏–µ] –¥–æ [–¥–∞—Ç–∞]' - –Ω–æ–≤–∞—è —Ü–µ–ª—å"
            
            await update.message.reply_text(report, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π: {e}")

    # --- –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–∞–º—è—Ç—å ---
    async def handle_what_decided(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_text = update.message.text
        match = re.search(r"—á—Ç–æ —Ä–µ—à–∏–ª–∏ —Å (.+)", user_text, re.I)
        if not match:
            await update.message.reply_text("–£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: '–ß—Ç–æ —Ä–µ—à–∏–ª–∏ —Å [—Ç–µ–º–∞/–æ–±—ä–µ–∫—Ç]'")
            return
        topic = match.group(1).strip()
        # –ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        messages = chat_memory.search(topic, limit=10)
        # –ü–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞—á–∞–º
        from core.planner import get_tasks
        tasks = [t for t in get_tasks() if topic.lower() in t['description'].lower()]
        # –ü–æ–∏—Å–∫ –ø–æ RAG (–¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø—Ä–æ—Ç–æ–∫–æ–ª—ã)
        from core.rag_system import rag_system
        rag_results = rag_system.search_documents(topic, n_results=3)
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        reply = f"üß† <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: {topic}</b>\n\n"
        if messages:
            reply += "üí¨ <b>–§—Ä–∞–≥–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–ø–∏—Å–∫–∏:</b>\n"
            for m in messages:
                reply += f"‚Äî {m['username']}: {m['text']}\n"
            reply += "\n"
        if tasks:
            reply += "üìã <b>–ó–∞–¥–∞—á–∏:</b>\n"
            for t in tasks:
                reply += f"‚Äî {t['description']} ({'‚úÖ' if t.get('completed') else '‚è≥'})\n"
            reply += "\n"
        if rag_results:
            reply += "üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã/–ø—Ä–æ—Ç–æ–∫–æ–ª—ã:</b>\n"
            for doc in rag_results:
                meta = doc.get('metadata', {})
                reply += f"‚Äî {meta.get('type', '–î–æ–∫—É–º–µ–Ω—Ç')}: {meta.get('title', '')} (ID: {doc['id']})\n"
            reply += "\n"
        if not (messages or tasks or rag_results):
            reply += "‚ùì –ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏–ª–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –ø–æ —Ç–µ–º–µ."
        await update.message.reply_text(reply, parse_mode='HTML')

    async def handle_who_discussed(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_text = update.message.text
        match = re.search(r"—Å –∫–µ–º –æ–±—Å—É–∂–¥–∞–ª–∏ (.+)", user_text, re.I)
        if not match:
            await update.message.reply_text("–£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: '–° –∫–µ–º –æ–±—Å—É–∂–¥–∞–ª–∏ [—Ç–µ–º–∞/–æ–±—ä–µ–∫—Ç]'")
            return
        topic = match.group(1).strip()
        # –ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        discussions = chat_memory.get_discussions_with(topic, limit=10)
        reply = f"üß† <b>–û–±—Å—É–∂–¥–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ: {topic}</b>\n\n"
        if discussions:
            for d in discussions:
                reply += f"üë§ <b>{d['username']}</b> —É—á–∞—Å—Ç–≤–æ–≤–∞–ª(–∞):\n"
                for m in d['messages'][-3:]:
                    reply += f"‚Äî {m['text']}\n"
                reply += "\n"
        else:
            reply += "‚ùì –ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π –ø–æ —Ç–µ–º–µ."
        await update.message.reply_text(reply, parse_mode='HTML')

    # --- –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ ---
    
    # --- Email —Ñ—É–Ω–∫—Ü–∏–∏ ---
    async def handle_email_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        user_text = update.message.text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        provider = "gmail"
        if "—è–Ω–¥–µ–∫—Å" in user_text or "yandex" in user_text:
            provider = "yandex"
        
        await update.message.reply_text(f"üìß –ü–æ–ª—É—á–∞—é —Å–≤–æ–¥–∫—É –≤—Ö–æ–¥—è—â–∏—Ö –∏–∑ {provider}...")
        
        try:
            summary = email_analyzer.get_inbox_summary(provider)
            
            if "error" in summary:
                await update.message.reply_text(f"‚ùå {summary['error']}")
                return
            
            text = f"üìß <b>–°–≤–æ–¥–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö ({provider}):</b>\n\n"
            text += f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {summary['total_messages']}\n"
            text += f"üö® –°—Ä–æ—á–Ω—ã—Ö: {summary['urgent_count']}\n"
            text += f"‚≠ê –í–∞–∂–Ω—ã—Ö: {summary['high_priority_count']}\n"
            text += f"üí¨ –¢—Ä–µ–±—É—é—Ç –æ—Ç–≤–µ—Ç–∞: {summary['need_reply_count']}\n\n"
            
            if summary['urgent_messages']:
                text += "üö® <b>–°—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
                for msg in summary['urgent_messages']:
                    text += f"‚Ä¢ {msg['subject']} (–æ—Ç {msg['sender']})\n"
                text += "\n"
            
            if summary['need_reply_messages']:
                text += "üí¨ <b>–¢—Ä–µ–±—É—é—Ç –æ—Ç–≤–µ—Ç–∞:</b>\n"
                for msg in summary['need_reply_messages']:
                    text += f"‚Ä¢ {msg['subject']} (–æ—Ç {msg['sender']})\n"
                text += "\n"
            
            text += f"üìù <b>–ê–Ω–∞–ª–∏–∑:</b>\n{summary['summary']}"
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")

    async def handle_email_lens(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ª–∏–Ω–∑–∞–º."""
        user_text = update.message.text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–Ω–∑—É
        lens = None
        if "—Å—Ä–æ—á–Ω—ã–µ" in user_text or "urgent" in user_text:
            lens = "urgent"
        elif "–æ—Ç–≤–µ—Ç" in user_text or "reply" in user_text:
            lens = "need_reply"
        elif "–≤–∞–∂–Ω–æ–µ" in user_text or "important" in user_text:
            lens = "important"
        else:
            await update.message.reply_text(
                "ÔøΩÔøΩ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ –ª–∏–Ω–∑–∞–º</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ '–°—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' - —Å—Ä–æ—á–Ω—ã–µ –∏ –≤–∞–∂–Ω—ã–µ\n"
                "‚Ä¢ '–û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞' - —Ç—Ä–µ–±—É—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞\n"
                "‚Ä¢ '–í–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' - –≤—Å–µ –≤–∞–∂–Ω—ã–µ\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ –ü–æ–∫–∞–∂–∏ —Å—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                "‚Ä¢ –ß—Ç–æ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞\n"
                "‚Ä¢ –í–∞–∂–Ω—ã–µ –≤—Ö–æ–¥—è—â–∏–µ",
                parse_mode='HTML'
            )
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        provider = "gmail"
        if "—è–Ω–¥–µ–∫—Å" in user_text or "yandex" in user_text:
            provider = "yandex"
        
        await update.message.reply_text(f"üîç –ü–æ–ª—É—á–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ª–∏–Ω–∑–µ '{lens}' –∏–∑ {provider}...")
        
        try:
            messages = email_analyzer.get_messages_by_lens(lens, provider)
            
            if not messages:
                lens_names = {
                    "urgent": "—Å—Ä–æ—á–Ω—ã—Ö",
                    "need_reply": "–æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–∞",
                    "important": "–≤–∞–∂–Ω—ã—Ö"
                }
                await update.message.reply_text(f"üìß –°–æ–æ–±—â–µ–Ω–∏–π {lens_names.get(lens, lens)} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_messages = messages[:10]
            
            lens_names = {
                "urgent": "–°—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                "need_reply": "–û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞",
                "important": "–í–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            }
            
            text = f"üìß <b>{lens_names.get(lens, lens)} ({provider}):</b>\n\n"
            
            for i, msg in enumerate(display_messages, 1):
                text += f"üì® <b>{i}. {msg.subject}</b>\n"
                text += f"   –û—Ç: {msg.sender}\n"
                text += f"   –î–∞—Ç–∞: {msg.date.strftime('%d.%m %H:%M')}\n"
                text += f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {msg.priority.value}\n"
                if msg.is_reply_needed:
                    text += f"   ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞\n"
                text += "\n"
            
            if len(messages) > 10:
                text += f"... –∏ –µ—â–µ {len(messages) - 10} —Å–æ–æ–±—â–µ–Ω–∏–π"
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    async def handle_reply_template(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞."""
        user_text = update.message.text
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É –∏–ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è
        template_match = re.search(r"(—à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞|–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞|reply template)\s+(.+)", user_text, re.I)
        if not template_match:
            await update.message.reply_text(
                "üìù <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ '–®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ [—Ç–µ–º–∞]' - —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω\n"
                "‚Ä¢ '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ [—Ç–µ–º–∞]' - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—Ç–≤–µ—Ç\n"
                "‚Ä¢ 'Reply template [subject]' - –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ –®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã\n"
                "‚Ä¢ Reply template meeting request",
                parse_mode='HTML'
            )
            return
        
        query = template_match.group(2).strip()
        
        await update.message.reply_text(f"üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –¥–ª—è '{query}'...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞
            temp_message = EmailMessage(
                id="temp",
                subject=query,
                sender="Unknown",
                sender_email="unknown@example.com",
                date=datetime.now(),
                content=f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è: {query}",
                priority=EmailPriority.MEDIUM,
                status=EmailStatus.NEW,
                labels=[],
                thread_id="temp",
                is_reply_needed=True
            )
            
            template = email_analyzer.generate_reply_template(temp_message)
            
            text = f"üìù <b>–®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –¥–ª—è '{query}':</b>\n\n"
            text += template
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")

    async def handle_email_config(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ email –∞–∫–∫–∞—É–Ω—Ç–æ–≤."""
        user_text = update.message.text.lower()
        
        if "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞" in user_text or "config" in user_text:
            await update.message.reply_text(
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Email –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>\n\n"
                "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª email_config.json:\n\n"
                "1. <b>Gmail:</b>\n"
                "   - –í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é\n"
                "   - –°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
                "   - –£–∫–∞–∂–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n"
                "2. <b>–Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç–∞:</b>\n"
                "   - –í–∫–ª—é—á–∏—Ç–µ IMAP –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n"
                "   - –°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
                "   - –£–∫–∞–∂–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n"
                "–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ '–°–≤–æ–¥–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö' - –æ–±—â–∞—è —Å–≤–æ–¥–∫–∞\n"
                "‚Ä¢ '–°—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' - –ø–æ –ª–∏–Ω–∑–∞–º\n"
                "‚Ä¢ '–®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞' - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                "üìß <b>Email –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                "‚Ä¢ '–°–≤–æ–¥–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö' - –æ–±—â–∞—è —Å–≤–æ–¥–∫–∞\n"
                "‚Ä¢ '–°—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' - —Å—Ä–æ—á–Ω—ã–µ –∏ –≤–∞–∂–Ω—ã–µ\n"
                "‚Ä¢ '–û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞' - —Ç—Ä–µ–±—É—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞\n"
                "‚Ä¢ '–í–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' - –≤—Å–µ –≤–∞–∂–Ω—ã–µ\n"
                "‚Ä¢ '–®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ [—Ç–µ–º–∞]' - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞\n"
                "‚Ä¢ '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ email' - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è Gmail –∏ –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç–∞",
                parse_mode='HTML'
            )

    # --- –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å–µ—Ç—å ---
    async def handle_partners_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π —Å–µ—Ç–∏."""
        try:
            summary = partners_manager.get_partners_summary()
            
            text = "ü§ù <b>–°–≤–æ–¥–∫–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π —Å–µ—Ç–∏:</b>\n\n"
            text += f"üìä –í—Å–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤: {summary['total']}\n"
            text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {summary['active_partners']}\n"
            text += f"üìû –ù—É–∂–¥–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç–µ: {summary['needs_contact']}\n\n"
            
            text += "üìà <b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
            for status, count in summary['by_status'].items():
                status_names = {
                    "prospect": "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ",
                    "lead": "–õ–∏–¥—ã", 
                    "active": "–ê–∫—Ç–∏–≤–Ω—ã–µ",
                    "partner": "–ü–∞—Ä—Ç–Ω—ë—Ä—ã",
                    "inactive": "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ"
                }
                text += f"   {status_names.get(status, status)}: {count}\n"
            
            text += "\nüì° <b>–ü–æ –∫–∞–Ω–∞–ª–∞–º:</b>\n"
            for channel, count in summary['by_channel'].items():
                text += f"   {channel}: {count}\n"
            
            text += "\nüéØ <b>–ü–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º:</b>\n"
            for segment, count in summary['by_segment'].items():
                text += f"   {segment}: {count}\n"
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")

    async def handle_add_partner(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞."""
        user_text = update.message.text
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞
        pattern = r"–¥–æ–±–∞–≤—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞? ([^,]+), –∫–∞–Ω–∞–ª ([^,]+), –∫–æ–Ω—Ç–∞–∫—Ç—ã ([^,]+)(?:, —Å—Ç–∞—Ç—É—Å ([^,]+))?(?:, —Å–µ–≥–º–µ–Ω—Ç ([^,]+))?"
        match = re.search(pattern, user_text, re.I)
        
        if not match:
            await update.message.reply_text(
                "ü§ù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞</b>\n\n"
                "–§–æ—Ä–º–∞—Ç:\n"
                "‚Ä¢ '–î–æ–±–∞–≤—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞ [–∏–º—è], –∫–∞–Ω–∞–ª [–∫–∞–Ω–∞–ª], –∫–æ–Ω—Ç–∞–∫—Ç—ã [–∫–æ–Ω—Ç–∞–∫—Ç—ã]'\n"
                "‚Ä¢ '–î–æ–±–∞–≤—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞ [–∏–º—è], –∫–∞–Ω–∞–ª [–∫–∞–Ω–∞–ª], –∫–æ–Ω—Ç–∞–∫—Ç—ã [–∫–æ–Ω—Ç–∞–∫—Ç—ã], —Å—Ç–∞—Ç—É—Å [—Å—Ç–∞—Ç—É—Å]'\n"
                "‚Ä¢ '–î–æ–±–∞–≤—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞ [–∏–º—è], –∫–∞–Ω–∞–ª [–∫–∞–Ω–∞–ª], –∫–æ–Ω—Ç–∞–∫—Ç—ã [–∫–æ–Ω—Ç–∞–∫—Ç—ã], —Å—Ç–∞—Ç—É—Å [—Å—Ç–∞—Ç—É—Å], —Å–µ–≥–º–µ–Ω—Ç [—Å–µ–≥–º–µ–Ω—Ç]'\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ –î–æ–±–∞–≤—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, –∫–∞–Ω–∞–ª telegram, –∫–æ–Ω—Ç–∞–∫—Ç—ã @ivan_petrov\n"
                "‚Ä¢ –î–æ–±–∞–≤—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –û–û–û –†–æ–≥–∞, –∫–∞–Ω–∞–ª email, –∫–æ–Ω—Ç–∞–∫—Ç—ã info@roga.ru, —Å—Ç–∞—Ç—É—Å prospect, —Å–µ–≥–º–µ–Ω—Ç startup",
                parse_mode='HTML'
            )
            return
        
        name = match.group(1).strip()
        channel = match.group(2).strip()
        contacts = match.group(3).strip()
        status = match.group(4).strip() if match.group(4) else "prospect"
        segment = match.group(5).strip() if match.group(5) else "general"
        
        try:
            success = partners_manager.add_partner(name, channel, contacts, status, segment)
            if success:
                await update.message.reply_text(f"‚úÖ –ü–∞—Ä—Ç–Ω—ë—Ä {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def handle_partners_for_calling(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–∑–≤–æ–Ω–∞."""
        user_text = update.message.text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        days = 7
        if "–Ω–µ–¥–µ–ª—è" in user_text:
            days = 7
        elif "–º–µ—Å—è—Ü" in user_text:
            days = 30
        elif "–¥–µ–Ω—å" in user_text:
            days = 1
        
        try:
            partners = partners_manager.get_partners_for_calling(days)
            
            if not partners:
                await update.message.reply_text(f"üìû –ù–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–∑–≤–æ–Ω–∞ (–Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ {days} –¥–Ω–µ–π)")
                return
            
            text = f"üìû <b>–ü–∞—Ä—Ç–Ω—ë—Ä—ã –¥–ª—è –ø—Ä–æ–∑–≤–æ–Ω–∞ (–Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ {days} –¥–Ω–µ–π):</b>\n\n"
            
            for i, partner in enumerate(partners[:10], 1):
                text += f"{i}. <b>{partner['name']}</b>\n"
                text += f"   –ö–∞–Ω–∞–ª: {partner['channel']}\n"
                text += f"   –ö–æ–Ω—Ç–∞–∫—Ç—ã: {partner['contacts']}\n"
                text += f"   –°–µ–≥–º–µ–Ω—Ç: {partner.get('segment', 'general')}\n"
                text += f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: {partner.get('last_contact', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            
            if len(partners) > 10:
                text += f"... –∏ –µ—â–µ {len(partners) - 10} –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤"
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")

async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text(
                "üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...\n"
                "üîç –í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏..."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            voice = update.message.voice
            file = await context.bot.get_file(voice.file_id)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
            temp_path = f"/tmp/voice_{voice.file_id}.ogg"
            await file.download_to_drive(temp_path)
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            recognized_text = speech_recognizer.recognize_speech(temp_path)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_path):
                os.remove(temp_path)
            
            if not recognized_text:
                await processing_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –ø–∞–º—è—Ç—å
            user_id = update.message.from_user.id
            username = update.message.from_user.username or update.message.from_user.full_name
            chat_memory.add_message(user_id=user_id, username=username, text=recognized_text, role="user")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            await processing_msg.edit_text(
                f"üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n{recognized_text}\n\n"
                f"üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É...",
                parse_mode='HTML'
            )

            # --- –ù–æ–≤—ã–π –±–ª–æ–∫: –ø–∞—Ä—Å–µ—Ä –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–¥–∞—á —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º ---
            import re
            from core.team_manager import team_manager
            from datetime import datetime, timedelta
            
            # –ü—Ä–∏–º–µ—Ä—ã: "–ü—É—Å—Ç—å –ú–∞—à–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ—Å—Ç–∞—Ç–∫–∏", "–ü–æ—Ä—É—á–∏ –ò–≤–∞–Ω—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", "–ü–æ–ø—Ä–æ—Å–∏ –°–µ—Ä–≥–µ—è —Å–¥–µ–ª–∞—Ç—å ..."
            task_patterns = [
                r"–ø—É—Å—Ç—å ([–∞-—è—ëa-zA-Z]+) (.+)",
                r"–ø–æ—Ä—É—á–∏ ([–∞-—è—ëa-zA-Z]+)[—Ée] (.+)",
                r"–ø–æ–ø—Ä–æ—Å–∏ ([–∞-—è—ëa-zA-Z]+)[—Ée] (.+)",
                r"–Ω–∞–∑–Ω–∞—á—å ([–∞-—è—ëa-zA-Z]+)[—Ée] (.+)",
                r"([–∞-—è—ëa-zA-Z]+),? (.+)"  # –ú–∞—à–∞, –ø—Ä–æ–≤–µ—Ä—å –æ—Å—Ç–∞—Ç–∫–∏
            ]
            matched = None
            for pattern in task_patterns:
                m = re.match(pattern, recognized_text.strip(), re.I)
                if m:
                    matched = m
                    break
            
            if matched:
                employee_name = matched.group(1).strip().capitalize()
                task_text = matched.group(2).strip().capitalize()
                # –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏ (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
                employees = team_manager.team_data['employees']
                employee_id = None
                for eid, edata in employees.items():
                    if edata['name'].lower().startswith(employee_name.lower()):
                        employee_id = eid
                        break
                if not employee_id:
                    await update.message.reply_text(f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ '{employee_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–µ. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ '–¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'.")
                    return
                # –î–µ–¥–ª–∞–π–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∑–∞–≤—Ç—Ä–∞
                deadline = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
                # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞—á—É
                ok = team_manager.assign_task(employee_id, task_text, deadline, priority='medium')
                if ok:
                    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–ª—è {employee_name} —Å–æ–∑–¥–∞–Ω–∞: {task_text}\n–î–µ–¥–ª–∞–π–Ω: {deadline}")
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å chat_id)
                    chat_id = employees[employee_id].get('chat_id')
                    if chat_id:
                        try:
                            await context.bot.send_message(chat_id=chat_id, text=f"üìù –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {task_text}\n–î–µ–¥–ª–∞–π–Ω: {deadline}")
                        except Exception as e:
                            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: {e}")
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç
                    await context.bot.send_message(update.effective_chat.id, f"üì¢ –ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞: {employee_name} ‚Äî {task_text} (–¥–æ {deadline})")
                    return
                else:
                    await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {employee_name}.")
                    return
            # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ---
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            class FakeMessage:
                def __init__(self, original_message, text):
                    self.text = text
                    self.from_user = original_message.from_user
                    self.effective_chat = original_message.effective_chat
                    self.reply_text = original_message.reply_text
            
            class FakeUpdate:
                def __init__(self, original_update, text):
                    self.message = FakeMessage(original_update.message, text)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–±—ã—á–Ω—É—é –∫–æ–º–∞–Ω–¥—É
            fake_update = FakeUpdate(update, recognized_text)
            await handle_message(fake_update, context)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


    async def handle_partners_for_emailing(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
        user_text = update.message.text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç
        segment = None
        if "—Å—Ç–∞—Ä—Ç–∞–ø" in user_text:
            segment = "startup"
        elif "enterprise" in user_text or "–∫—Ä—É–ø–Ω—ã–µ" in user_text:
            segment = "enterprise"
        elif "–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ" in user_text:
            segment = "agency"
        elif "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫" in user_text:
            segment = "developer"
        
        try:
            partners = partners_manager.get_partners_for_emailing(segment)
            
            if not partners:
                segment_text = f" —Å–µ–≥–º–µ–Ω—Ç–∞ {segment}" if segment else ""
                await update.message.reply_text(f"üìß –ù–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è email —Ä–∞—Å—Å—ã–ª–∫–∏{segment_text}")
                return
            
            text = f"üìß <b>–ü–∞—Ä—Ç–Ω—ë—Ä—ã –¥–ª—è email —Ä–∞—Å—Å—ã–ª–∫–∏"
            if segment:
                text += f" (—Å–µ–≥–º–µ–Ω—Ç: {segment})"
            text += f":</b>\n\n"
            
            for i, partner in enumerate(partners[:10], 1):
                text += f"{i}. <b>{partner['name']}</b>\n"
                text += f"   –ö–æ–Ω—Ç–∞–∫—Ç—ã: {partner['contacts']}\n"
                text += f"   –°—Ç–∞—Ç—É—Å: {partner['status']}\n"
                text += f"   –°–µ–≥–º–µ–Ω—Ç: {partner.get('segment', 'general')}\n\n"
            
            if len(partners) > 10:
                text += f"... –∏ –µ—â–µ {len(partners) - 10} –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤"
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")

    async def handle_generate_proposal(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞."""
        user_text = update.message.text
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        pattern = r"(–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ|proposal) (?:–¥–ª—è|–∫) ([^,]+)(?:, —Å–µ–≥–º–µ–Ω—Ç ([^,]+))?"
        match = re.search(pattern, user_text, re.I)
        
        if not match:
            await update.message.reply_text(
                "üìù <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>\n\n"
                "–§–æ—Ä–º–∞—Ç:\n"
                "‚Ä¢ '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è [–∏–º—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞]'\n"
                "‚Ä¢ '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è [–∏–º—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞], —Å–µ–≥–º–µ–Ω—Ç [—Å–µ–≥–º–µ–Ω—Ç]'\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n"
                "‚Ä¢ Proposal –¥–ª—è –û–û–û –†–æ–≥–∞, —Å–µ–≥–º–µ–Ω—Ç startup",
                parse_mode='HTML'
            )
            return
        
        partner_name = match.group(2).strip()
        segment = match.group(3).strip() if match.group(3) else None
        
        try:
            # –ò—â–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞
            partners = partners_manager.get_all_partners()
            partner = None
            for p in partners:
                if p['name'].lower() == partner_name.lower():
                    partner = p
                    break
            
            if not partner:
                await update.message.reply_text(f"‚ùå –ü–∞—Ä—Ç–Ω—ë—Ä '{partner_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
                return
            
            await update.message.reply_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ...")
            
            proposal = partners_manager.generate_proposal(partner, segment)
            
            text = f"üìù <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è {partner['name']}:</b>\n\n"
            text += proposal
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")

    async def handle_bulk_proposals(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤."""
        user_text = update.message.text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç
        segment = None
        if "—Å—Ç–∞—Ä—Ç–∞–ø" in user_text:
            segment = "startup"
        elif "enterprise" in user_text or "–∫—Ä—É–ø–Ω—ã–µ" in user_text:
            segment = "enterprise"
        elif "–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ" in user_text:
            segment = "agency"
        elif "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫" in user_text:
            segment = "developer"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç
        limit = 5
        if "10" in user_text:
            limit = 10
        elif "3" in user_text:
            limit = 3
        
        try:
            await update.message.reply_text(f"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {limit} –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤...")
            
            proposals = partners_manager.generate_bulk_proposals(segment, limit)
            
            if not proposals:
                segment_text = f" —Å–µ–≥–º–µ–Ω—Ç–∞ {segment}" if segment else ""
                await update.message.reply_text(f"‚ùå –ù–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π{segment_text}")
                return
            
            text = f"üìù <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤"
            if segment:
                text += f" (—Å–µ–≥–º–µ–Ω—Ç: {segment})"
            text += f":</b>\n\n"
            
            for i, item in enumerate(proposals, 1):
                partner = item['partner']
                proposal = item['proposal']
                
                text += f"<b>{i}. {partner['name']}</b>\n"
                text += f"–ö–∞–Ω–∞–ª: {partner['channel']}\n"
                text += f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {partner['contacts']}\n\n"
                text += f"<i>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</i>\n{proposal}\n"
                text += "‚îÄ" * 50 + "\n\n"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(text) > 4000:
                parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
                for i, part in enumerate(parts):
                    await update.message.reply_text(f"{part} (—á–∞—Å—Ç—å {i+1}/{len(parts)})", parse_mode='HTML')
            else:
                await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")

    # --- AmoCRM Commands ---

    async def handle_amocrm_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ AmoCRM."""
        user_text = update.message.text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç
        limit = 10
        if "20" in user_text:
            limit = 20
        elif "50" in user_text:
            limit = 50
        
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
        query = None
        if "–Ω–∞–π–¥–∏" in user_text or "–ø–æ–∏—Å–∫" in user_text:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ—Å–ª–µ "–Ω–∞–π–¥–∏" –∏–ª–∏ "–ø–æ–∏—Å–∫"
            import re
            match = re.search(r'(?:–Ω–∞–π–¥–∏|–ø–æ–∏—Å–∫)\s+([^\s]+)', user_text)
            if match:
                query = match.group(1)
        
        try:
            contacts = amocrm.get_contacts(limit=limit, query=query)
            
            if not contacts:
                query_text = f" –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'" if query else ""
                await update.message.reply_text(f"üë• –ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ AmoCRM{query_text}")
                return
            
            text = f"üë• <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –≤ AmoCRM"
            if query:
                text += f" (–ø–æ–∏—Å–∫: {query})"
            text += f":</b>\n\n"
            
            for i, contact in enumerate(contacts[:10], 1):
                text += f"{i}. <b>{contact['name']}</b>\n"
                text += f"   ID: {contact['id']}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'custom_fields_values' in contact:
                    for field in contact['custom_fields_values']:
                        if field.get('field_id') == 1:  # Email
                            text += f"   Email: {field['values'][0]['value']}\n"
                        elif field.get('field_id') == 2:  # Phone
                            text += f"   –¢–µ–ª–µ—Ñ–æ–Ω: {field['values'][0]['value']}\n"
                
                text += f"   –°–æ–∑–¥–∞–Ω: {datetime.fromtimestamp(contact.get('created_at', 0)).strftime('%d.%m.%Y')}\n\n"
            
            if len(contacts) > 10:
                text += f"... –∏ –µ—â–µ {len(contacts) - 10} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")

    async def handle_amocrm_leads(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–¥–µ–ª–∫–∏ –∏–∑ AmoCRM."""
        user_text = update.message.text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç
        limit = 10
        if "20" in user_text:
            limit = 20
        elif "50" in user_text:
            limit = 50
        
        try:
            leads = amocrm.get_leads(limit=limit)
            
            if not leads:
                await update.message.reply_text("üíº –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –≤ AmoCRM")
                return
            
            text = f"üíº <b>–°–¥–µ–ª–∫–∏ –≤ AmoCRM:</b>\n\n"
            
            for i, lead in enumerate(leads[:10], 1):
                text += f"{i}. <b>{lead['name']}</b>\n"
                text += f"   ID: {lead['id']}\n"
                text += f"   –°—Ç–∞—Ç—É—Å ID: {lead.get('status_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                text += f"   –°—É–º–º–∞: {lead.get('price', 0)} ‚ÇΩ\n"
                text += f"   –°–æ–∑–¥–∞–Ω–∞: {datetime.fromtimestamp(lead.get('created_at', 0)).strftime('%d.%m.%Y')}\n\n"
            
            if len(leads) > 10:
                text += f"... –∏ –µ—â–µ {len(leads) - 10} —Å–¥–µ–ª–æ–∫"
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")

    async def handle_amocrm_analytics(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É AmoCRM."""
        user_text = update.message.text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        period = "month"
        if "–Ω–µ–¥–µ–ª—è" in user_text or "–Ω–µ–¥–µ–ª—é" in user_text:
            period = "week"
        elif "–º–µ—Å—è—Ü" in user_text or "–º–µ—Å—è—Ü–∞" in user_text:
            period = "month"
        
        try:
            analytics = amocrm.get_analytics(period=period)
            
            text = f"üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ AmoCRM –∑–∞ {period}:</b>\n\n"
            text += f"üìà –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: {analytics['total_leads']}\n"
            text += f"‚úÖ –í—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {analytics['won_leads']}\n"
            text += f"üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {analytics['conversion_rate']:.1f}%\n"
            text += f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {analytics['total_revenue']} ‚ÇΩ\n"
            text += f"üíé –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {analytics['avg_deal_size']:.0f} ‚ÇΩ\n"
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")

    async def handle_amocrm_sync_partners(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏–∑ Google Sheets –≤ AmoCRM."""
        try:
            await update.message.reply_text("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏–∑ Google Sheets –≤ AmoCRM...")
            
            result = amocrm.sync_partners_from_sheet(partners_manager)
            
            text = f"‚úÖ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:</b>\n\n"
            text += f"üÜï –°–æ–∑–¥–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {result['created']}\n"
            text += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {result['updated']}\n"
            text += f"‚ùå –û—à–∏–±–æ–∫: {result['errors']}\n"
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

    async def handle_amocrm_create_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ AmoCRM."""
        user_text = update.message.text
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        pattern = r"(?:—Å–æ–∑–¥–∞–π|–¥–æ–±–∞–≤—å)\s+–∫–æ–Ω—Ç–∞–∫—Ç\s+([^,]+)(?:,\s+email\s+([^,]+))?(?:,\s+—Ç–µ–ª–µ—Ñ–æ–Ω\s+([^,]+))?"
        match = re.search(pattern, user_text, re.I)
        
        if not match:
            await update.message.reply_text(
                "üë§ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ AmoCRM</b>\n\n"
                "–§–æ—Ä–º–∞—Ç:\n"
                "‚Ä¢ '–°–æ–∑–¥–∞–π –∫–æ–Ω—Ç–∞–∫—Ç [–∏–º—è]'\n"
                "‚Ä¢ '–°–æ–∑–¥–∞–π –∫–æ–Ω—Ç–∞–∫—Ç [–∏–º—è], email [email]'\n"
                "‚Ä¢ '–°–æ–∑–¥–∞–π –∫–æ–Ω—Ç–∞–∫—Ç [–∏–º—è], email [email], —Ç–µ–ª–µ—Ñ–æ–Ω [—Ç–µ–ª–µ—Ñ–æ–Ω]'\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ –°–æ–∑–¥–∞–π –∫–æ–Ω—Ç–∞–∫—Ç –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n"
                "‚Ä¢ –°–æ–∑–¥–∞–π –∫–æ–Ω—Ç–∞–∫—Ç –û–û–û –†–æ–≥–∞, email info@roga.ru\n"
                "‚Ä¢ –°–æ–∑–¥–∞–π –∫–æ–Ω—Ç–∞–∫—Ç –ò–ü –ö–æ–ø—ã—Ç–∞, email kopyta@mail.ru, —Ç–µ–ª–µ—Ñ–æ–Ω +7-999-123-45-67",
                parse_mode='HTML'
            )
            return
        
        name = match.group(1).strip()
        email = match.group(2).strip() if match.group(2) else None
        phone = match.group(3).strip() if match.group(3) else None
        
        try:
            contact = amocrm.create_contact(name=name, email=email, phone=phone)
            
            if contact:
                text = f"‚úÖ <b>–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ AmoCRM:</b>\n\n"
                text += f"üë§ –ò–º—è: {contact['name']}\n"
                text += f"üÜî ID: {contact['id']}\n"
                if email:
                    text += f"üìß Email: {email}\n"
                if phone:
                    text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                
                await update.message.reply_text(text, parse_mode='HTML')
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def handle_amocrm_create_lead(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ AmoCRM."""
        user_text = update.message.text
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
        pattern = r"(?:—Å–æ–∑–¥–∞–π|–¥–æ–±–∞–≤—å)\s+—Å–¥–µ–ª–∫—É\s+([^,]+)(?:,\s+–∫–æ–Ω—Ç–∞–∫—Ç\s+([^,]+))?(?:,\s+—Å—É–º–º–∞\s+(\d+))?"
        match = re.search(pattern, user_text, re.I)
        
        if not match:
            await update.message.reply_text(
                "üíº <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ AmoCRM</b>\n\n"
                "–§–æ—Ä–º–∞—Ç:\n"
                "‚Ä¢ '–°–æ–∑–¥–∞–π —Å–¥–µ–ª–∫—É [–Ω–∞–∑–≤–∞–Ω–∏–µ]'\n"
                "‚Ä¢ '–°–æ–∑–¥–∞–π —Å–¥–µ–ª–∫—É [–Ω–∞–∑–≤–∞–Ω–∏–µ], –∫–æ–Ω—Ç–∞–∫—Ç [–∏–º—è]'\n"
                "‚Ä¢ '–°–æ–∑–¥–∞–π —Å–¥–µ–ª–∫—É [–Ω–∞–∑–≤–∞–Ω–∏–µ], –∫–æ–Ω—Ç–∞–∫—Ç [–∏–º—è], —Å—É–º–º–∞ [—á–∏—Å–ª–æ]'\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ –°–æ–∑–¥–∞–π —Å–¥–µ–ª–∫—É –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–∞\n"
                "‚Ä¢ –°–æ–∑–¥–∞–π —Å–¥–µ–ª–∫—É –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –∫–æ–Ω—Ç–∞–∫—Ç –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n"
                "‚Ä¢ –°–æ–∑–¥–∞–π —Å–¥–µ–ª–∫—É –î–∏–∑–∞–π–Ω –ª–æ–≥–æ—Ç–∏–ø–∞, –∫–æ–Ω—Ç–∞–∫—Ç –û–û–û –†–æ–≥–∞, —Å—É–º–º–∞ 50000",
                parse_mode='HTML'
            )
            return
        
        name = match.group(1).strip()
        contact_name = match.group(2).strip() if match.group(2) else None
        amount = int(match.group(3)) if match.group(3) else 0
        
        try:
            contact_id = None
            if contact_name:
                # –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –∏–º–µ–Ω–∏
                contacts = amocrm.get_contacts(query=contact_name)
                if contacts:
                    contact_id = contacts[0]['id']
                else:
                    await update.message.reply_text(f"‚ùå –ö–æ–Ω—Ç–∞–∫—Ç '{contact_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
            
            lead = amocrm.create_lead(name=name, contact_id=contact_id, custom_fields={1: amount})
            
            if lead:
                text = f"‚úÖ <b>–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ AmoCRM:</b>\n\n"
                text += f"üíº –ù–∞–∑–≤–∞–Ω–∏–µ: {lead['name']}\n"
                text += f"üÜî ID: {lead['id']}\n"
                if contact_name:
                    text += f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç: {contact_name}\n"
                if amount > 0:
                    text += f"üí∞ –°—É–º–º–∞: {amount} ‚ÇΩ\n"
                
                await update.message.reply_text(text, parse_mode='HTML')
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def handle_amocrm_pipelines(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂ –≤ AmoCRM."""
        try:
            pipelines = amocrm.get_pipelines()
            
            if not pipelines:
                await update.message.reply_text("üîÑ –ù–µ—Ç –≤–æ—Ä–æ–Ω–æ–∫ –ø—Ä–æ–¥–∞–∂ –≤ AmoCRM")
                return
            
            text = f"üîÑ <b>–í–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂ –≤ AmoCRM:</b>\n\n"
            
            for i, pipeline in enumerate(pipelines, 1):
                text += f"{i}. <b>{pipeline['name']}</b>\n"
                text += f"   ID: {pipeline['id']}\n"
                text += f"   –ê–∫—Ç–∏–≤–Ω–∞: {'–î–∞' if pipeline.get('is_main', False) else '–ù–µ—Ç'}\n\n"
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–æ–∫: {e}")

    async def handle_amocrm_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ AmoCRM."""
        user_text = update.message.text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç
        limit = 10
        if "20" in user_text:
            limit = 20
        elif "50" in user_text:
            limit = 50
        
        try:
            tasks = amocrm.get_tasks(limit=limit)
            
            if not tasks:
                await update.message.reply_text("üìã –ù–µ—Ç –∑–∞–¥–∞—á –≤ AmoCRM")
                return
            
            text = f"üìã <b>–ó–∞–¥–∞—á–∏ –≤ AmoCRM:</b>\n\n"
            
            for i, task in enumerate(tasks[:10], 1):
                text += f"{i}. <b>{task['text']}</b>\n"
                text += f"   ID: {task['id']}\n"
                text += f"   –¢–∏–ø: {task.get('entity_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                text += f"   –°–æ–∑–¥–∞–Ω–∞: {datetime.fromtimestamp(task.get('created_at', 0)).strftime('%d.%m.%Y')}\n\n"
            
            if len(tasks) > 10:
                text += f"... –∏ –µ—â–µ {len(tasks) - 10} –∑–∞–¥–∞—á"
            
            await update.message.reply_text(text, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")

    async def handle_goals_progress_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Å–µ–º —Ü–µ–ª—è–º (OKR/KPI) —Å —Ç—Ä–µ–Ω–¥–æ–º, —Å—Ç–∞—Ç—É—Å–æ–º –∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–º."""
        try:
            goals = goals_manager.get_active_goals()
            if not goals:
                await update.message.reply_text(
                    "üéØ <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π</b>\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ü–µ–ª—å:\n‚Ä¢ '–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å –≤—ã—Ä—É—á–∫–∞ 3 –º–ª–Ω –¥–æ —Å–µ–Ω—Ç—è–±—Ä—è'\n‚Ä¢ '–ù–æ–≤–∞—è —Ü–µ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏ 100 –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–æ –¥–µ–∫–∞–±—Ä—è'",
                    parse_mode='HTML'
                )
                return
            report = "<b>–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª—è–º (OKR/KPI):</b>\n\n"
            for goal in goals:
                progress = goals_manager.get_goal_progress(goal.id)
                trend = progress['trend']
                forecast = progress['forecast']
                status_emoji = "üü¢" if progress['is_on_track'] else "üî¥"
                trend_emoji = "üìà" if trend['direction'] == 'increasing' else "üìâ" if trend['direction'] == 'decreasing' else "‚û°Ô∏è"
                forecast_text = ""
                if forecast['achievable']:
                    forecast_text = f"‚úÖ –î–æ—Å—Ç–∏–∂–∏–º–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {datetime.fromisoformat(forecast['estimated_completion']).strftime('%d.%m.%Y') if forecast['estimated_completion'] else '‚Äî'}"
                else:
                    forecast_text = f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∫–æ—Ä–æ—Å—Ç—å: {forecast.get('required_rate', '‚Äî')}/–¥–µ–Ω—å"
                deadline = goal.end_date if goal.end_date else '‚Äî'
                report += (
                    f"<b>{goal.name}</b> ({goal.goal_type.value.title()})\n"
                    f"{status_emoji} {progress['progress_percentage']}% ‚Äî {goal.current_value}/{goal.target_value}\n"
                    f"{trend_emoji} –¢—Ä–µ–Ω–¥: {trend['direction']} ({trend['rate']}/–¥–µ–Ω—å)\n"
                    f"‚è≥ –î–µ–¥–ª–∞–π–Ω: {deadline}\n"
                    f"{forecast_text}\n\n"
                )
            await update.message.reply_text(report, parse_mode='HTML')
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ü–µ–ª—è–º: {e}")

    # --- Obsidian —Ñ—É–Ω–∫—Ü–∏–∏ ---
    async def handle_create_strategy(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ Obsidian."""
        user_text = update.message.text
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        # –ü—Ä–∏–º–µ—Ä: "–°–æ–∑–¥–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –†–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–¥–∞–∂: —É–≤–µ–ª–∏—á–∏—Ç—å –≤—ã—Ä—É—á–∫—É –Ω–∞ 50% –¥–æ –∫–æ–Ω—Ü–∞ –≥–æ–¥–∞"
        strategy_match = re.search(r"(?:—Å–æ–∑–¥–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é|–Ω–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è|–¥–æ–±–∞–≤—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é)\s+(.+?):\s*(.+)", user_text, re.I)
        
        if not strategy_match:
            await update.message.reply_text(
                "üéØ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                "‚Ä¢ '–°–æ–∑–¥–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é [–Ω–∞–∑–≤–∞–Ω–∏–µ]: [–æ–ø–∏—Å–∞–Ω–∏–µ]'\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ –°–æ–∑–¥–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –†–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–¥–∞–∂: —É–≤–µ–ª–∏—á–∏—Ç—å –≤—ã—Ä—É—á–∫—É –Ω–∞ 50% –¥–æ –∫–æ–Ω—Ü–∞ –≥–æ–¥–∞\n"
                "‚Ä¢ –ù–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥: –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö\n"
                "‚Ä¢ –î–æ–±–∞–≤—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ü—Ä–æ–¥—É–∫—Ç: —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—É—é –ª–∏–Ω–µ–π–∫—É —Ç–æ–≤–∞—Ä–æ–≤",
                parse_mode='HTML'
            )
            return
        
        title = strategy_match.group(1).strip()
        content = strategy_match.group(2).strip()
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            note_id = obsidian_manager.create_strategy_note(
                title=title,
                content=content,
                tags=["—Å—Ç—Ä–∞—Ç–µ–≥–∏—è", "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"]
            )
            
            await update.message.reply_text(
                f"‚úÖ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ Obsidian!</b>\n\n"
                f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {content}\n"
                f"üÜî ID: {note_id}\n\n"
                f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫–µ: 01-–°—Ç—Ä–∞—Ç–µ–≥–∏–∏",
                parse_mode='HTML'
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")

    async def handle_create_decision(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –≤ Obsidian."""
        user_text = update.message.text
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è
        # –ü—Ä–∏–º–µ—Ä: "–°–æ–∑–¥–∞–π —Ä–µ—à–µ–Ω–∏–µ –í—ã–±–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: –ø—Ä–æ–±–ª–µ–º–∞ - –Ω–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, —Ä–µ—à–µ–Ω–∏–µ - –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –û–û–û –†–æ–≥–∞"
        decision_match = re.search(r"(?:—Å–æ–∑–¥–∞–π —Ä–µ—à–µ–Ω–∏–µ|–Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ|–¥–æ–±–∞–≤—å —Ä–µ—à–µ–Ω–∏–µ)\s+(.+?):\s*–ø—Ä–æ–±–ª–µ–º–∞\s*-\s*(.+?),\s*—Ä–µ—à–µ–Ω–∏–µ\s*-\s*(.+)", user_text, re.I)
        
        if not decision_match:
            await update.message.reply_text(
                "ü§î <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                "‚Ä¢ '–°–æ–∑–¥–∞–π —Ä–µ—à–µ–Ω–∏–µ [–Ω–∞–∑–≤–∞–Ω–∏–µ]: –ø—Ä–æ–±–ª–µ–º–∞ - [–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã], —Ä–µ—à–µ–Ω–∏–µ - [–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è]'\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ –°–æ–∑–¥–∞–π —Ä–µ—à–µ–Ω–∏–µ –í—ã–±–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: –ø—Ä–æ–±–ª–µ–º–∞ - –Ω–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, —Ä–µ—à–µ–Ω–∏–µ - –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –û–û–û –†–æ–≥–∞\n"
                "‚Ä¢ –ù–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: –ø—Ä–æ–±–ª–µ–º–∞ - —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–∏—Å—Ç–µ–º—ã, —Ä–µ—à–µ–Ω–∏–µ - –≤–Ω–µ–¥—Ä–∏—Ç—å –Ω–æ–≤–æ–µ –ü–û",
                parse_mode='HTML'
            )
            return
        
        title = decision_match.group(1).strip()
        problem = decision_match.group(2).strip()
        solution = decision_match.group(3).strip()
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
            note_id = obsidian_manager.create_decision_note(
                title=title,
                problem=problem,
                solution=solution,
                reasoning="–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Ç—É–∞—Ü–∏–∏"
            )
            
            await update.message.reply_text(
                f"‚úÖ <b>–†–µ—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ Obsidian!</b>\n\n"
                f"ü§î –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞: {problem}\n"
                f"‚úÖ –†–µ—à–µ–Ω–∏–µ: {solution}\n"
                f"üÜî ID: {note_id}\n\n"
                f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫–µ: 02-–†–µ—à–µ–Ω–∏—è",
                parse_mode='HTML'
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è: {e}")

    async def handle_obsidian_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º –≤ Obsidian."""
        user_text = update.message.text
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        search_match = re.search(r"(?:–Ω–∞–π–¥–∏ –≤ obsidian|–ø–æ–∏—Å–∫ –≤ obsidian|obsidian –ø–æ–∏—Å–∫)\s+(.+)", user_text, re.I)
        
        if not search_match:
            await update.message.reply_text(
                "üîç <b>–ü–æ–∏—Å–∫ –≤ Obsidian</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                "‚Ä¢ '–ù–∞–π–¥–∏ –≤ obsidian [–∑–∞–ø—Ä–æ—Å]'\n"
                "‚Ä¢ '–ü–æ–∏—Å–∫ –≤ obsidian [–∑–∞–ø—Ä–æ—Å]'\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ –ù–∞–π–¥–∏ –≤ obsidian –ø—Ä–æ–¥–∞–∂–∏\n"
                "‚Ä¢ –ü–æ–∏—Å–∫ –≤ obsidian –ø—Ä–æ–µ–∫—Ç –í–ë\n"
                "‚Ä¢ Obsidian –ø–æ–∏—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
                parse_mode='HTML'
            )
            return
        
        query = search_match.group(1).strip()
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = obsidian_manager.search_notes(query)
            
            if not results:
                await update.message.reply_text(
                    f"üîç <b>–ü–æ–∏—Å–∫: '{query}'</b>\n\n"
                    f"‚ùå –ó–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    f"‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n"
                    f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
                    f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è",
                    parse_mode='HTML'
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = f"üîç <b>–ü–æ–∏—Å–∫: '{query}'</b>\n\n"
            report += f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫: {len(results)}\n\n"
            
            for i, result in enumerate(results[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                category_emoji = {
                    '01-–°—Ç—Ä–∞—Ç–µ–≥–∏–∏': 'üéØ',
                    '02-–†–µ—à–µ–Ω–∏—è': 'ü§î',
                    '03-–õ–æ–≥–∏': 'üìù',
                    '04-–ü—Ä–æ–µ–∫—Ç—ã': 'üìÅ',
                    '05-–í—Å—Ç—Ä–µ—á–∏': 'üë•',
                    '06-–ó–∞–¥–∞—á–∏': '‚úÖ',
                    '07-–§–∏–Ω–∞–Ω—Å—ã': 'üí∞',
                    '08-–ü–∞—Ä—Ç–Ω–µ—Ä—ã': 'ü§ù',
                    '09-–ö–ª–∏–µ–Ω—Ç—ã': 'üë§',
                    '10-–î–æ–∫—É–º–µ–Ω—Ç—ã': 'üìÑ'
                }.get(result['category'], 'ÔøΩÔøΩ')
                
                report += f"{i}. {category_emoji} <b>{result['title']}</b>\n"
                report += f"   üìÅ {result['category']}\n"
                report += f"   üìÖ {result['created_date']}\n"
                report += f"   üìù {result['content_preview']}\n\n"
            
            if len(results) > 10:
                report += f"... –∏ –µ—â–µ {len(results) - 10} –∑–∞–º–µ—Ç–æ–∫\n\n"
            
            report += "üí° <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            report += "‚Ä¢ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ obsidian' - –æ–±—â–∞—è —Å–≤–æ–¥–∫–∞\n"
            report += "‚Ä¢ '–°–æ–∑–¥–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é [–Ω–∞–∑–≤–∞–Ω–∏–µ]: [–æ–ø–∏—Å–∞–Ω–∏–µ]' - –Ω–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è\n"
            report += "‚Ä¢ '–°–æ–∑–¥–∞–π —Ä–µ—à–µ–Ω–∏–µ [–Ω–∞–∑–≤–∞–Ω–∏–µ]: –ø—Ä–æ–±–ª–µ–º–∞ - [–æ–ø–∏—Å–∞–Ω–∏–µ], —Ä–µ—à–µ–Ω–∏–µ - [–æ–ø–∏—Å–∞–Ω–∏–µ]' - —Ä–µ—à–µ–Ω–∏–µ"
            
            await update.message.reply_text(report, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

    async def handle_obsidian_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Obsidian."""
        try:
            stats = obsidian_manager.get_statistics()
            
            report = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Obsidian</b>\n\n"
            report += f"üìù –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {stats['total_notes']}\n"
            report += f"üìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤: {len(stats['projects'])}\n\n"
            
            report += "üìÇ <b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
            for category, count in stats['by_category'].items():
                if count > 0:
                    category_name = category.replace('-', ' ').title()
                    report += f"   {category_name}: {count}\n"
            
            if stats['recent_notes']:
                report += "\nüïí <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:</b>\n"
                for note in stats['recent_notes'][:5]:
                    category_emoji = {
                        '01-–°—Ç—Ä–∞—Ç–µ–≥–∏–∏': 'üéØ',
                        '02-–†–µ—à–µ–Ω–∏—è': 'ü§î',
                        '03-–õ–æ–≥–∏': 'üìù',
                        '04-–ü—Ä–æ–µ–∫—Ç—ã': 'üìÅ',
                        '05-–í—Å—Ç—Ä–µ—á–∏': 'üë•',
                        '06-–ó–∞–¥–∞—á–∏': '‚úÖ',
                        '07-–§–∏–Ω–∞–Ω—Å—ã': 'üí∞',
                        '08-–ü–∞—Ä—Ç–Ω–µ—Ä—ã': 'ü§ù',
                        '09-–ö–ª–∏–µ–Ω—Ç—ã': 'üë§',
                        '10-–î–æ–∫—É–º–µ–Ω—Ç—ã': 'üìÑ'
                    }.get(note['category'], 'üìã')
                    
                    report += f"   {category_emoji} {note['title']} ({note['modified']})\n"
            
            if stats['projects']:
                report += "\nüìÅ <b>–ü—Ä–æ–µ–∫—Ç—ã:</b>\n"
                for project in stats['projects'][:5]:
                    report += f"   üìÅ {project}\n"
            
            report += "\nüí° <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            report += "‚Ä¢ '–ù–∞–π–¥–∏ –≤ obsidian [–∑–∞–ø—Ä–æ—Å]' - –ø–æ–∏—Å–∫\n"
            report += "‚Ä¢ '–°–æ–∑–¥–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é [–Ω–∞–∑–≤–∞–Ω–∏–µ]: [–æ–ø–∏—Å–∞–Ω–∏–µ]' - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è\n"
            report += "‚Ä¢ '–°–æ–∑–¥–∞–π —Ä–µ—à–µ–Ω–∏–µ [–Ω–∞–∑–≤–∞–Ω–∏–µ]: –ø—Ä–æ–±–ª–µ–º–∞ - [–æ–ø–∏—Å–∞–Ω–∏–µ], —Ä–µ—à–µ–Ω–∏–µ - [–æ–ø–∏—Å–∞–Ω–∏–µ]' - —Ä–µ—à–µ–Ω–∏–µ"
            
            await update.message.reply_text(report, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å–∞
        if re.search(r"(–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å–∞|–º–µ—Ç—Ä–∏–∫–∏ –±–∏–∑–Ω–µ—Å–∞|–≤—ã–≥—Ä—É–∑–∏ roi|–≤—ã–≥—Ä—É–∑–∏ ltv|–≤—ã–≥—Ä—É–∑–∏ cac)", user_text, re.I):
            import core.analytics
            metrics = core.analytics.business_analytics.get_business_metrics(period='–º–µ—Å—è—Ü')
            text = (
                f"üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å–∞ –∑–∞ –º–µ—Å—è—Ü</b>\n\n"
                f"‚Ä¢ ROI: {metrics['roi']}%\n"
                f"‚Ä¢ –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å: {metrics['turnover']} —Ä–∞–∑–∞\n"
                f"‚Ä¢ CAC: {metrics['cac']:.0f} ‚ÇΩ\n"
                f"‚Ä¢ LTV: {metrics['ltv']:.0f} ‚ÇΩ\n\n"
                f"‚Äî –í—ã—Ä—É—á–∫–∞: {metrics['revenue']:.0f} ‚ÇΩ\n"
                f"‚Äî –ü—Ä–∏–±—ã–ª—å: {metrics['profit']:.0f} ‚ÇΩ\n"
                f"‚Äî –ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {metrics['num_new_clients']}\n"
                f"‚Äî –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {metrics['avg_deal']:.0f} ‚ÇΩ"
            )
            await update.message.reply_text(text, parse_mode='HTML')
            return

    async def handle_add_employee(update, context):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É"""
        user_text = update.message.text.lower()
        
        # –ü–∞—Ä—Å–∏–º: "–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ @ivan_petrov –º–µ–Ω–µ–¥–∂–µ—Ä"
        match = re.search(r"–¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (.+?) (@\w+) (.+)", user_text)
        if not match:
            await update.message.reply_text(
                "‚ùå –§–æ—Ä–º–∞—Ç: '–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ [–ò–º—è] [@username] [–î–æ–ª–∂–Ω–æ—Å—Ç—å]'\n"
                "–ü—Ä–∏–º–µ—Ä: '–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ @ivan_petrov –º–µ–Ω–µ–¥–∂–µ—Ä'"
            )
            return
        
        name, telegram_id, role = match.groups()
        telegram_id = telegram_id.replace('@', '')
        
        success = core.team_manager.team_manager.add_employee(
            name=name, 
            telegram_id=telegram_id, 
            role=role,
            chat_id=str(update.message.chat_id)
        )
        
        if success:
            await update.message.reply_text(
                f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É!\n"
                f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {role}\n"
                f"Telegram: @{telegram_id}"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")

    async def handle_assign_task(update, context):
        """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"""
        user_text = update.message.text
        
        # –ü–∞—Ä—Å–∏–º: "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É @ivan_petrov –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–æ 2024-01-15 –≤—ã—Å–æ–∫–∞—è"
    match = re.search(r"–Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É (@\w+) (.+?) –¥–æ (\d{4}-\d{2}-\d{2})(?: (.+))?", user_text)
    if not match:
        await update.message.reply_text(
            "‚ùå –§–æ—Ä–º–∞—Ç: '–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É [@username] [–ó–∞–¥–∞—á–∞] –¥–æ [YYYY-MM-DD] [–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç]'\n"
            "–ü—Ä–∏–º–µ—Ä: '–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É @ivan_petrov –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–æ 2024-01-15 –≤—ã—Å–æ–∫–∞—è'"
        )
        return
    
    telegram_id, task, deadline, priority = match.groups()
    telegram_id = telegram_id.replace('@', '')
    priority = priority or 'medium'
    
    success = core.team_manager.team_manager.assign_task(
        employee_id=telegram_id,
        task=task,
        deadline=deadline,
        priority=priority
    )
    
    if success:
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!\n"
            f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: @{telegram_id}\n"
            f"–ó–∞–¥–∞—á–∞: {task}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {deadline}\n"
            f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}"
        )
    else:
        await update.message.reply_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–µ")

async def handle_my_tasks(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏"""
    user_id = str(update.message.from_user.id)
    tasks = core.team_manager.team_manager.get_employee_tasks(user_id)
    
    if not tasks:
        await update.message.reply_text("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!")
        return
    
    text = f"üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ ({len(tasks)}):\n\n"
    
    for task in tasks:
        deadline = datetime.fromisoformat(task['deadline'])
        days_left = (deadline - datetime.now()).days
        status_emoji = "üî¥" if days_left < 0 else "üü°" if days_left <= 2 else "üü¢"
        
        text += f"{status_emoji} {task['task']}\n"
        text += f"   –î–µ–¥–ª–∞–π–Ω: {task['deadline']} (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)\n"
        text += f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task['priority']}\n"
        if task['description']:
            text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}\n"
        text += "\n"
    
    await update.message.reply_text(text)

async def handle_complete_task(update, context):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    user_text = update.message.text
    user_id = str(update.message.from_user.id)
    
    # –ü–∞—Ä—Å–∏–º: "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É task_1 –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤"
    match = re.search(r"–∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É (\w+) (.+)", user_text)
    if not match:
        await update.message.reply_text(
            "‚ùå –§–æ—Ä–º–∞—Ç: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É [ID_–∑–∞–¥–∞—á–∏] [–û—Ç—á—ë—Ç]'\n"
            "–ü—Ä–∏–º–µ—Ä: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É task_1 –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞'"
        )
        return
    
    task_id, report = match.groups()
    
    success = core.team_manager.team_manager.complete_task(
        task_id=task_id,
        employee_id=user_id,
        report=report
    )
    
    if success:
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–û—Ç—á—ë—Ç: {report}"
        )
    else:
        await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º")

async def handle_daily_report(update, context):
    """–ü–æ–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
    user_text = update.message.text
    user_id = str(update.message.from_user.id)
    
    # –ü–∞—Ä—Å–∏–º: "–û—Ç—á—ë—Ç: –°–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–ª –Ω–∞–¥ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–µ–π, –∑–∞–≤–µ—Ä—à–∏–ª 2 –∑–∞–¥–∞—á–∏"
    match = re.search(r"–æ—Ç—á—ë—Ç: (.+)", user_text, re.I)
    if not match:
        await update.message.reply_text(
            "‚ùå –§–æ—Ä–º–∞—Ç: '–û—Ç—á—ë—Ç: [–≤–∞—à –æ—Ç—á—ë—Ç]'\n"
            "–ü—Ä–∏–º–µ—Ä: '–û—Ç—á—ë—Ç: –°–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–ª –Ω–∞–¥ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–µ–π, –∑–∞–≤–µ—Ä—à–∏–ª 2 –∑–∞–¥–∞—á–∏'"
        )
        return
    
    report = match.group(1)
    
    success = core.team_manager.team_manager.submit_daily_report(
        employee_id=user_id,
        report=report
    )
    
    if success:
        await update.message.reply_text(
            f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
            f"üìù –í–∞—à –æ—Ç—á—ë—Ç:\n{report}"
        )
    else:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–º–∞–Ω–¥–µ")

async def handle_team_status(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã"""
    status = core.team_manager.team_manager.get_team_status()
    
    text = f"üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã\n\n"
    text += f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {status['total_tasks']}\n"
    text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {status['completed_tasks']}\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {status['active_tasks']}\n"
    text += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {status['completion_rate']:.1f}%\n\n"
    
    text += f"üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n"
    for name, emp_stats in status['employees'].items():
        text += f"‚Ä¢ {name} ({emp_stats['role']})\n"
        text += f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {emp_stats['active_tasks']}\n"
        text += f"  –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {emp_stats['completed_tasks']}\n\n"
    
    if status['owner_vacation_mode']:
        text += "üèñÔ∏è –†–µ–∂–∏–º '–í–ª–∞–¥–µ–ª–µ—Ü –≤ –æ—Ç–ø—É—Å–∫–µ' –ê–ö–¢–ò–í–ï–ù"
    
    await update.message.reply_text(text)

async def handle_vacation_mode(update, context):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–º '–≤–ª–∞–¥–µ–ª–µ—Ü –≤ –æ—Ç–ø—É—Å–∫–µ'"""
    user_text = update.message.text.lower()
    
    if "–≤–∫–ª—é—á–∏—Ç—å" in user_text or "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" in user_text:
        success = core.team_manager.team_manager.enable_vacation_mode()
        if success:
            await update.message.reply_text(
                "üèñÔ∏è –†–µ–∂–∏–º '–í–ª–∞–¥–µ–ª–µ—Ü –≤ –æ—Ç–ø—É—Å–∫–µ' –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!\n\n"
                "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –±—É–¥–µ—Ç:\n"
                "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
                "‚Ä¢ –°–æ–±–∏—Ä–∞—Ç—å –æ—Ç—á—ë—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            )
    elif "–≤—ã–∫–ª—é—á–∏—Ç—å" in user_text or "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" in user_text:
        success = core.team_manager.team_manager.disable_vacation_mode()
        if success:
            await update.message.reply_text("‚úÖ –†–µ–∂–∏–º '–í–ª–∞–¥–µ–ª–µ—Ü –≤ –æ—Ç–ø—É—Å–∫–µ' –æ—Ç–∫–ª—é—á—ë–Ω")
    else:
        await update.message.reply_text(
            "‚ùå –§–æ—Ä–º–∞—Ç: '–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ø—É—Å–∫–∞' –∏–ª–∏ '–í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ø—É—Å–∫–∞'"
        )

async def handle_overdue_tasks(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    overdue = core.team_manager.team_manager.get_overdue_tasks()
    
    if not overdue:
        await update.message.reply_text("‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç!")
        return
    
    text = f"üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ ({len(overdue)}):\n\n"
    
    for task in overdue:
        emp_name = core.team_manager.team_manager.team_data['employees'][task['employee_id']]['name']
        text += f"‚Ä¢ {emp_name}: {task['task']}\n"
        text += f"  –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {task['days_overdue']} –¥–Ω.\n"
        text += f"  –î–µ–¥–ª–∞–π–Ω –±—ã–ª: {task['deadline']}\n\n"
    
    await update.message.reply_text(text)

async def handle_payment_control_report(update, context):
    """–û—Ç—á—ë—Ç –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—é –ø–ª–∞—Ç–µ–∂–µ–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    report = core.payment_control.payment_control.get_control_report()
    text = core.payment_control.payment_control.format_telegram_report(report)
    
    await update.message.reply_text(text, parse_mode='HTML')

async def handle_weekly_control_summary(update, context):
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—é"""
    text = core.payment_control.payment_control.get_weekly_summary()
    
    await update.message.reply_text(text, parse_mode='HTML')

async def handle_critical_alerts(update, context):
    """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    alerts = core.payment_control.payment_control.get_critical_alerts()
    
    if not alerts:
        await update.message.reply_text("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤ –Ω–µ—Ç!")
        return
    
    text = "üö® <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n\n"
    for alert in alerts:
        text += f"‚Ä¢ {alert}\n"
    
    await update.message.reply_text(text, parse_mode='HTML')

async def handle_unclosed_payments_report(update, context):
    """–û—Ç—á—ë—Ç –ø–æ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º –ø–ª–∞—Ç–µ–∂–∞–º"""
    unclosed = core.payment_control.payment_control.check_unclosed_payments()
    
    if not unclosed:
        await update.message.reply_text("‚úÖ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞–∫—Ä—ã—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏!")
        return
    
    text = f"‚ö†Ô∏è <b>–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –ø–ª–∞—Ç–µ–∂–∏ ({len(unclosed)}):</b>\n\n"
    
    for payment in unclosed:
        critical_mark = "üö® " if payment['days_since_payment'] > 30 else ""
        text += f"{critical_mark}üí∞ {payment['amount']:,} ‚ÇΩ ‚Äî {payment['counterparty']}\n"
        text += f"   üìÖ {payment['date']} ({payment['days_since_payment']} –¥–Ω. –Ω–∞–∑–∞–¥)\n"
        text += f"   üìã –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {', '.join(payment['missing_docs'])}\n"
        text += f"   üè¢ –ü—Ä–æ–µ–∫—Ç: {payment['project']}\n"
        text += f"   üîó ID: {payment['payment_id']}\n\n"
    
    total_amount = sum(p['amount'] for p in unclosed)
    text += f"üíµ <b>–û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,} ‚ÇΩ</b>"
    
    await update.message.reply_text(text, parse_mode='HTML')

async def handle_orphaned_documents_report(update, context):
    """–û—Ç—á—ë—Ç –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –±–µ–∑ –æ–ø–ª–∞—Ç—ã"""
    orphaned = core.payment_control.payment_control.check_documents_without_payment()
    
    if not orphaned:
        await update.message.reply_text("‚úÖ –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–ª–∞—Ç–µ–∂–∞–º!")
        return
    
    text = f"‚ö†Ô∏è <b>–î–æ–∫—É–º–µ–Ω—Ç—ã –±–µ–∑ –æ–ø–ª–∞—Ç—ã ({len(orphaned)}):</b>\n\n"
    
    for doc in orphaned:
        critical_mark = "üö® " if doc['days_since_doc'] > 30 else ""
        text += f"{critical_mark}üìÑ {doc['doc_type'].title()} ‚Ññ{doc['doc_number']}\n"
        text += f"   üí∞ {doc['amount']:,} ‚ÇΩ ‚Äî {doc['counterparty']}\n"
        text += f"   üìÖ {doc['doc_date']} ({doc['days_since_doc']} –¥–Ω. –Ω–∞–∑–∞–¥)\n"
        text += f"   üîó ID: {doc['doc_id']}\n\n"
    
    total_amount = sum(d['amount'] for d in orphaned)
    text += f"üíµ <b>–û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,} ‚ÇΩ</b>"
    
    await update.message.reply_text(text, parse_mode='HTML')

async def handle_inbox_summary(update, context):
    """–°–≤–æ–¥–∫–∞ –ø–æ –≤—Ö–æ–¥—è—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º"""
    summary = core.inbox_monitor.inbox_monitor.get_inbox_summary()
    text = core.inbox_monitor.inbox_monitor.format_telegram_summary(summary)
    
    await update.message.reply_text(text, parse_mode='HTML')

async def handle_attention_messages(update, context):
    """–°–æ–æ–±—â–µ–Ω–∏—è, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è"""
    messages = core.inbox_monitor.inbox_monitor.get_messages_requiring_attention()
    text = core.inbox_monitor.inbox_monitor.format_attention_report(messages)
    
    await update.message.reply_text(text, parse_mode='HTML')

async def handle_overdue_responses(update, context):
    """–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (3+ –¥–Ω—è)"""
    messages = core.inbox_monitor.inbox_monitor.get_overdue_responses()
    text = core.inbox_monitor.inbox_monitor.format_overdue_report(messages)
    
    await update.message.reply_text(text, parse_mode='HTML')

async def handle_forgotten_messages(update, context):
    """–ó–∞–±—ã—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (7+ –¥–Ω–µ–π)"""
    messages = core.inbox_monitor.inbox_monitor.get_forgotten_messages()
    text = core.inbox_monitor.inbox_monitor.format_forgotten_report(messages)
    
    await update.message.reply_text(text, parse_mode='HTML')

async def handle_reminder_suggestions(update, context):
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    suggestions = core.inbox_monitor.inbox_monitor.get_reminder_suggestions()
    
    if not suggestions:
        await update.message.reply_text("‚úÖ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!")
        return
    
    text = "üì≤ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:</b>\n\n"
    for i, suggestion in enumerate(suggestions, 1):
        text += f"{i}. {suggestion}\n\n"
    
    await update.message.reply_text(text, parse_mode='HTML')

async def handle_mark_responded(update, context):
    """–û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ"""
    user_text = update.message.text.lower()
    
    # –ü–∞—Ä—Å–∏–º: "–û—Ç–º–µ—Ç–∏—Ç—å –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–º [ID —Å–æ–æ–±—â–µ–Ω–∏—è]"
    match = re.search(r"–æ—Ç–º–µ—Ç–∏—Ç—å –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–º ([a-zA-Z0-9_-]+)", user_text)
    if not match:
        await update.message.reply_text(
            "‚ùå –§–æ—Ä–º–∞—Ç: '–û—Ç–º–µ—Ç–∏—Ç—å –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–º [ID —Å–æ–æ–±—â–µ–Ω–∏—è]'\n"
            "–ü—Ä–∏–º–µ—Ä: '–û—Ç–º–µ—Ç–∏—Ç—å –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–º msg_20240120_143022'"
        )
        return
    
    message_id = match.group(1)
    core.inbox_monitor.inbox_monitor.mark_as_responded(message_id)
    
    await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ!")

async def handle_mark_ignored(update, context):
    """–û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ"""
    user_text = update.message.text.lower()
    
    # –ü–∞—Ä—Å–∏–º: "–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º [ID —Å–æ–æ–±—â–µ–Ω–∏—è]"
    match = re.search(r"–æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º ([a-zA-Z0-9_-]+)", user_text)
    if not match:
        await update.message.reply_text(
            "‚ùå –§–æ—Ä–º–∞—Ç: '–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º [ID —Å–æ–æ–±—â–µ–Ω–∏—è]'\n"
            "–ü—Ä–∏–º–µ—Ä: '–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º msg_20240120_143022'"
        )
        return
    
    message_id = match.group(1)
    core.inbox_monitor.inbox_monitor.mark_as_ignored(message_id)
    
    await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ!")

async def handle_add_message(update, context):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    user_text = update.message.text.lower()
    
    # –ü–∞—Ä—Å–∏–º: "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ email –¢–∏–º—É—Ä –ö–ü –ø–æ –ø—Ä–æ–µ–∫—Ç—É –≤—ã—Å–æ–∫–∏–π"
    match = re.search(r"–¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (\w+) ([^:]+): (.+)", user_text)
    if not match:
        await update.message.reply_text(
            "‚ùå –§–æ—Ä–º–∞—Ç: '–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ [–∫–∞–Ω–∞–ª] [–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å]: [—Ç–µ–º–∞]'\n"
            "–ü—Ä–∏–º–µ—Ä: '–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ email –¢–∏–º—É—Ä: –ö–ü –ø–æ –ø—Ä–æ–µ–∫—Ç—É'\n"
            "–ö–∞–Ω–∞–ª—ã: email, telegram, crm, google_docs"
        )
        return
    
    channel, sender, subject = match.groups()
    channel = channel.strip()
    sender = sender.strip()
    subject = subject.strip()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    priority = 'normal'
    if any(word in user_text for word in ['–≤—ã—Å–æ–∫–∏–π', 'high', '—Å—Ä–æ—á–Ω–æ', 'urgent']):
        priority = 'high'
    elif any(word in user_text for word in ['—Å—Ä–µ–¥–Ω–∏–π', 'medium']):
        priority = 'medium'
    
    message_id = core.inbox_monitor.inbox_monitor.add_message(
        channel=channel,
        sender=sender,
        subject=subject,
        content=subject,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º—É –∫–∞–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        timestamp=datetime.now().isoformat(),
        priority=priority,
        requires_response=True
    )
    
    await update.message.reply_text(
        f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!\n"
        f"üìù ID: {message_id}\n"
        f"üìß –ö–∞–Ω–∞–ª: {channel}\n"
        f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender}\n"
        f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}"
    )

async def handle_global_search(update, context):
    user_text = update.message.text
    import re
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    m = re.search(r'(–≥–¥–µ –æ–±—Å—É–∂–¥–∞–ª–∏|–Ω–∞–π–¥–∏ —Ñ–∞–π–ª|–Ω–∞–π–¥–∏|–ø–æ–∏—Å–∫)\s+(.+)', user_text, re.I)
    if not m:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
        return
    query = m.group(2).strip()
    results = core.global_search.global_search(query)
    text = core.global_search.format_global_search_results(results, query)
    await update.message.reply_text(text, parse_mode='HTML')

async def handle_cashflow_forecast(update, context):
    result = core.finances.cashflow_forecast()
    text = (
        f"üí∏ <b>–ü—Ä–æ–≥–Ω–æ–∑ Cash Flow</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{result['balance']:,}</b> —Ä—É–±.\n"
        f"–°—Ä–µ–¥–Ω–∏–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥/–¥–µ–Ω—å: <b>{result['avg_daily_expense']:,}</b> —Ä—É–±.\n\n"
        f"<b>{result['comment']}</b>"
    )
    await update.message.reply_text(text, parse_mode='HTML')

async def handle_digest(update, context):
    digest = core.digest.get_digest()
    text = core.digest.format_digest(digest)
    await update.message.reply_text(text, parse_mode='HTML')

# --- –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ "–ê–Ω—Ç–∏—Ä–∞–∑—Ä—ã–≤" ---
async def handle_antistress_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ä–µ–∂–∏–º–µ '–ê–Ω—Ç–∏—Ä–∞–∑—Ä—ã–≤'."""
    chat_id = update.effective_chat.id
    
    quiet_mode_enabled = is_quiet_mode_enabled(chat_id)
    quiet_mode_text = "–í—ã–∫–ª—é—á–∏—Ç—å —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º" if quiet_mode_enabled else "–í–∫–ª—é—á–∏—Ç—å —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º"
    quiet_mode_callback = "antistress_quiet_off" if quiet_mode_enabled else "antistress_quiet_on"
    
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data='antistress_prioritize')],
        [InlineKeyboardButton("–†–∞–∑–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data='antistress_meetings')],
        [InlineKeyboardButton(quiet_mode_text, callback_data=quiet_mode_callback)],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è —Å—Ç—Ä–µ—Å—Å. –î–∞–≤–∞–π –ø–æ–º–æ–≥—É. –ß—Ç–æ –¥–µ–ª–∞–µ–º?",
        reply_markup=reply_markup
    )

async def antistress_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º–∞ '–ê–Ω—Ç–∏—Ä–∞–∑—Ä—ã–≤'."""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    
    if query.data == 'antistress_prioritize':
        tasks_summary = core.antistress.get_tasks_for_prioritization()
        await query.edit_message_text(text=tasks_summary, parse_mode="HTML")
        
    elif query.data == 'antistress_meetings':
        meetings = core.antistress.get_todays_meetings()
        if not meetings:
            await query.edit_message_text(text="–ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å—Ç—Ä–µ—á –Ω–µ—Ç. –ú–æ–∂–Ω–æ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è.")
            return
        
        context.user_data['meetings_to_cancel'] = [m['id'] for m in meetings]
        meetings_text = "<b>–í—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        for meeting in meetings:
            start_time = meeting['start'].get('dateTime', meeting['start'].get('date'))
            meetings_text += f"‚Ä¢ {meeting['summary']} ({start_time})\n"
        meetings_text += "\n–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?"
        
        keyboard = [
            [InlineKeyboardButton("–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ", callback_data='antistress_cancel_confirm')],
            [InlineKeyboardButton("–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data='antistress_cancel_decline')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=meetings_text, reply_markup=reply_markup, parse_mode="HTML")

    elif query.data == 'antistress_cancel_confirm':
        event_ids = context.user_data.get('meetings_to_cancel', [])
        if not event_ids:
            await query.edit_message_text("–ù–µ –Ω–∞—à–µ–ª, —á—Ç–æ –æ—Ç–º–µ–Ω—è—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞—Ä–µ–ª.")
            return
        result = core.antistress.cancel_meetings_by_ids(event_ids)
        await query.edit_message_text(f"–û—Ç–º–µ–Ω–µ–Ω–æ {result['cancelled']} –≤—Å—Ç—Ä–µ—á. –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–≤–æ–±–æ–¥–µ–Ω.")
        context.user_data.pop('meetings_to_cancel', None)

    elif query.data == 'antistress_cancel_decline':
        await query.edit_message_text("–•–æ—Ä–æ—à–æ, –≤—Å—Ç—Ä–µ—á–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.")
        context.user_data.pop('meetings_to_cancel', None)

    elif query.data == 'antistress_quiet_on':
        set_quiet_mode(chat_id, True)
        summary = core.antistress.get_critical_summary()
        await query.edit_message_text(
            "–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω. –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n" + summary,
            parse_mode="HTML"
        )
        
    elif query.data == 'antistress_quiet_off':
        set_quiet_mode(chat_id, False)
        await query.edit_message_text("–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")

async def handle_meeting_prep(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–æ—Ç–æ–≤–∏—Ç —Å–≤–æ–¥–∫—É –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏."""
    user_text = update.message.text
    match = re.search(r"(?:–ø–æ–¥–≥–æ—Ç–æ–≤—å –∏–Ω—Ñ—É|–ø–æ–¥–≥–æ—Ç–æ–≤—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ|–∏–Ω—Ñ–∞ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏) —Å (.+)", user_text, re.I)
    if not match:
        await update.message.reply_text("–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å, —Å –∫–µ–º –≤—Å—Ç—Ä–µ—á–∞. –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.")
        return
        
    person_name = match.group(1).strip()
    await update.message.reply_text(f"–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ '{person_name}'... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.")
    
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
        from core import meeting_prep
        report_data = meeting_prep.prepare_for_meeting(person_name)
        report_text = meeting_prep.format_meeting_prep(report_data)
        await update.message.reply_text(report_text, parse_mode="HTML")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")

async def ask_daily_focus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ñ–æ–∫—É—Å–µ –Ω–∞ –¥–µ–Ω—å"""
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="focus_skip")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üéØ –ù–∞ —á—ë–º —Å–µ–≥–æ–¥–Ω—è —Ñ–æ–∫—É—Å?\n\n"
        "–ù–∞–ø–∏—à–∏ –≥–ª–∞–≤–Ω—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, "
        "–∏ —è –ø–æ–º–æ–≥—É –Ω–µ –æ—Ç–≤–ª–µ–∫–∞—Ç—å—Å—è –Ω–∞ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ.",
        reply_markup=reply_markup
    )

async def handle_focus_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ñ–æ–∫—É—Å–µ –¥–Ω—è"""
    focus_text = update.message.text
    focus_manager.set_daily_focus(focus_text)
    
    await update.message.reply_text(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°–µ–≥–æ–¥–Ω—è —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞:\n"
        f"<b>{focus_text}</b>\n\n"
        f"–Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å, —á—Ç–æ–±—ã —Ç—ã –Ω–µ –æ—Ç–≤–ª–µ–∫–∞–ª—Å—è, –∏ –Ω–∞–ø–æ–º–Ω—é "
        f"–µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –Ω–µ –ø–æ —Ñ–æ–∫—É—Å—É.",
        parse_mode='HTML'
    )

async def handle_task_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–Ω–µ–≤–Ω–æ–º—É —Ñ–æ–∫—É—Å—É"""
    message_text = update.message.text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    if not any(keyword in message_text for keyword in ["–¥–æ–±–∞–≤–∏—Ç—å", "–∑–∞–¥–∞—á–∞", "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", "–≤—Å—Ç—Ä–µ—á–∞"]):
        return
    
    # –ü–∞—Ä—Å–∏–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ GPT
    task_data = await parse_task_intent(message_text)
    if not task_data or task_data.get('intent') != 'add':
        return
    
    task_text = task_data.get('task_text', '')
    if not focus_manager.is_task_in_focus(task_text):
        keyboard = [
            [
                InlineKeyboardButton("–û—Ç–ª–æ–∂–∏—Ç—å ‚û°Ô∏è", callback_data=f"postpone_task:{task_text}"),
                InlineKeyboardButton("–í—Å—ë —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ‚úÖ", callback_data=f"force_add_task:{task_text}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        current_focus = focus_manager.get_daily_focus() or "–Ω–µ –∑–∞–¥–∞–Ω"
        await update.message.reply_text(
            f"‚ö†Ô∏è –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–∞ –∑–∞–¥–∞—á–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–µ–∫—É—â–∏–º —Ñ–æ–∫—É—Å–æ–º:\n"
            f"<b>{current_focus}</b>\n\n"
            f"–•–æ—á–µ—à—å, –æ—Ç–ª–æ–∂–∏–º –µ—ë –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å?",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return False
    return True

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "focus_skip":
        await query.message.edit_text(
            "–•–æ—Ä–æ—à–æ! –°–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ —Å—Ç—Ä–æ–≥–æ–≥–æ —Ñ–æ–∫—É—Å–∞. "
            "–ù–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–º–æ–≥—É —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π –∑–∞–¥–∞—á."
        )
    
    elif query.data.startswith("postpone_task:"):
        task_text = query.data.replace("postpone_task:", "")
        keyboard = [
            [
                InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data=f"set_task_date:{task_text}:tomorrow"),
                InlineKeyboardButton("–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", callback_data=f"set_task_date:{task_text}:day_after")
            ],
            [
                InlineKeyboardButton("–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", callback_data=f"set_task_date:{task_text}:next_week"),
                InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data=f"choose_date:{task_text}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            f"üìÖ –í—ã–±–µ—Ä–∏, –Ω–∞ –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–¥–∞—á—É:\n"
            f"<b>{task_text}</b>",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    elif query.data.startswith("set_task_date:"):
        _, task_text, when = query.data.split(":", 2)
        today = datetime.now().date()
        
        if when == "tomorrow":
            new_date = (today + timedelta(days=1)).strftime("%Y-%m-%d")
        elif when == "day_after":
            new_date = (today + timedelta(days=2)).strftime("%Y-%m-%d")
        elif when == "next_week":
            new_date = (today + timedelta(days=7)).strftime("%Y-%m-%d")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –Ω–æ–≤—É—é –¥–∞—Ç—É
        add_task(task_text, new_date)
        
        await query.message.edit_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ {new_date}:\n"
            f"<b>{task_text}</b>",
            parse_mode='HTML'
        )
    
    elif query.data.startswith("force_add_task:"):
        task_text = query.data.replace("force_add_task:", "")
        today = datetime.now().strftime("%Y-%m-%d")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        add_task(task_text, today)
        
        await query.message.edit_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
            f"<b>{task_text}</b>",
            parse_mode='HTML'
        )
    
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback ...

async def initialize_scheduler(app):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    scheduler = BackgroundScheduler(timezone=pytz.timezone('Europe/Moscow'))
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –¥–Ω—è –≤ 9:00
    scheduler.add_job(
        ask_daily_focus_to_all_chats,
        'cron',
        hour=9,
        minute=0,
        args=[app]
    )
    
    scheduler.start()

async def ask_daily_focus_to_all_chats(app):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Ñ–æ–∫—É—Å–∞ –¥–Ω—è –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã"""
    chat_ids = load_active_chat_ids()
    for chat_id in chat_ids:
        if not is_quiet_mode_enabled(chat_id):
            try:
                keyboard = [
                    [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="focus_skip")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await app.bot.send_message(
                    chat_id=chat_id,
                    text="üéØ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞ —á—ë–º —Å–µ–≥–æ–¥–Ω—è —Ñ–æ–∫—É—Å?\n\n"
                         "–ù–∞–ø–∏—à–∏ –≥–ª–∞–≤–Ω—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, "
                         "–∏ —è –ø–æ–º–æ–≥—É –Ω–µ –æ—Ç–≤–ª–µ–∫–∞—Ç—å—Å—è –Ω–∞ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ.",
                    reply_markup=reply_markup
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ–∫—É—Å–∞ –≤ —á–∞—Ç {chat_id}: {e}")

async def handle_on_site_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Ä–µ–∂–∏–º–∞ '–ù–∞ –æ–±—ä–µ–∫—Ç–µ'"""
    user_text = update.message.text.lower()
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞
    if re.search(r"(—è –Ω–∞ –æ–±—ä–µ–∫—Ç–µ|–Ω–∞ —Å—Ç—Ä–æ–π–∫–µ|–Ω–∞ –≤—ã–µ–∑–¥–µ|–Ω–µ —Ç—Ä–æ–≥–∞–π –ª–∏—à–Ω–∏–º)", user_text):
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_match = re.search(r"–ø—Ä–æ–µ–∫—Ç[–∞-—è]* [\¬´\"]?([^\¬ª\"\n]+)[\¬ª\"]?", user_text)
        project = project_match.group(1) if project_match else None
        
        if not project:
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            keyboard = []
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            projects = finances.get_active_projects()
            for i in range(0, len(projects), 2):
                row = [
                    InlineKeyboardButton(projects[i], callback_data=f"on_site_project:{projects[i]}")
                ]
                if i + 1 < len(projects):
                    row.append(InlineKeyboardButton(projects[i+1], callback_data=f"on_site_project:{projects[i+1]}"))
                keyboard.append(row)
            keyboard.append([InlineKeyboardButton("‚ùå –ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞", callback_data="on_site_project:none")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üèóÔ∏è –í–∫–ª—é—á–∞—é —Ä–µ–∂–∏–º ¬´–ù–∞ –æ–±—ä–µ–∫—Ç–µ¬ª\n\n"
                "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã —è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
        else:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º
            mode_info = work_mode_manager.activate_on_site_mode(project)
            await update.message.reply_text(
                f"üèóÔ∏è –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º ¬´–ù–∞ –æ–±—ä–µ–∫—Ç–µ¬ª\n"
                f"–ü—Ä–æ–µ–∫—Ç: <b>{project}</b>\n\n"
                f"–ë—É–¥—É –±–µ—Å–ø–æ–∫–æ–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.\n"
                f"–ß—Ç–æ–±—ã –≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º, –Ω–∞–ø–∏—à–∏: <i>—è –≤ –æ—Ñ–∏—Å–µ</i>",
                parse_mode='HTML'
            )
        return True
    
    # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞
    if re.search(r"(—è –≤ –æ—Ñ–∏—Å–µ|–≤–µ—Ä–Ω—É–ª—Å—è|–∑–∞–∫–æ–Ω—á–∏–ª|–≤—ã–∫–ª—é—á–∏ —Ä–µ–∂–∏–º)", user_text):
        if work_mode_manager.deactivate_mode():
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await notification_manager.send_queued_notifications(update.effective_chat.id)
            await update.message.reply_text(
                "‚úÖ –†–µ–∂–∏–º ¬´–ù–∞ –æ–±—ä–µ–∫—Ç–µ¬ª –≤—ã–∫–ª—é—á–µ–Ω.\n"
                "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É —Ä–∞–±–æ—Ç—ã."
            )
        return True
    
    return False

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("on_site_project:"):
        project = query.data.replace("on_site_project:", "")
        project = None if project == "none" else project
        
        mode_info = work_mode_manager.activate_on_site_mode(project)
        project_text = f"–ü—Ä–æ–µ–∫—Ç: <b>{project}</b>" if project else "–ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É"
        
        await query.message.edit_text(
            f"üèóÔ∏è –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º ¬´–ù–∞ –æ–±—ä–µ–∫—Ç–µ¬ª\n"
            f"{project_text}\n\n"
            f"–ë—É–¥—É –±–µ—Å–ø–æ–∫–æ–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.\n"
            f"–ß—Ç–æ–±—ã –≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º, –Ω–∞–ø–∏—à–∏: <i>—è –≤ –æ—Ñ–∏—Å–µ</i>",
            parse_mode='HTML'
        )
        return
    
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback ...

async def send_notification(chat_id: int, text: str, priority: str = 'normal', project: Optional[str] = None, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã"""
    if not work_mode_manager.should_notify(priority, project):
        print(f"[DEBUG] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã: {text}")
        return
    
    try:
        await app.bot.send_message(chat_id=chat_id, text=text, **kwargs)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def handle_document_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    user_text = update.message.text.lower()
    
    # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏ –¥–∞—Ç–µ
    if "–Ω–∞–π–¥–∏" in user_text or "–ø–æ–∫–∞–∂–∏" in user_text:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        doc_type = None
        date_from = None
        date_to = None
        has_signatures = None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if "–∞–∫—Ç" in user_text:
            doc_type = "–∞–∫—Ç"
        elif "—Å—á–µ—Ç" in user_text or "—Å—á—ë—Ç" in user_text:
            doc_type = "—Å—á–µ—Ç"
        elif "–¥–æ–≥–æ–≤–æ—Ä" in user_text:
            doc_type = "–¥–æ–≥–æ–≤–æ—Ä"
        elif "–Ω–∞–∫–ª–∞–¥–Ω–∞—è" in user_text:
            doc_type = "–Ω–∞–∫–ª–∞–¥–Ω–∞—è"
        
        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π
        if "–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏" in user_text or "–Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ" in user_text:
            has_signatures = False
        elif "–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ" in user_text:
            has_signatures = True
        
        # –ò—â–µ–º –¥–∞—Ç—ã
        months = {
            '—è–Ω–≤–∞—Ä': '01', '—Ñ–µ–≤—Ä–∞–ª': '02', '–º–∞—Ä—Ç': '03', '–∞–ø—Ä–µ–ª': '04',
            '–º–∞–π': '05', '–º–∞—è': '05', '–∏—é–Ω': '06', '–∏—é–ª': '07',
            '–∞–≤–≥—É—Å—Ç': '08', '—Å–µ–Ω—Ç—è–±—Ä': '09', '–æ–∫—Ç—è–±—Ä': '10',
            '–Ω–æ—è–±—Ä': '11', '–¥–µ–∫–∞–±—Ä': '12'
        }
        
        # –ü–æ–∏—Å–∫ –º–µ—Å—è—Ü–∞
        for month_name, month_num in months.items():
            if month_name in user_text:
                # –ò—â–µ–º –≥–æ–¥
                year_match = re.search(r'20\d{2}', user_text)
                year = year_match.group(0) if year_match else str(datetime.now().year)
                
                date_from = f"{year}-{month_num}-01"
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
                last_day = "31" if month_num in ['01', '03', '05', '07', '08', '10', '12'] else \
                          "30" if month_num in ['04', '06', '09', '11'] else \
                          "29" if month_num == "02" and int(year) % 4 == 0 else "28"
                date_to = f"{year}-{month_num}-{last_day}"
                break
        
        # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        docs = document_assistant.search_documents(
            query=user_text,
            doc_type=doc_type,
            date_from=date_from,
            date_to=date_to,
            has_signatures=has_signatures
        )
        
        if not docs:
            await update.message.reply_text(
                "üîç –ù–µ –Ω–∞—à–µ–ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "üìÑ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n\n"
        for i, doc in enumerate(docs[:10], 1):
            meta = doc['metadata']
            date_str = f" –æ—Ç {meta['date']}" if meta.get('date') else ""
            number_str = f" ‚Ññ{meta['number']}" if meta.get('number') else ""
            amount_str = f"\n–°—É–º–º–∞: {meta['amount']} —Ä—É–±." if meta.get('amount') else ""
            
            signature_status = "‚úÖ" if doc['has_signatures'] else "‚ùå"
            
            response += (
                f"{i}. {doc['type'].capitalize()}{number_str}{date_str}\n"
                f"üìé {doc['filename']}\n"
                f"‚úçÔ∏è –ü–æ–¥–ø–∏—Å–∏: {signature_status}{amount_str}\n"
                f"üè∑Ô∏è –¢–µ–≥–∏: {', '.join(doc['tags']) if doc['tags'] else '–Ω–µ—Ç'}\n\n"
            )
        
        if len(docs) > 10:
            response += f"... –∏ –µ—â–µ {len(docs) - 10} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = []
        if len(docs) == 1:
            # –î–ª—è –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ - –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [
                    InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data=f"send_doc:{docs[0]['id']}"),
                    InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_doc:{docs[0]['id']}")
                ],
                [
                    InlineKeyboardButton("üîó –°–≤—è–∑–∞—Ç—å —Å –∑–∞–¥–∞—á–µ–π", callback_data=f"link_doc:{docs[0]['id']}"),
                    InlineKeyboardButton("üè∑Ô∏è –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏", callback_data=f"tag_doc:{docs[0]['id']}")
                ]
            ]
        else:
            # –î–ª—è —Å–ø–∏—Å–∫–∞ - —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
            keyboard = [
                [InlineKeyboardButton(f"üì§ –î–æ–∫—É–º–µ–Ω—Ç {i}", callback_data=f"send_doc:{doc['id']}")]
                for i, doc in enumerate(docs[:5], 1)
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(response, reply_markup=reply_markup)
        return

async def handle_document_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("send_doc:"):
        doc_id = query.data.replace("send_doc:", "")
        doc = document_assistant.get_document_by_id(doc_id)
        if doc:
            try:
                with open(doc['path'], 'rb') as file:
                    await query.message.reply_document(
                        document=file,
                        filename=doc['filename'],
                        caption=f"üìÑ {doc['type'].capitalize()}\n"
                                f"–î–æ–±–∞–≤–ª–µ–Ω: {doc['added_at'][:10]}"
                    )
            except Exception as e:
                await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
    
    elif query.data.startswith("edit_doc:"):
        doc_id = query.data.replace("edit_doc:", "")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_doc'] = doc_id
        keyboard = [
            [
                InlineKeyboardButton("üìù –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞", callback_data=f"edit_doc_type:{doc_id}"),
                InlineKeyboardButton("üìÖ –î–∞—Ç–∞", callback_data=f"edit_doc_date:{doc_id}")
            ],
            [
                InlineKeyboardButton("üî¢ –ù–æ–º–µ—Ä", callback_data=f"edit_doc_number:{doc_id}"),
                InlineKeyboardButton("üí∞ –°—É–º–º–∞", callback_data=f"edit_doc_amount:{doc_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
            reply_markup=reply_markup
        )
    
    elif query.data.startswith("link_doc:"):
        doc_id = query.data.replace("link_doc:", "")
        # TODO: –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
        await query.message.edit_text(
            "üîÑ –§—É–Ω–∫—Ü–∏—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        )
    
    elif query.data.startswith("tag_doc:"):
        doc_id = query.data.replace("tag_doc:", "")
        context.user_data['tagging_doc'] = doc_id
        await query.message.edit_text(
            "üè∑Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–æ–±–µ–ª.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –¥–æ–≥–æ–≤–æ—Ä –≤–∞–∂–Ω–æ–µ —Å—Ä–æ—á–Ω–æ–µ"
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if 'tagging_doc' in context.user_data:
        doc_id = context.user_data.pop('tagging_doc')
        tags = [tag.strip() for tag in re.split(r'[,\s]+', user_text) if tag.strip()]
        doc = document_assistant.update_document(doc_id, {'tags': tags})
        if doc:
            await update.message.reply_text(
                f"‚úÖ –¢–µ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
                f"üè∑Ô∏è {', '.join(tags)}"
            )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if await handle_document_search(update, context):
        return
    
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...

from core.speech_synthesizer import speech_synthesizer

async def handle_voice_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
    user_text = update.message.text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ–∑–≤—É—á–∫–∏
    voice_commands = ["–æ–∑–≤—É—á—å", "–ø—Ä–æ–≥–æ–≤–æ—Ä–∏", "–ø—Ä–æ—á–∏—Ç–∞–π", "—Å–∫–∞–∂–∏"]
    if not any(cmd in user_text for cmd in voice_commands):
        return False
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –æ–∑–≤—É—á–∏—Ç—å
    text_to_speak = None
    voice_params = {
        "rate": "+0%",
        "volume": "+0%"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if "—Å–≤–æ–¥–∫—É" in user_text or "–æ—Ç—á–µ—Ç" in user_text or "–æ—Ç—á—ë—Ç" in user_text:
        if "—É—Ç—Ä–µ–Ω–Ω" in user_text:
            text_to_speak = await get_morning_summary()
        elif "—Ñ–∏–Ω–∞–Ω—Å" in user_text:
            text_to_speak = await get_financial_summary()
        elif "–∑–∞–¥–∞—á" in user_text:
            text_to_speak = await get_tasks_summary()
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not text_to_speak and update.message.reply_to_message:
        text_to_speak = update.message.reply_to_message.text
    
    if not text_to_speak:
        await update.message.reply_text(
            "üéô –ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω—É–∂–Ω–æ –æ–∑–≤—É—á–∏—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
            "1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ–∑–≤—É—á–∏—Ç—å\n"
            "2. –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Å–≤–æ–¥–∫–∏ (—É—Ç—Ä–µ–Ω–Ω—è—è/—Ñ–∏–Ω–∞–Ω—Å—ã/–∑–∞–¥–∞—á–∏)"
        )
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–æ–ª–æ—Å–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ
    if "–±—ã—Å—Ç—Ä" in user_text:
        voice_params["rate"] = "+30%"
    elif "–º–µ–¥–ª–µ–Ω–Ω" in user_text:
        voice_params["rate"] = "-30%"
    
    if "–≥—Ä–æ–º—á" in user_text:
        voice_params["volume"] = "+30%"
    elif "—Ç–∏—Ö" in user_text:
        voice_params["volume"] = "-30%"
    
    # –í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞
    voice = None
    if "–º—É–∂—Å–∫" in user_text or "–¥–º–∏—Ç—Ä–∏" in user_text:
        voice = "ru-RU-DmitryNeural"
    elif "–∂–µ–Ω—Å–∫" in user_text or "—Å–≤–µ—Ç–ª–∞–Ω" in user_text:
        voice = "ru-RU-SvetlanaNeural"
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
    prepared_text = speech_synthesizer.prepare_text_for_tts(text_to_speak)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        status_message = await update.message.reply_text(
            "üéô –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞—É–¥–∏–æ...",
            reply_to_message_id=update.message.message_id
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        audio_path = await speech_synthesizer.text_to_speech(
            prepared_text,
            voice=voice,
            rate=voice_params["rate"],
            volume=voice_params["volume"]
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
        with open(audio_path, 'rb') as audio:
            await update.message.reply_voice(
                voice=audio,
                reply_to_message_id=update.message.message_id,
                caption="üéô –í–æ—Ç –≤–∞—à–µ –∞—É–¥–∏–æ"
            )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_message.delete()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
        speech_synthesizer.cleanup_temp_files()
        
    except Exception as e:
        await status_message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ: {str(e)}"
        )
    
    return True

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –æ–∑–≤—É—á–∫–∏
    if await handle_voice_command(update, context):
        return
    
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...

async def handle_mail_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—ã–±–æ—Ä–∞ —è—â–∏–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —è—â–∏–∫–æ–≤ –∏–∑ oauth_settings
    try:
        with open("email_oauth_settings.json", "r", encoding="utf-8") as f:
            oauth_settings = json.load(f)
        mailboxes = list(oauth_settings.keys())
    except Exception:
        mailboxes = ["gmail"]
    
    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —è—â–∏–∫–æ–≤ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
    if len(mailboxes) > 1 and not context.user_data.get('selected_mailbox'):
        keyboard = [[InlineKeyboardButton(box, callback_data=f"mailbox:{box}")] for box in mailboxes]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è—â–∏–∫
    mailbox = context.user_data.get('selected_mailbox', mailboxes[0])
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞
    new_count = inbox_monitor.fetch_emails_via_oauth(provider=mailbox)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    summary = inbox_monitor.get_inbox_summary()
    text = inbox_monitor.format_telegram_summary(summary)
    await update.message.reply_text(
        f"üì¨ –ü–æ—á—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ ({mailbox}):\n\n{text}"
    )
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∏—Å–µ–º, —Ç—Ä–µ–±—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    actionable = summary.get('action_required', [])
    if actionable:
        for msg in actionable[:5]:
            keyboard = [
                [
                    InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"mail_reply:{msg['id']}"),
                    InlineKeyboardButton("–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"mail_ignore:{msg['id']}")
                ]
            ]
            preview = f"‚úâÔ∏è {msg['subject']}\n–û—Ç: {msg['sender']}\n{msg['content'][:100]}..."
            await update.message.reply_text(preview, reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_mailbox_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    mailbox = query.data.replace("mailbox:", "")
    context.user_data['selected_mailbox'] = mailbox
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è—â–∏–∫–∞
    class DummyMsg:
        def __init__(self, chat_id):
            self.chat_id = chat_id
            self.message_id = None
    update.message = DummyMsg(query.message.chat_id)
    await handle_mail_summary(update, context)

async def handle_mail_reply_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å' ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    msg_id = query.data.replace("mail_reply:", "")
    reply_text = inbox_monitor.suggest_reply(msg_id)
    context.user_data['replying_to_mail'] = msg_id
    keyboard = [
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç", callback_data=f"mail_send:{msg_id}")],
        [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç", callback_data=f"mail_custom:{msg_id}")]
    ]
    await query.message.reply_text(
        f"üí¨ –®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞:\n\n{reply_text}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_mail_ignore_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å'"""
    query = update.callback_query
    await query.answer()
    msg_id = query.data.replace("mail_ignore:", "")
    inbox_monitor.mark_as_ignored(msg_id)
    await query.message.reply_text("–ü–∏—Å—å–º–æ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ.")

async def handle_mail_send_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    query = update.callback_query
    await query.answer()
    msg_id = query.data.replace("mail_send:", "")
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMTP –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞
    inbox_monitor.mark_as_responded(msg_id)
    await query.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)")

async def handle_mail_custom_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–≤–æ–π –æ—Ç–≤–µ—Ç"""
    query = update.callback_query
    await query.answer()
    msg_id = query.data.replace("mail_custom:", "")
    context.user_data['replying_to_mail'] = msg_id
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–∏—Å—å–º–æ:")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–∏—Å—å–º–æ
    if 'replying_to_mail' in context.user_data:
        msg_id = context.user_data.pop('replying_to_mail')
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMTP –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞
        inbox_monitor.mark_as_responded(msg_id)
        await update.message.reply_text("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)")
        return
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...

from core.deadline_monitor import deadline_monitor

async def handle_deadline_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ —Ä–∏—Å–∫–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    report = deadline_monitor.format_risk_report()
    await update.message.reply_text(report)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()
    # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...
    if any(cmd in user_text for cmd in ["–ø—Ä–æ–≤–µ—Ä—å –¥–µ–¥–ª–∞–π–Ω—ã", "—á—Ç–æ –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π", "–¥–µ–¥–ª–∞–π–Ω", "—Ä–∏—Å–∫ –ø—Ä–æ—Å—Ä–æ—á–∫–∏"]):
        await handle_deadline_check(update, context)
        return
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...

from core.meeting_assistant import meeting_assistant

async def handle_meeting_assistant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –∑–≤–æ–Ω–∫–µ: –∞—É–¥–∏–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç, summary, –¥–µ–π—Å—Ç–≤–∏—è, –∑–∞–¥–∞—á–∏"""
    # –ï—Å–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª
    if update.message.voice or update.message.audio or update.message.document:
        file = update.message.voice or update.message.audio or update.message.document
        file_obj = await file.get_file()
        with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as tmp:
            await file_obj.download_to_drive(tmp.name)
            audio_path = tmp.name
        text = meeting_assistant.transcribe_audio(audio_path)
        os.remove(audio_path)
    else:
        text = update.message.text
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å—Ç—Ä–µ—á—É
    result = meeting_assistant.analyze_meeting_text(text)
    summary = result.get('summary', '')
    actions = result.get('actions', [])
    tasks = result.get('tasks', [])
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = f"üìù –ö—Ä–∞—Ç–∫–∏–µ –∑–∞–º–µ—Ç–∫–∏:\n{summary}\n\n"
    if actions:
        response += "üí° –î–µ–π—Å—Ç–≤–∏—è:\n" + "\n".join(f"‚Äî {a}" for a in actions) + "\n\n"
    if tasks:
        response += "üìã –ó–∞–¥–∞—á–∏:\n" + "\n".join(f"‚Ä¢ {t}" for t in tasks)
    await update.message.reply_text(response)
    # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏
    if tasks:
        keyboard = [[InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏", callback_data="meeting_add_tasks")]]
        context.user_data['meeting_tasks_to_add'] = tasks
        await update.message.reply_text("–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–æ–∫?", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_meeting_add_tasks_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tasks = context.user_data.pop('meeting_tasks_to_add', [])
    meeting_assistant.add_action_tasks(tasks)
    await query.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower() if update.message.text else ''
    # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...
    if any(cmd in user_text for cmd in ["–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –∑–≤–æ–Ω–∫–µ", "–∑–∞–º–µ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á–∏", "–∏—Ç–æ–≥–∏ –∑–≤–æ–Ω–∫–∞", "–∏—Ç–æ–≥–∏ –≤—Å—Ç—Ä–µ—á–∏"]):
        await handle_meeting_assistant(update, context)
        return
    # –ï—Å–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –ø–æ–º–µ—Ç–∫–æ–π "–≤—Å—Ç—Ä–µ—á–∞"
    if (update.message.voice or update.message.audio or update.message.document) and (
        update.message.caption and "–≤—Å—Ç—Ä–µ—á–∞" in update.message.caption.lower()):
        await handle_meeting_assistant(update, context)
        return
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...

def run_bot():
    import asyncio
    from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler
    
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    # Callback-–∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(handle_callback_query))
    # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.VOICE, handle_voice_message))
    # –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∞—É–¥–∏–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –≤—Å—Ç—Ä–µ—á)
    app.add_handler(MessageHandler(filters.Document.ALL | filters.AUDIO, handle_meeting_assistant))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ polling –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    start_scheduler(app)
    start_calendar_polling(app)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("[TelegramBot] –ó–∞–ø—É—Å–∫ polling...")
    asyncio.run(app.run_polling())