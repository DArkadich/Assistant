import os
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
import openai
from core import calendar, finances, planner
import re
import json
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
import pytz

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DEFAULT_MODEL = os.getenv("OPENAI_DEFAULT_MODEL", "gpt-3.5-turbo")
SMART_MODEL = os.getenv("OPENAI_SMART_MODEL", "gpt-4-1106-preview")

client = openai.OpenAI(api_key=OPENAI_API_KEY)

# –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä: –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT-4.1
SMART_KEYWORDS = [
    "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "–æ—Ç—á—ë—Ç", "KPI", "–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–ø–∏—Å—å–º–æ", "–ö–ü", "–æ—Ñ—Ñ–µ—Ä", "—Å–ª–æ–∂–Ω—ã–π", "–ø—Ä–æ–≥–Ω–æ–∑", "–¥–∏–∞–≥—Ä–∞–º–º–∞", "–≤—ã—Ä—É—á–∫–∞", "–∏–Ω–≤–µ—Å—Ç–æ—Ä"
]

# --- GPT intent parsing for tasks ---
TASK_PROMPT = (
    "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤–µ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
    "–ù–∞ –≤—Ö–æ–¥–µ ‚Äî —Ñ—Ä–∞–∑–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
    "–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏: intent (add/view/delete/move/done/summary), "
    "task_text, date (–ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ null), time (–ß–ß:–ú–ú –∏–ª–∏ null), new_date (–µ—Å–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å), task_id (–µ—Å–ª–∏ –µ—Å—Ç—å), "
    "–ø—Ä–∏–º–µ—Ä: {\"intent\": \"add\", \"task_text\": \"–í—Å—Ç—Ä–µ—á–∞ —Å –¢–∏–≥—Ä–æ–π\", \"date\": \"2024-06-10\", \"time\": \"15:00\"}"
)

# --- GPT intent parsing for finances ---
FIN_PROMPT = (
    "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á—ë—Ç. "
    "–ù–∞ –≤—Ö–æ–¥–µ ‚Äî —Ñ—Ä–∞–∑–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
    "–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏: intent (income/expense/report/unclassified), "
    "amount (—á–∏—Å–ª–æ), project (—Å—Ç—Ä–æ–∫–∞), description (—Å—Ç—Ä–æ–∫–∞), date (–ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ null), period (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ null), category (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ null). "
    "–ü—Ä–∏–º–µ—Ä—ã: "
    "{\"intent\": \"income\", \"amount\": 400000, \"project\": \"–í–ë\", \"description\": \"–ü–æ—Å—Ç—É–ø–∏–ª–∏ –æ—Ç –í–ë\", \"date\": \"2024-06-10\"}"
    "{\"intent\": \"expense\", \"amount\": 15000, \"project\": \"Horien\", \"description\": \"–ó–∞–∫—É–ø–∫–∞ –∫–æ—Ä–æ–±–æ–∫\", \"date\": \"2024-06-10\", \"category\": \"—É–ø–∞–∫–æ–≤–∫–∞\"}"
    "{\"intent\": \"report\", \"period\": \"–∏—é–Ω—å\", \"project\": \"Horien\"}"
    "{\"intent\": \"unclassified\"}"
)

def choose_model(user_text: str) -> str:
    for word in SMART_KEYWORDS:
        if word.lower() in user_text.lower():
            return SMART_MODEL
    return DEFAULT_MODEL

async def ask_openai(user_text: str, system_prompt: str = None) -> str:
    model = choose_model(user_text)
    messages = []
    if system_prompt:
        messages.append({"role": "system", "content": system_prompt})
    messages.append({"role": "user", "content": user_text})
    response = client.chat.completions.create(
        model=model,
        messages=messages,
        max_tokens=512,
        temperature=0.2
    )
    return response.choices[0].message.content.strip()

async def parse_task_intent(user_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ GPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –∏–Ω—Ç–µ–Ω—Ç–æ–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –∑–∞–¥–∞—á."""
    gpt_response = await ask_openai(user_text, system_prompt=TASK_PROMPT)
    try:
        data = json.loads(gpt_response)
        return data
    except Exception:
        return None

async def parse_finance_intent(user_text: str):
    gpt_response = await ask_openai(user_text, system_prompt=FIN_PROMPT)
    try:
        data = json.loads(gpt_response)
        return data
    except Exception:
        return None

async def send_daily_summary(update: Update):
    today = datetime.now().strftime("%Y-%m-%d")
    # –ó–∞–¥–∞—á–∏
    tasks = calendar.get_daily_plan(today)
    if tasks:
        tasks_text = "\n".join([f"- {t['task_text']} {t['time'] or ''} {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}" for t in tasks])
    else:
        tasks_text = "–ù–µ—Ç –∑–∞–¥–∞—á."
    # –¶–µ–ª–∏
    goals = planner.get_goals()
    if goals:
        goals_text = "\n".join([f"- {g['goal_text']} ‚Äî {g['progress']}% (–¥–æ {g['deadline']})" for g in goals])
    else:
        goals_text = "–ù–µ—Ç —Ü–µ–ª–µ–π."
    # –§–∏–Ω–∞–Ω—Å—ã (–∑–∞ —Å–µ–≥–æ–¥–Ω—è)
    report = finances.get_report(period=today)
    finance_text = f"–î–æ—Ö–æ–¥: {report['income']}, –†–∞—Å—Ö–æ–¥: {report['expense']}, –ü—Ä–∏–±—ã–ª—å: {report['profit']}"
    # –ò—Ç–æ–≥
    summary = f"üóìÔ∏è –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{tasks_text}\n\nüéØ –¶–µ–ª–∏:\n{goals_text}\n\nüí∞ –§–∏–Ω–∞–Ω—Å—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{finance_text}"
    await update.message.reply_text(summary)

async def send_weekly_summary(update: Update):
    today = datetime.now().date()
    week = [(today + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(7)]
    # –ó–∞–¥–∞—á–∏
    tasks = calendar.get_week_plan(today.strftime("%Y-%m-%d"))
    if tasks:
        tasks_text = "\n".join([f"- {t['task_text']} ({t['date']}) {t['time'] or ''} {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}" for t in tasks])
    else:
        tasks_text = "–ù–µ—Ç –∑–∞–¥–∞—á."
    # –¶–µ–ª–∏
    goals = planner.get_goals()
    if goals:
        goals_text = "\n".join([f"- {g['goal_text']} ‚Äî {g['progress']}% (–¥–æ {g['deadline']})" for g in goals])
    else:
        goals_text = "–ù–µ—Ç —Ü–µ–ª–µ–π."
    # –§–∏–Ω–∞–Ω—Å—ã (–∑–∞ –Ω–µ–¥–µ–ª—é)
    period = today.strftime("%Y-%m-%d")[:7]  # –ì–ì–ì–ì-–ú–ú
    report = finances.get_report(period=period)
    finance_text = f"–î–æ—Ö–æ–¥: {report['income']}, –†–∞—Å—Ö–æ–¥: {report['expense']}, –ü—Ä–∏–±—ã–ª—å: {report['profit']}"
    # –ò—Ç–æ–≥
    summary = f"üóìÔ∏è –ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é:\n{tasks_text}\n\nüéØ –¶–µ–ª–∏:\n{goals_text}\n\nüí∞ –§–∏–Ω–∞–Ω—Å—ã –∑–∞ –º–µ—Å—è—Ü:\n{finance_text}"
    await update.message.reply_text(summary)

# --- –î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–≤–æ–¥–∫–∏ ---
last_chat_id_file = 'last_chat_id.txt'
def save_last_chat_id(chat_id):
    with open(last_chat_id_file, 'w') as f:
        f.write(str(chat_id))
def load_last_chat_id():
    if os.path.exists(last_chat_id_file):
        with open(last_chat_id_file, 'r') as f:
            return int(f.read().strip())
    return None

async def send_daily_summary_to_chat(app, chat_id):
    today = datetime.now().strftime("%Y-%m-%d")
    tasks = calendar.get_daily_plan(today)
    if tasks:
        tasks_text = "\n".join([f"- {t['task_text']} {t['time'] or ''} {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}" for t in tasks])
    else:
        tasks_text = "–ù–µ—Ç –∑–∞–¥–∞—á."
    goals = planner.get_goals()
    if goals:
        goals_text = "\n".join([f"- {g['goal_text']} ‚Äî {g['progress']}% (–¥–æ {g['deadline']})" for g in goals])
    else:
        goals_text = "–ù–µ—Ç —Ü–µ–ª–µ–π."
    report = finances.get_report(period=today)
    finance_text = f"–î–æ—Ö–æ–¥: {report['income']}, –†–∞—Å—Ö–æ–¥: {report['expense']}, –ü—Ä–∏–±—ã–ª—å: {report['profit']}"
    summary = f"üóìÔ∏è –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{tasks_text}\n\nüéØ –¶–µ–ª–∏:\n{goals_text}\n\nüí∞ –§–∏–Ω–∞–Ω—Å—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{finance_text}"
    await app.bot.send_message(chat_id=chat_id, text=summary)

# --- Scheduler ---
def start_scheduler(app):
    scheduler = BackgroundScheduler(timezone=pytz.timezone('Europe/Moscow'))
    def job():
        chat_id = load_last_chat_id()
        if chat_id:
            import asyncio
            asyncio.run(send_daily_summary_to_chat(app, chat_id))
    scheduler.add_job(job, 'cron', hour=8, minute=0)
    scheduler.start()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–≤–æ–¥–∫–∏
    save_last_chat_id(update.effective_chat.id)
    # --- –°–≤–æ–¥–∫–∞ –ø–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ñ—Ä–∞–∑–∞–º ---
    if re.search(r"(—á—Ç–æ —É –º–µ–Ω—è|–ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è|—É—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞|–¥–∞–π —Å–≤–æ–¥–∫—É|—Å–µ–≥–æ–¥–Ω—è)", user_text, re.I):
        await send_daily_summary(update)
        return
    if re.search(r"(–ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª—è|–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞)", user_text, re.I):
        await send_weekly_summary(update)
        return
    # --- –§–∏–Ω–∞–Ω—Å—ã —á–µ—Ä–µ–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ ---
    fin_intent = await parse_finance_intent(user_text)
    if fin_intent:
        intent = fin_intent.get("intent")
        if intent == "income":
            op = finances.add_income(
                fin_intent.get("amount"),
                fin_intent.get("project"),
                description=fin_intent.get("description"),
                date=fin_intent.get("date")
            )
            await update.message.reply_text(f"–î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {op['amount']} ({op['project']}) ‚Äî {op['description']} ({op['date']})")
            return
        elif intent == "expense":
            op = finances.add_expense(
                fin_intent.get("amount"),
                fin_intent.get("project"),
                description=fin_intent.get("description"),
                date=fin_intent.get("date"),
                category=fin_intent.get("category")
            )
            await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {op['amount']} ({op['project']}) ‚Äî {op['description']} ({op['date']})")
            return
        elif intent == "report":
            report = finances.get_report(
                period=fin_intent.get("period"),
                project=fin_intent.get("project")
            )
            await update.message.reply_text(
                f"–û—Ç—á—ë—Ç: –î–æ—Ö–æ–¥ {report['income']}, –†–∞—Å—Ö–æ–¥ {report['expense']}, –ü—Ä–∏–±—ã–ª—å {report['profit']}"
            )
            return
        elif intent == "unclassified":
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —è–≤–Ω–æ –µ—Å—Ç—å —Å–ª–æ–≤–∞ –ø—Ä–æ —Ç—Ä–∞—Ç—ã/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if "–∫–∞—Ç–µ–≥–æ—Ä" in user_text.lower() or "—Ç—Ä–∞—Ç—ã" in user_text.lower():
                unclassified = finances.get_unclassified_expenses()
                if not unclassified:
                    await update.message.reply_text("–ù–µ—Ç —Ç—Ä–∞—Ç –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
                else:
                    text = "\n".join([f"{op['amount']} ({op['project']}) ‚Äî {op['description']} ({op['date']})" for op in unclassified])
                    await update.message.reply_text(f"–¢—Ä–∞—Ç—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{text}")
                return
    # --- –¶–µ–ª–∏ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
    if re.match(r"—É—Å—Ç–∞–Ω–æ–≤–∏ —Ü–µ–ª—å|–¥–æ–±–∞–≤—å —Ü–µ–ª—å", user_text, re.I):
        # –ü—Ä–∏–º–µ—Ä: "–£—Å—Ç–∞–Ω–æ–≤–∏ —Ü–µ–ª—å 3 –º–ª–Ω –≤—ã—Ä—É—á–∫–∏ –¥–æ —Å–µ–Ω—Ç—è–±—Ä—è"
        match = re.search(r"—Ü–µ–ª—å (.+?)( –¥–æ ([^\n]+))?$", user_text, re.I)
        if match:
            goal_text = match.group(1).strip()
            deadline = match.group(3).strip() if match.group(3) else None
            goal = planner.set_goal(goal_text, deadline)
            await update.message.reply_text(f"–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {goal['goal_text']} (–¥–æ {goal['deadline']})")
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–£—Å—Ç–∞–Ω–æ–≤–∏ —Ü–µ–ª—å <—Ç–µ–∫—Å—Ç> –¥–æ <–¥–∞—Ç–∞/—Å—Ä–æ–∫>'")
        return
    elif re.match(r"–∫–∞–∫–∏–µ —Ü–µ–ª–∏|–ø–æ–∫–∞–∂–∏ —Ü–µ–ª–∏|—Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π", user_text, re.I):
        goals = planner.get_goals()
        if not goals:
            await update.message.reply_text("–¶–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            text = "\n".join([f"- {g['goal_text']} (–¥–æ {g['deadline']})" for g in goals])
            await update.message.reply_text(f"–¢–µ–∫—É—â–∏–µ —Ü–µ–ª–∏:\n{text}")
    elif re.match(r"–ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏", user_text, re.I):
        # –ü—Ä–∏–º–µ—Ä: "–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ 3 –º–ª–Ω –≤—ã—Ä—É—á–∫–∏"
        match = re.search(r"–ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ (.+)$", user_text, re.I)
        if match:
            goal_text = match.group(1).strip()
            progress = planner.get_goal_progress(goal_text)
            if progress:
                await update.message.reply_text(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ '{progress['goal_text']}': {progress['progress']}% (–¥–æ {progress['deadline']})")
            else:
                await update.message.reply_text("–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ <—Ç–µ–∫—Å—Ç —Ü–µ–ª–∏>'")
    elif re.match(r"–æ–±–Ω–æ–≤–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏", user_text, re.I):
        # –ü—Ä–∏–º–µ—Ä: "–û–±–Ω–æ–≤–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ 3 –º–ª–Ω –≤—ã—Ä—É—á–∫–∏: 40%"
        match = re.search(r"–æ–±–Ω–æ–≤–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ (.+?):\s*(\d+)%?", user_text, re.I)
        if match:
            goal_text = match.group(1).strip()
            progress = int(match.group(2))
            updated = planner.update_goal_progress(goal_text, progress)
            if updated:
                await update.message.reply_text(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ '{goal_text}' –æ–±–Ω–æ–≤–ª—ë–Ω: {progress}%")
            else:
                await update.message.reply_text("–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–û–±–Ω–æ–≤–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏ <—Ç–µ–∫—Å—Ç>: <—á–∏—Å–ª–æ>%'")
    elif re.match(r"–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –∫ —Ü–µ–ª–∏", user_text, re.I):
        # –ü—Ä–∏–º–µ—Ä: "–î–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –∫ —Ü–µ–ª–∏ 3 –º–ª–Ω –≤—ã—Ä—É—á–∫–∏: –ü–æ–∑–≤–æ–Ω–∏—Ç—å 10 –∫–ª–∏–µ–Ω—Ç–∞–º"
        match = re.search(r"–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –∫ —Ü–µ–ª–∏ (.+?):\s*(.+)$", user_text, re.I)
        if match:
            goal_text = match.group(1).strip()
            task_text = match.group(2).strip()
            task = planner.add_goal_task(goal_text, task_text)
            await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Ü–µ–ª–∏ '{goal_text}': {task['task_text']}")
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–î–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –∫ —Ü–µ–ª–∏ <—Ü–µ–ª—å>: <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏>'")
    elif re.match(r"–æ—Ç–º–µ—Ç—å –∑–∞–¥–∞—á—É –ø–æ —Ü–µ–ª–∏.*–∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é", user_text, re.I):
        # –ü—Ä–∏–º–µ—Ä: "–û—Ç–º–µ—Ç—å –∑–∞–¥–∞—á—É –ø–æ —Ü–µ–ª–∏ 3 –º–ª–Ω –≤—ã—Ä—É—á–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é: –ü–æ–∑–≤–æ–Ω–∏—Ç—å 10 –∫–ª–∏–µ–Ω—Ç–∞–º"
        match = re.search(r"–æ—Ç–º–µ—Ç—å –∑–∞–¥–∞—á—É –ø–æ —Ü–µ–ª–∏ (.+?) –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é: (.+)$", user_text, re.I)
        if match:
            goal_text = match.group(1).strip()
            task_text = match.group(2).strip()
            task = planner.mark_goal_task_done(goal_text, task_text)
            if task:
                await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ '{task_text}' –ø–æ —Ü–µ–ª–∏ '{goal_text}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
            else:
                await update.message.reply_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–û—Ç–º–µ—Ç—å –∑–∞–¥–∞—á—É –ø–æ —Ü–µ–ª–∏ <—Ü–µ–ª—å> –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é: <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏>'")
    elif re.match(r"–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ü–µ–ª–∏", user_text, re.I):
        # –ü—Ä–∏–º–µ—Ä: "–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ü–µ–ª–∏ 3 –º–ª–Ω –≤—ã—Ä—É—á–∫–∏"
        match = re.search(r"–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ü–µ–ª–∏ (.+)$", user_text, re.I)
        if match:
            goal_text = match.group(1).strip()
            tasks = planner.get_goal_tasks(goal_text)
            if not tasks:
                await update.message.reply_text("–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ —ç—Ç–æ–π —Ü–µ–ª–∏ –Ω–µ—Ç.")
            else:
                text = "\n".join([f"- {t['task_text']} ({t['date'] if t['date'] else '–±–µ–∑ –¥–∞—Ç—ã'}) {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}" for t in tasks])
                await update.message.reply_text(f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ü–µ–ª–∏ '{goal_text}':\n{text}")
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ü–µ–ª–∏ <—Ç–µ–∫—Å—Ç —Ü–µ–ª–∏>'")
    elif re.match(r"—Ä–∞–∑–±–µ–π —Ü–µ–ª—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", user_text, re.I):
        # –ü—Ä–∏–º–µ—Ä: "–†–∞–∑–±–µ–π —Ü–µ–ª—å 3 –º–ª–Ω –≤—ã—Ä—É—á–∫–∏ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: 3000000 —Å 2024-06-01 –ø–æ 2024-06-30 —Ä—É–±."
        match = re.search(r"—Ä–∞–∑–±–µ–π —Ü–µ–ª—å (.+?) –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: (\d+) —Å (\d{4}-\d{2}-\d{2}) –ø–æ (\d{4}-\d{2}-\d{2}) ?([\w.]+)?", user_text, re.I)
        if match:
            goal_text = match.group(1).strip()
            total_value = int(match.group(2))
            start_date = match.group(3)
            end_date = match.group(4)
            unit = match.group(5) if match.group(5) else "–µ–¥–∏–Ω–∏—Ü"
            tasks = planner.suggest_daily_tasks(goal_text, total_value, start_date, end_date, unit)
            await update.message.reply_text(f"–°–æ–∑–¥–∞–Ω–æ {len(tasks)} –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ —Ü–µ–ª–∏ '{goal_text}'.")
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: '–†–∞–∑–±–µ–π —Ü–µ–ª—å <—Ü–µ–ª—å> –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: <—á–∏—Å–ª–æ> —Å <–¥–∞—Ç–∞> –ø–æ <–¥–∞—Ç–∞> <–µ–¥–∏–Ω–∏—Ü—ã>'")
    # –ü—Ä–µ–∂–Ω—è—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
    elif "–∑–∞–¥–∞—á" in user_text or "–≤—Å—Ç—Ä–µ—á–∞" in user_text or "–Ω–∞–ø–æ–º–Ω–∏" in user_text:
        await update.message.reply_text("[–ó–∞–¥–∞—á–∏] (–∑–∞–≥–ª—É—à–∫–∞)" )
    elif "–ø—Ä–∏–±—ã–ª—å" in user_text or "–¥–æ—Ö–æ–¥" in user_text or "—Ä–∞—Å—Ö–æ–¥" in user_text or "—Ñ–∏–Ω–∞–Ω—Å" in user_text:
        await update.message.reply_text("[–§–∏–Ω–∞–Ω—Å—ã] (–∑–∞–≥–ª—É—à–∫–∞)")
    elif "—Ü–µ–ª—å" in user_text or "KPI" in user_text or "–ø—Ä–æ–≥—Ä–µ—Å—Å" in user_text:
        await update.message.reply_text("[–¶–µ–ª–∏/KPI] (–∑–∞–≥–ª—É—à–∫–∞)")
    # --- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –∑–∞–¥–∞—á ---
    task_intent = await parse_task_intent(user_text)
    if task_intent:
        intent = task_intent.get("intent")
        if intent == "add":
            task = calendar.add_task(
                task_intent.get("task_text"),
                date=task_intent.get("date"),
                time=task_intent.get("time")
            )
            await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task['task_text']} ({task['date']} {task['time'] or ''})")
            return
        elif intent == "view":
            date = task_intent.get("date")
            if date:
                tasks = calendar.get_daily_plan(date)
                if not tasks:
                    await update.message.reply_text("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–¥–∞—á –Ω–µ—Ç.")
                else:
                    text = "\n".join([f"[{t['id']}] {t['task_text']} {t['time'] or ''} {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}" for t in tasks])
                    await update.message.reply_text(f"–ó–∞–¥–∞—á–∏ –Ω–∞ {date}:\n{text}")
            else:
                tasks = calendar.get_tasks()
                if not tasks:
                    await update.message.reply_text("–ó–∞–¥–∞—á –Ω–µ—Ç.")
                else:
                    text = "\n".join([f"[{t['id']}] {t['task_text']} {t['date']} {t['time'] or ''} {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}" for t in tasks])
                    await update.message.reply_text(f"–í—Å–µ –∑–∞–¥–∞—á–∏:\n{text}")
            return
        elif intent == "delete":
            task_id = task_intent.get("task_id")
            if task_id:
                calendar.delete_task(task_id)
                await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞.")
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        elif intent == "move":
            task_id = task_intent.get("task_id")
            new_date = task_intent.get("new_date")
            if task_id and new_date:
                calendar.move_task(task_id, new_date)
                await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ {task_id} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ {new_date}.")
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–ª–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É.")
            return
        elif intent == "done":
            task_id = task_intent.get("task_id")
            if task_id:
                calendar.mark_task_done(task_id)
                await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏.")
            return
        elif intent == "summary":
            today = datetime.now().strftime("%Y-%m-%d")
            tasks = calendar.get_daily_plan(today)
            if not tasks:
                await update.message.reply_text("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç.")
            else:
                text = "\n".join([f"[{t['id']}] {t['task_text']} {t['time'] or ''} {'[–í—ã–ø–æ–ª–Ω–µ–Ω–æ]' if t['done'] else ''}" for t in tasks])
                await update.message.reply_text(f"–ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{text}")
            return
    # –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞—á–∞ –∏ –Ω–µ —Ñ–∏–Ω–∞–Ω—Å—ã ‚Äî fallback –Ω–∞ GPT-–æ—Ç–≤–µ—Ç
    reply = await ask_openai(user_text)
    await update.message.reply_text(reply)

def run_bot():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    start_scheduler(app)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling() 